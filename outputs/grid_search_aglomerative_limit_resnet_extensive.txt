0it [00:00, ?it/s]10it [00:00, 96.56it/s]26it [00:00, 130.50it/s]42it [00:00, 140.33it/s]57it [00:00, 143.61it/s]72it [00:00, 144.25it/s]87it [00:00, 145.91it/s]103it [00:00, 148.56it/s]118it [00:00, 148.85it/s]134it [00:00, 149.53it/s]149it [00:01, 148.78it/s]165it [00:01, 149.41it/s]181it [00:01, 149.93it/s]197it [00:01, 150.35it/s]213it [00:01, 150.18it/s]229it [00:01, 150.13it/s]245it [00:01, 149.76it/s]261it [00:01, 150.13it/s]277it [00:01, 150.42it/s]293it [00:01, 150.07it/s]309it [00:02, 149.25it/s]325it [00:02, 149.71it/s]340it [00:02, 149.41it/s]356it [00:02, 149.89it/s]371it [00:02, 149.68it/s]387it [00:02, 150.02it/s]403it [00:02, 150.74it/s]419it [00:02, 150.29it/s]435it [00:02, 149.92it/s]450it [00:03, 149.78it/s]466it [00:03, 150.24it/s]482it [00:03, 149.37it/s]498it [00:03, 149.71it/s]513it [00:03, 147.97it/s]528it [00:03, 147.27it/s]544it [00:03, 148.76it/s]559it [00:03, 148.44it/s]574it [00:03, 148.42it/s]590it [00:03, 149.15it/s]605it [00:04, 148.47it/s]620it [00:04, 145.17it/s]636it [00:04, 147.05it/s]651it [00:04, 147.89it/s]666it [00:04, 146.68it/s]681it [00:04, 147.12it/s]696it [00:04, 147.58it/s]711it [00:04, 147.77it/s]727it [00:04, 148.65it/s]742it [00:05, 143.70it/s]757it [00:05, 143.62it/s]773it [00:05, 146.15it/s]788it [00:05, 145.92it/s]803it [00:05, 145.96it/s]818it [00:05, 145.02it/s]834it [00:05, 147.12it/s]850it [00:05, 148.67it/s]865it [00:05, 148.08it/s]880it [00:05, 148.59it/s]895it [00:06, 147.65it/s]911it [00:06, 149.16it/s]926it [00:06, 149.05it/s]942it [00:06, 149.60it/s]957it [00:06, 148.76it/s]972it [00:06, 148.61it/s]988it [00:06, 149.49it/s]1003it [00:06, 149.61it/s]1018it [00:06, 148.52it/s]1034it [00:06, 149.24it/s]1049it [00:07, 149.29it/s]1064it [00:07, 149.34it/s]1080it [00:07, 150.35it/s]1096it [00:07, 149.82it/s]1112it [00:07, 150.13it/s]1128it [00:07, 149.25it/s]1143it [00:07, 149.21it/s]1158it [00:07, 149.10it/s]1174it [00:07, 150.06it/s]1190it [00:08, 150.03it/s]1206it [00:08, 150.14it/s]1222it [00:08, 149.36it/s]1237it [00:08, 148.85it/s]1253it [00:08, 150.00it/s]1268it [00:08, 149.26it/s]1283it [00:08, 148.38it/s]1299it [00:08, 149.01it/s]1314it [00:08, 148.46it/s]1330it [00:08, 149.73it/s]1346it [00:09, 150.71it/s]1362it [00:09, 150.79it/s]1378it [00:09, 151.45it/s]1394it [00:09, 151.31it/s]1410it [00:09, 149.68it/s]1425it [00:09, 149.45it/s]1440it [00:09, 148.31it/s]1455it [00:09, 146.94it/s]1470it [00:09, 147.29it/s]1485it [00:10, 147.67it/s]1500it [00:10, 145.68it/s]1515it [00:10, 144.19it/s]1530it [00:10, 144.60it/s]1545it [00:10, 145.44it/s]1560it [00:10, 146.65it/s]1575it [00:10, 147.04it/s]1590it [00:10, 146.45it/s]1606it [00:10, 147.73it/s]1621it [00:10, 148.18it/s]1636it [00:11, 148.18it/s]1651it [00:11, 148.13it/s]1666it [00:11, 148.17it/s]1681it [00:11, 147.79it/s]1697it [00:11, 148.74it/s]1713it [00:11, 149.70it/s]1728it [00:11, 146.30it/s]1743it [00:11, 145.54it/s]1758it [00:11, 145.02it/s]1774it [00:11, 146.91it/s]1790it [00:12, 148.19it/s]1806it [00:12, 149.33it/s]1821it [00:12, 149.30it/s]1837it [00:12, 149.91it/s]1853it [00:12, 150.15it/s]1869it [00:12, 150.12it/s]1885it [00:12, 149.19it/s]1901it [00:12, 149.63it/s]1916it [00:12, 149.06it/s]1932it [00:13, 149.51it/s]1947it [00:13, 147.94it/s]1962it [00:13, 146.80it/s]1978it [00:13, 148.33it/s]1993it [00:13, 148.24it/s]2009it [00:13, 149.10it/s]2024it [00:13, 147.77it/s]2039it [00:13, 146.76it/s]2054it [00:13, 146.80it/s]2070it [00:13, 148.50it/s]2086it [00:14, 149.43it/s]2102it [00:14, 150.47it/s]2118it [00:14, 150.62it/s]2134it [00:14, 150.93it/s]2150it [00:14, 149.50it/s]2165it [00:14, 149.18it/s]2181it [00:14, 149.06it/s]2196it [00:14, 148.14it/s]2212it [00:14, 149.31it/s]2227it [00:15, 148.51it/s]2243it [00:15, 149.07it/s]2258it [00:15, 149.07it/s]2274it [00:15, 149.65it/s]2289it [00:15, 149.71it/s]2304it [00:15, 149.64it/s]2320it [00:15, 150.24it/s]2336it [00:15, 150.11it/s]2352it [00:15, 148.87it/s]2368it [00:15, 149.69it/s]2384it [00:16, 150.16it/s]2400it [00:16, 151.15it/s]2416it [00:16, 150.51it/s]2432it [00:16, 150.99it/s]2448it [00:16, 152.14it/s]2464it [00:16, 152.71it/s]2480it [00:16, 151.34it/s]2496it [00:16, 150.69it/s]2512it [00:16, 149.02it/s]2528it [00:17, 150.85it/s]2544it [00:17, 150.91it/s]2560it [00:17, 152.06it/s]2576it [00:17, 151.42it/s]2592it [00:17, 152.15it/s]2608it [00:17, 151.84it/s]2624it [00:17, 152.94it/s]2640it [00:17, 153.41it/s]2656it [00:17, 151.24it/s]2672it [00:17, 151.55it/s]2688it [00:18, 152.32it/s]2704it [00:18, 152.85it/s]2720it [00:18, 151.42it/s]2736it [00:18, 151.58it/s]2752it [00:18, 151.20it/s]2768it [00:18, 152.42it/s]2784it [00:18, 152.17it/s]2800it [00:18, 152.16it/s]2816it [00:18, 151.68it/s]2832it [00:19, 151.43it/s]2848it [00:19, 150.96it/s]2864it [00:19, 151.03it/s]2880it [00:19, 150.86it/s]2896it [00:19, 151.73it/s]2912it [00:19, 152.46it/s]2928it [00:19, 151.71it/s]2944it [00:19, 150.77it/s]2960it [00:19, 149.63it/s]2976it [00:19, 151.01it/s]2992it [00:20, 150.90it/s]3008it [00:20, 151.07it/s]3024it [00:20, 150.56it/s]3040it [00:20, 145.41it/s]3055it [00:20, 144.47it/s]3070it [00:20, 143.18it/s]3085it [00:20, 143.77it/s]3100it [00:20, 143.68it/s]3115it [00:20, 141.80it/s]3130it [00:21, 142.01it/s]3145it [00:21, 142.15it/s]3160it [00:21, 143.06it/s]3175it [00:21, 142.95it/s]3190it [00:21, 143.46it/s]3205it [00:21, 143.03it/s]3220it [00:21, 143.56it/s]3235it [00:21, 143.99it/s]3250it [00:21, 143.94it/s]3265it [00:21, 143.53it/s]3280it [00:22, 144.29it/s]3295it [00:22, 143.92it/s]3310it [00:22, 143.93it/s]3325it [00:22, 144.36it/s]3340it [00:22, 143.04it/s]3355it [00:22, 144.93it/s]3370it [00:22, 146.34it/s]3385it [00:22, 146.51it/s]3400it [00:22, 145.65it/s]3415it [00:23, 144.18it/s]3430it [00:23, 144.77it/s]3445it [00:23, 144.74it/s]3460it [00:23, 144.84it/s]3475it [00:23, 143.64it/s]3490it [00:23, 143.95it/s]3505it [00:23, 144.34it/s]3520it [00:23, 144.31it/s]3535it [00:23, 144.33it/s]3550it [00:23, 142.67it/s]3565it [00:24, 141.66it/s]3580it [00:24, 142.94it/s]3595it [00:24, 143.59it/s]3610it [00:24, 143.94it/s]3625it [00:24, 145.01it/s]3640it [00:24, 145.49it/s]3655it [00:24, 145.26it/s]3670it [00:24, 144.50it/s]3685it [00:24, 144.26it/s]3700it [00:24, 143.97it/s]3715it [00:25, 143.75it/s]3730it [00:25, 144.11it/s]3745it [00:25, 144.31it/s]3760it [00:25, 144.19it/s]3775it [00:25, 141.91it/s]3790it [00:25, 141.18it/s]3805it [00:25, 141.71it/s]3820it [00:25, 142.60it/s]3835it [00:25, 143.29it/s]3850it [00:26, 143.09it/s]3865it [00:26, 143.07it/s]3880it [00:26, 143.64it/s]3895it [00:26, 142.20it/s]3910it [00:26, 138.67it/s]3925it [00:26, 141.29it/s]3940it [00:26, 141.98it/s]3955it [00:26, 142.59it/s]3970it [00:26, 142.78it/s]3985it [00:26, 143.09it/s]4000it [00:27, 140.86it/s]4015it [00:27, 141.79it/s]4030it [00:27, 142.59it/s]4045it [00:27, 142.12it/s]4060it [00:27, 142.53it/s]4075it [00:27, 143.58it/s]4090it [00:27, 142.83it/s]4105it [00:27, 143.08it/s]4120it [00:27, 141.70it/s]4135it [00:28, 141.69it/s]4150it [00:28, 142.04it/s]4165it [00:28, 143.14it/s]4180it [00:28, 144.03it/s]4195it [00:28, 144.18it/s]4210it [00:28, 144.05it/s]4225it [00:28, 144.42it/s]4241it [00:28, 146.24it/s]4256it [00:28, 145.95it/s]4271it [00:28, 145.10it/s]4286it [00:29, 145.28it/s]4301it [00:29, 145.71it/s]4317it [00:29, 147.29it/s]4332it [00:29, 147.93it/s]4347it [00:29, 147.66it/s]4362it [00:29, 146.42it/s]4377it [00:29, 145.77it/s]4392it [00:29, 145.70it/s]4407it [00:29, 145.15it/s]4422it [00:30, 144.75it/s]4437it [00:30, 143.88it/s]4452it [00:30, 141.93it/s]4467it [00:30, 142.75it/s]4482it [00:30, 142.62it/s]4497it [00:30, 142.88it/s]4512it [00:30, 143.74it/s]4527it [00:30, 144.19it/s]4542it [00:30, 144.60it/s]4557it [00:30, 144.86it/s]4572it [00:31, 145.02it/s]4587it [00:31, 143.65it/s]4602it [00:31, 144.06it/s]4617it [00:31, 143.96it/s]4632it [00:31, 144.41it/s]4647it [00:31, 145.98it/s]4662it [00:31, 143.21it/s]4677it [00:31, 143.58it/s]4692it [00:31, 144.39it/s]4707it [00:32, 144.43it/s]4722it [00:32, 145.00it/s]4737it [00:32, 144.65it/s]4738it [00:32, 147.07it/s]
0it [00:00, ?it/s]15it [00:00, 147.35it/s]30it [00:00, 147.08it/s]45it [00:00, 146.24it/s]61it [00:00, 148.08it/s]76it [00:00, 146.86it/s]91it [00:00, 142.88it/s]106it [00:00, 142.53it/s]121it [00:00, 140.27it/s]136it [00:00, 139.43it/s]150it [00:01, 138.94it/s]164it [00:01, 138.83it/s]178it [00:01, 138.61it/s]192it [00:01, 137.59it/s]207it [00:01, 139.91it/s]222it [00:01, 141.35it/s]237it [00:01, 142.43it/s]252it [00:01, 143.32it/s]267it [00:01, 142.67it/s]282it [00:01, 142.31it/s]297it [00:02, 142.83it/s]312it [00:02, 143.46it/s]327it [00:02, 144.24it/s]342it [00:02, 144.42it/s]357it [00:02, 143.22it/s]372it [00:02, 143.91it/s]387it [00:02, 144.24it/s]402it [00:02, 144.55it/s]417it [00:02, 144.11it/s]432it [00:03, 143.41it/s]447it [00:03, 144.09it/s]462it [00:03, 145.64it/s]478it [00:03, 147.27it/s]493it [00:03, 146.51it/s]508it [00:03, 146.90it/s]523it [00:03, 145.34it/s]538it [00:03, 144.96it/s]553it [00:03, 146.19it/s]568it [00:03, 146.69it/s]583it [00:04, 145.23it/s]598it [00:04, 143.29it/s]613it [00:04, 144.22it/s]628it [00:04, 144.49it/s]643it [00:04, 144.69it/s]658it [00:04, 144.70it/s]673it [00:04, 141.17it/s]688it [00:04, 141.43it/s]703it [00:04, 141.48it/s]719it [00:05, 144.30it/s]734it [00:05, 143.26it/s]749it [00:05, 143.97it/s]764it [00:05, 144.31it/s]779it [00:05, 144.38it/s]794it [00:05, 144.67it/s]809it [00:05, 143.58it/s]824it [00:05, 142.52it/s]839it [00:05, 143.07it/s]854it [00:05, 143.64it/s]869it [00:06, 143.23it/s]884it [00:06, 141.85it/s]899it [00:06, 142.94it/s]914it [00:06, 143.82it/s]929it [00:06, 144.44it/s]944it [00:06, 145.66it/s]959it [00:06, 145.73it/s]974it [00:06, 146.31it/s]990it [00:06, 147.46it/s]1005it [00:06, 147.81it/s]1020it [00:07, 147.05it/s]1035it [00:07, 141.84it/s]1050it [00:07, 143.05it/s]1065it [00:07, 143.36it/s]1080it [00:07, 144.06it/s]1095it [00:07, 144.31it/s]1110it [00:07, 144.54it/s]1125it [00:07, 144.75it/s]1140it [00:07, 145.12it/s]1155it [00:08, 144.97it/s]1170it [00:08, 144.87it/s]1185it [00:08, 144.97it/s]1200it [00:08, 145.52it/s]1215it [00:08, 145.44it/s]1230it [00:08, 146.41it/s]1245it [00:08, 146.91it/s]1260it [00:08, 141.72it/s]1275it [00:08, 143.26it/s]1290it [00:08, 144.81it/s]1305it [00:09, 144.92it/s]1320it [00:09, 144.37it/s]1335it [00:09, 142.88it/s]1350it [00:09, 144.10it/s]1365it [00:09, 144.31it/s]1380it [00:09, 143.74it/s]1395it [00:09, 143.70it/s]1410it [00:09, 143.41it/s]1425it [00:09, 144.88it/s]1440it [00:10, 144.54it/s]1455it [00:10, 144.85it/s]1470it [00:10, 142.56it/s]1485it [00:10, 139.69it/s]1500it [00:10, 142.19it/s]1515it [00:10, 144.15it/s]1530it [00:10, 145.75it/s]1545it [00:10, 146.43it/s]1560it [00:10, 146.06it/s]1575it [00:10, 145.89it/s]1590it [00:11, 145.98it/s]1605it [00:11, 146.27it/s]1620it [00:11, 144.16it/s]1635it [00:11, 145.30it/s]1650it [00:11, 144.99it/s]1665it [00:11, 144.25it/s]1680it [00:11, 145.20it/s]1695it [00:11, 144.79it/s]1710it [00:11, 144.92it/s]1725it [00:11, 145.09it/s]1740it [00:12, 144.99it/s]1755it [00:12, 145.17it/s]1770it [00:12, 144.10it/s]1785it [00:12, 144.02it/s]1800it [00:12, 144.11it/s]1815it [00:12, 144.69it/s]1830it [00:12, 144.73it/s]1845it [00:12, 144.97it/s]1860it [00:12, 144.89it/s]1875it [00:13, 144.99it/s]1890it [00:13, 144.97it/s]1905it [00:13, 145.18it/s]1920it [00:13, 143.93it/s]1935it [00:13, 143.40it/s]1950it [00:13, 143.37it/s]1965it [00:13, 143.58it/s]1980it [00:13, 144.12it/s]1995it [00:13, 144.25it/s]2010it [00:13, 143.90it/s]2025it [00:14, 143.71it/s]2040it [00:14, 144.31it/s]2055it [00:14, 144.68it/s]2070it [00:14, 143.19it/s]2085it [00:14, 140.99it/s]2100it [00:14, 140.61it/s]2115it [00:14, 140.15it/s]2130it [00:14, 141.05it/s]2145it [00:14, 140.26it/s]2160it [00:15, 140.04it/s]2175it [00:15, 141.30it/s]2190it [00:15, 142.33it/s]2205it [00:15, 143.66it/s]2220it [00:15, 144.51it/s]2235it [00:15, 145.32it/s]2250it [00:15, 145.47it/s]2265it [00:15, 145.33it/s]2280it [00:15, 139.57it/s]2295it [00:15, 140.43it/s]2310it [00:16, 141.39it/s]2325it [00:16, 142.16it/s]2340it [00:16, 141.29it/s]2355it [00:16, 140.10it/s]2370it [00:16, 141.82it/s]2386it [00:16, 145.01it/s]2402it [00:16, 147.77it/s]2418it [00:16, 149.57it/s]2433it [00:16, 149.31it/s]2449it [00:17, 150.24it/s]2465it [00:17, 150.57it/s]2481it [00:17, 151.70it/s]2497it [00:17, 152.01it/s]2513it [00:17, 149.26it/s]2529it [00:17, 149.68it/s]2544it [00:17, 149.72it/s]2560it [00:17, 150.99it/s]2576it [00:17, 150.47it/s]2592it [00:17, 151.25it/s]2608it [00:18, 150.45it/s]2624it [00:18, 151.09it/s]2640it [00:18, 151.31it/s]2656it [00:18, 150.77it/s]2672it [00:18, 149.42it/s]2688it [00:18, 150.50it/s]2704it [00:18, 150.32it/s]2720it [00:18, 150.90it/s]2736it [00:18, 151.17it/s]2752it [00:19, 151.80it/s]2768it [00:19, 152.19it/s]2784it [00:19, 152.53it/s]2800it [00:19, 145.28it/s]2815it [00:19, 144.07it/s]2830it [00:19, 145.37it/s]2846it [00:19, 148.04it/s]2862it [00:19, 150.49it/s]2878it [00:19, 151.79it/s]2894it [00:19, 153.27it/s]2910it [00:20, 153.85it/s]2926it [00:20, 154.56it/s]2942it [00:20, 154.96it/s]2958it [00:20, 155.20it/s]2974it [00:20, 153.44it/s]2990it [00:20, 153.82it/s]3006it [00:20, 154.90it/s]3022it [00:20, 155.19it/s]3038it [00:20, 155.51it/s]3054it [00:20, 156.27it/s]3070it [00:21, 156.76it/s]3086it [00:21, 156.56it/s]3102it [00:21, 156.76it/s]3118it [00:21, 157.15it/s]3134it [00:21, 156.45it/s]3150it [00:21, 156.41it/s]3166it [00:21, 155.46it/s]3182it [00:21, 155.38it/s]3198it [00:21, 154.67it/s]3214it [00:22, 155.74it/s]3230it [00:22, 155.92it/s]3246it [00:22, 156.30it/s]3262it [00:22, 156.86it/s]3278it [00:22, 157.06it/s]3294it [00:22, 155.94it/s]3310it [00:22, 155.54it/s]3326it [00:22, 155.62it/s]3342it [00:22, 156.46it/s]3358it [00:22, 156.63it/s]3374it [00:23, 157.11it/s]3390it [00:23, 157.51it/s]3406it [00:23, 156.51it/s]3422it [00:23, 157.22it/s]3438it [00:23, 157.45it/s]3454it [00:23, 155.49it/s]3470it [00:23, 155.68it/s]3486it [00:23, 154.83it/s]3502it [00:23, 153.87it/s]3518it [00:23, 153.28it/s]3534it [00:24, 152.40it/s]3550it [00:24, 152.01it/s]3566it [00:24, 151.20it/s]3582it [00:24, 152.71it/s]3598it [00:24, 152.94it/s]3614it [00:24, 151.52it/s]3630it [00:24, 151.83it/s]3646it [00:24, 152.82it/s]3662it [00:24, 153.41it/s]3678it [00:25, 153.33it/s]3694it [00:25, 153.94it/s]3710it [00:25, 154.18it/s]3726it [00:25, 154.81it/s]3742it [00:25, 154.73it/s]3758it [00:25, 154.58it/s]3774it [00:25, 152.40it/s]3790it [00:25, 152.73it/s]3806it [00:25, 152.85it/s]3822it [00:25, 152.88it/s]3838it [00:26, 153.69it/s]3854it [00:26, 153.36it/s]3870it [00:26, 153.67it/s]3886it [00:26, 154.17it/s]3902it [00:26, 154.27it/s]3918it [00:26, 153.80it/s]3934it [00:26, 152.83it/s]3950it [00:26, 153.24it/s]3966it [00:26, 151.94it/s]3982it [00:27, 147.57it/s]3998it [00:27, 148.67it/s]4014it [00:27, 149.59it/s]4029it [00:27, 149.20it/s]4045it [00:27, 150.47it/s]4061it [00:27, 151.67it/s]4077it [00:27, 149.88it/s]4093it [00:27, 150.68it/s]4109it [00:27, 151.78it/s]4125it [00:27, 151.28it/s]4141it [00:28, 152.10it/s]4157it [00:28, 152.57it/s]4173it [00:28, 152.92it/s]4189it [00:28, 154.01it/s]4205it [00:28, 153.18it/s]4221it [00:28, 153.15it/s]4237it [00:28, 150.71it/s]4253it [00:28, 150.57it/s]4269it [00:28, 150.62it/s]4285it [00:29, 150.46it/s]4301it [00:29, 151.05it/s]4317it [00:29, 151.33it/s]4333it [00:29, 152.42it/s]4349it [00:29, 151.95it/s]4365it [00:29, 152.25it/s]4381it [00:29, 152.53it/s]4397it [00:29, 150.20it/s]4413it [00:29, 150.59it/s]4429it [00:29, 149.38it/s]4445it [00:30, 149.83it/s]4460it [00:30, 149.78it/s]4475it [00:30, 149.78it/s]4490it [00:30, 146.88it/s]4506it [00:30, 148.47it/s]4522it [00:30, 149.67it/s]4537it [00:30, 148.14it/s]4552it [00:30, 148.63it/s]4568it [00:30, 149.92it/s]4584it [00:30, 150.96it/s]4600it [00:31, 151.45it/s]4616it [00:31, 151.52it/s]4632it [00:31, 151.62it/s]4648it [00:31, 152.72it/s]4664it [00:31, 153.28it/s]4680it [00:31, 152.78it/s]4696it [00:31, 150.85it/s]4712it [00:31, 151.39it/s]4728it [00:31, 147.95it/s]4739it [00:32, 147.97it/s]
0it [00:00, ?it/s]15it [00:00, 149.54it/s]31it [00:00, 152.17it/s]47it [00:00, 149.98it/s]63it [00:00, 151.64it/s]79it [00:00, 149.61it/s]95it [00:00, 149.99it/s]111it [00:00, 148.68it/s]127it [00:00, 149.27it/s]142it [00:00, 149.46it/s]157it [00:01, 148.76it/s]173it [00:01, 149.65it/s]189it [00:01, 150.16it/s]205it [00:01, 150.47it/s]221it [00:01, 145.78it/s]237it [00:01, 147.71it/s]252it [00:01, 148.06it/s]267it [00:01, 147.42it/s]282it [00:01, 147.90it/s]298it [00:02, 148.59it/s]313it [00:02, 148.64it/s]328it [00:02, 147.83it/s]343it [00:02, 148.23it/s]359it [00:02, 149.09it/s]375it [00:02, 149.55it/s]390it [00:02, 148.65it/s]406it [00:02, 150.22it/s]422it [00:02, 148.80it/s]437it [00:02, 149.00it/s]452it [00:03, 148.37it/s]467it [00:03, 147.92it/s]482it [00:03, 147.99it/s]498it [00:03, 148.93it/s]513it [00:03, 148.96it/s]528it [00:03, 148.39it/s]544it [00:03, 149.70it/s]560it [00:03, 150.52it/s]576it [00:03, 149.55it/s]592it [00:03, 150.15it/s]608it [00:04, 149.20it/s]623it [00:04, 148.17it/s]639it [00:04, 148.97it/s]655it [00:04, 149.67it/s]670it [00:04, 149.38it/s]685it [00:04, 148.56it/s]700it [00:04, 148.14it/s]715it [00:04, 147.11it/s]730it [00:04, 146.68it/s]745it [00:05, 147.34it/s]760it [00:05, 147.52it/s]775it [00:05, 146.49it/s]790it [00:05, 146.02it/s]806it [00:05, 147.75it/s]822it [00:05, 148.98it/s]837it [00:05, 148.80it/s]853it [00:05, 149.71it/s]868it [00:05, 147.12it/s]884it [00:05, 148.45it/s]899it [00:06, 148.76it/s]914it [00:06, 148.64it/s]929it [00:06, 148.16it/s]944it [00:06, 148.00it/s]959it [00:06, 147.61it/s]974it [00:06, 148.04it/s]989it [00:06, 148.12it/s]1004it [00:06, 141.38it/s]1019it [00:06, 140.37it/s]1034it [00:06, 142.50it/s]1049it [00:07, 143.03it/s]1064it [00:07, 144.28it/s]1079it [00:07, 143.31it/s]1095it [00:07, 145.52it/s]1111it [00:07, 147.10it/s]1126it [00:07, 145.28it/s]1141it [00:07, 145.68it/s]1156it [00:07, 146.53it/s]1171it [00:07, 146.94it/s]1187it [00:08, 148.62it/s]1202it [00:08, 148.06it/s]1217it [00:08, 148.42it/s]1233it [00:08, 150.06it/s]1249it [00:08, 150.81it/s]1265it [00:08, 150.94it/s]1281it [00:08, 150.67it/s]1297it [00:08, 151.66it/s]1313it [00:08, 150.74it/s]1329it [00:08, 148.48it/s]1345it [00:09, 149.23it/s]1360it [00:09, 146.61it/s]1376it [00:09, 148.03it/s]1392it [00:09, 149.37it/s]1407it [00:09, 149.43it/s]1423it [00:09, 150.02it/s]1439it [00:09, 149.86it/s]1454it [00:09, 149.42it/s]1469it [00:09, 147.82it/s]1484it [00:10, 146.14it/s]1499it [00:10, 147.11it/s]1514it [00:10, 146.83it/s]1529it [00:10, 147.31it/s]1544it [00:10, 148.03it/s]1560it [00:10, 149.03it/s]1576it [00:10, 149.52it/s]1591it [00:10, 145.65it/s]1607it [00:10, 147.51it/s]1622it [00:10, 147.16it/s]1637it [00:11, 147.15it/s]1653it [00:11, 149.40it/s]1668it [00:11, 149.45it/s]1684it [00:11, 150.43it/s]1700it [00:11, 151.30it/s]1716it [00:11, 150.78it/s]1732it [00:11, 150.62it/s]1748it [00:11, 151.27it/s]1764it [00:11, 149.63it/s]1779it [00:11, 147.30it/s]1794it [00:12, 147.57it/s]1809it [00:12, 146.86it/s]1824it [00:12, 144.26it/s]1839it [00:12, 145.56it/s]1854it [00:12, 146.81it/s]1870it [00:12, 148.25it/s]1886it [00:12, 149.85it/s]1902it [00:12, 150.12it/s]1918it [00:12, 150.01it/s]1934it [00:13, 148.06it/s]1949it [00:13, 147.79it/s]1965it [00:13, 148.97it/s]1981it [00:13, 150.36it/s]1997it [00:13, 151.21it/s]2013it [00:13, 150.82it/s]2029it [00:13, 149.38it/s]2044it [00:13, 148.98it/s]2060it [00:13, 149.66it/s]2076it [00:13, 151.08it/s]2092it [00:14, 151.81it/s]2108it [00:14, 151.40it/s]2124it [00:14, 150.30it/s]2140it [00:14, 150.94it/s]2156it [00:14, 151.05it/s]2172it [00:14, 149.70it/s]2187it [00:14, 149.75it/s]2203it [00:14, 150.17it/s]2219it [00:14, 150.69it/s]2235it [00:15, 150.85it/s]2251it [00:15, 150.74it/s]2267it [00:15, 151.10it/s]2283it [00:15, 150.61it/s]2299it [00:15, 149.79it/s]2314it [00:15, 149.61it/s]2330it [00:15, 150.00it/s]2346it [00:15, 149.87it/s]2362it [00:15, 150.02it/s]2378it [00:15, 149.79it/s]2393it [00:16, 148.43it/s]2408it [00:16, 148.15it/s]2424it [00:16, 149.23it/s]2440it [00:16, 150.21it/s]2456it [00:16, 150.01it/s]2472it [00:16, 149.03it/s]2487it [00:16, 148.83it/s]2503it [00:16, 149.28it/s]2518it [00:16, 149.20it/s]2533it [00:17, 142.52it/s]2548it [00:17, 144.07it/s]2563it [00:17, 144.58it/s]2579it [00:17, 147.77it/s]2595it [00:17, 149.14it/s]2611it [00:17, 149.90it/s]2627it [00:17, 149.79it/s]2642it [00:17, 149.73it/s]2657it [00:17, 149.22it/s]2673it [00:17, 149.98it/s]2688it [00:18, 149.18it/s]2703it [00:18, 147.84it/s]2718it [00:18, 148.13it/s]2734it [00:18, 149.08it/s]2749it [00:18, 148.45it/s]2764it [00:18, 148.59it/s]2779it [00:18, 148.97it/s]2795it [00:18, 150.17it/s]2811it [00:18, 150.89it/s]2827it [00:19, 149.74it/s]2842it [00:19, 148.44it/s]2857it [00:19, 147.70it/s]2873it [00:19, 148.76it/s]2888it [00:19, 148.92it/s]2903it [00:19, 148.88it/s]2919it [00:19, 149.58it/s]2935it [00:19, 150.38it/s]2951it [00:19, 151.21it/s]2967it [00:19, 150.38it/s]2983it [00:20, 149.54it/s]2998it [00:20, 149.07it/s]3013it [00:20, 148.55it/s]3029it [00:20, 149.67it/s]3045it [00:20, 149.83it/s]3061it [00:20, 150.10it/s]3077it [00:20, 150.06it/s]3093it [00:20, 149.98it/s]3108it [00:20, 149.47it/s]3124it [00:21, 150.40it/s]3140it [00:21, 149.68it/s]3155it [00:21, 148.36it/s]3171it [00:21, 149.34it/s]3187it [00:21, 150.23it/s]3203it [00:21, 149.45it/s]3219it [00:21, 151.04it/s]3235it [00:21, 152.06it/s]3251it [00:21, 151.91it/s]3267it [00:21, 152.58it/s]3283it [00:22, 152.22it/s]3299it [00:22, 152.76it/s]3315it [00:22, 151.99it/s]3331it [00:22, 152.94it/s]3347it [00:22, 153.28it/s]3363it [00:22, 153.16it/s]3379it [00:22, 152.17it/s]3395it [00:22, 151.00it/s]3411it [00:22, 152.02it/s]3427it [00:23, 152.24it/s]3443it [00:23, 150.39it/s]3459it [00:23, 151.21it/s]3475it [00:23, 149.89it/s]3491it [00:23, 151.07it/s]3507it [00:23, 152.26it/s]3523it [00:23, 152.68it/s]3539it [00:23, 152.34it/s]3555it [00:23, 150.63it/s]3571it [00:23, 149.85it/s]3587it [00:24, 150.35it/s]3603it [00:24, 150.36it/s]3619it [00:24, 150.71it/s]3635it [00:24, 150.82it/s]3651it [00:24, 150.98it/s]3667it [00:24, 151.42it/s]3683it [00:24, 151.04it/s]3699it [00:24, 151.42it/s]3715it [00:24, 151.37it/s]3731it [00:25, 152.03it/s]3747it [00:25, 152.33it/s]3763it [00:25, 151.75it/s]3779it [00:25, 150.39it/s]3795it [00:25, 146.29it/s]3811it [00:25, 148.67it/s]3827it [00:25, 150.09it/s]3843it [00:25, 150.55it/s]3859it [00:25, 151.95it/s]3875it [00:25, 152.06it/s]3891it [00:26, 151.30it/s]3907it [00:26, 150.52it/s]3923it [00:26, 150.11it/s]3939it [00:26, 150.37it/s]3955it [00:26, 151.06it/s]3971it [00:26, 147.06it/s]3987it [00:26, 149.32it/s]4003it [00:26, 150.91it/s]4019it [00:26, 151.38it/s]4035it [00:27, 152.28it/s]4051it [00:27, 151.59it/s]4067it [00:27, 151.36it/s]4083it [00:27, 148.17it/s]4098it [00:27, 148.06it/s]4114it [00:27, 149.17it/s]4129it [00:27, 147.69it/s]4145it [00:27, 148.89it/s]4161it [00:27, 149.38it/s]4177it [00:27, 150.87it/s]4193it [00:28, 151.00it/s]4209it [00:28, 151.49it/s]4225it [00:28, 151.91it/s]4241it [00:28, 150.74it/s]4257it [00:28, 151.46it/s]4273it [00:28, 152.11it/s]4289it [00:28, 151.60it/s]4305it [00:28, 151.63it/s]4321it [00:28, 151.09it/s]4337it [00:29, 150.91it/s]4353it [00:29, 150.53it/s]4369it [00:29, 149.30it/s]4384it [00:29, 149.28it/s]4399it [00:29, 149.15it/s]4415it [00:29, 150.34it/s]4431it [00:29, 150.26it/s]4447it [00:29, 150.73it/s]4463it [00:29, 149.52it/s]4479it [00:29, 149.68it/s]4495it [00:30, 150.29it/s]4511it [00:30, 151.82it/s]4527it [00:30, 152.51it/s]4543it [00:30, 151.02it/s]4559it [00:30, 151.79it/s]4575it [00:30, 151.70it/s]4591it [00:30, 152.64it/s]4607it [00:30, 149.88it/s]4623it [00:30, 148.76it/s]4638it [00:31, 148.18it/s]4654it [00:31, 149.66it/s]4670it [00:31, 151.18it/s]4686it [00:31, 151.03it/s]4702it [00:31, 145.70it/s]4718it [00:31, 147.37it/s]4734it [00:31, 148.48it/s]4750it [00:31, 149.87it/s]4766it [00:31, 150.18it/s]4782it [00:32, 149.28it/s]4798it [00:32, 150.38it/s]4814it [00:32, 150.57it/s]4830it [00:32, 149.35it/s]4845it [00:32, 148.62it/s]4860it [00:32, 148.51it/s]4875it [00:32, 148.14it/s]4891it [00:32, 148.89it/s]4906it [00:32, 144.84it/s]4921it [00:32, 141.56it/s]4936it [00:33, 140.32it/s]4951it [00:33, 140.15it/s]4966it [00:33, 140.18it/s]4981it [00:33, 140.35it/s]4996it [00:33, 139.22it/s]5010it [00:33, 138.36it/s]5025it [00:33, 139.19it/s]5039it [00:33, 139.14it/s]5054it [00:33, 140.03it/s]5069it [00:34, 141.82it/s]5084it [00:34, 143.84it/s]5100it [00:34, 145.99it/s]5116it [00:34, 147.55it/s]5131it [00:34, 147.86it/s]5146it [00:34, 146.95it/s]5153it [00:34, 148.97it/s]
0it [00:00, ?it/s]15it [00:00, 149.47it/s]30it [00:00, 148.27it/s]46it [00:00, 150.92it/s]62it [00:00, 149.09it/s]78it [00:00, 149.67it/s]93it [00:00, 149.63it/s]108it [00:00, 149.44it/s]123it [00:00, 148.36it/s]138it [00:00, 148.62it/s]153it [00:01, 147.90it/s]168it [00:01, 148.46it/s]184it [00:01, 149.70it/s]199it [00:01, 149.36it/s]214it [00:01, 148.89it/s]230it [00:01, 149.40it/s]245it [00:01, 148.50it/s]261it [00:01, 150.02it/s]277it [00:01, 151.17it/s]293it [00:01, 150.05it/s]309it [00:02, 149.12it/s]325it [00:02, 150.02it/s]341it [00:02, 149.75it/s]356it [00:02, 148.37it/s]371it [00:02, 148.17it/s]386it [00:02, 148.25it/s]402it [00:02, 149.14it/s]417it [00:02, 147.72it/s]432it [00:02, 147.98it/s]447it [00:03, 147.03it/s]462it [00:03, 147.30it/s]477it [00:03, 147.37it/s]492it [00:03, 147.25it/s]500it [00:03, 148.85it/s]
0it [00:00, ?it/s]16it [00:00, 150.29it/s]32it [00:00, 152.09it/s]48it [00:00, 152.44it/s]64it [00:00, 153.26it/s]80it [00:00, 152.25it/s]96it [00:00, 150.65it/s]112it [00:00, 148.80it/s]128it [00:00, 149.61it/s]144it [00:00, 149.83it/s]160it [00:01, 151.35it/s]176it [00:01, 151.06it/s]192it [00:01, 151.34it/s]208it [00:01, 151.35it/s]224it [00:01, 150.91it/s]240it [00:01, 150.23it/s]256it [00:01, 149.62it/s]272it [00:01, 150.16it/s]288it [00:01, 149.87it/s]303it [00:02, 149.87it/s]318it [00:02, 149.00it/s]334it [00:02, 150.23it/s]350it [00:02, 150.30it/s]366it [00:02, 151.01it/s]382it [00:02, 145.96it/s]398it [00:02, 147.15it/s]413it [00:02, 146.48it/s]429it [00:02, 147.71it/s]444it [00:02, 147.84it/s]459it [00:03, 148.29it/s]474it [00:03, 148.24it/s]489it [00:03, 148.17it/s]500it [00:03, 149.45it/s]
0it [00:00, ?it/s]16it [00:00, 152.68it/s]32it [00:00, 150.02it/s]48it [00:00, 147.26it/s]63it [00:00, 146.99it/s]78it [00:00, 146.28it/s]93it [00:00, 147.36it/s]108it [00:00, 147.41it/s]124it [00:00, 148.59it/s]139it [00:00, 148.56it/s]154it [00:01, 148.53it/s]169it [00:01, 148.08it/s]185it [00:01, 149.37it/s]200it [00:01, 148.69it/s]215it [00:01, 146.66it/s]230it [00:01, 145.50it/s]245it [00:01, 146.60it/s]260it [00:01, 146.34it/s]275it [00:01, 143.46it/s]290it [00:01, 145.16it/s]305it [00:02, 145.84it/s]320it [00:02, 146.58it/s]335it [00:02, 147.52it/s]350it [00:02, 147.68it/s]365it [00:02, 145.80it/s]380it [00:02, 145.85it/s]395it [00:02, 146.62it/s]410it [00:02, 147.36it/s]425it [00:02, 147.94it/s]441it [00:02, 149.43it/s]456it [00:03, 149.43it/s]471it [00:03, 149.32it/s]487it [00:03, 149.88it/s]500it [00:03, 147.50it/s]
The starting value for dist is: 1

 Starting test with:
AgglomerativeClustering(compute_full_tree=True, distance_threshold=1.0,
                        n_clusters=None)
All classes:
{'wild': {1306: 1, 1442: 1, 1078: 1, 1178: 1, 1029: 1, 787: 1, 1071: 1, 1217: 1, 1263: 1, 953: 1, 1109: 1, 847: 1, 1162: 1, 1376: 1, 1268: 1, 889: 1, 1361: 1, 1419: 1, 1117: 1, 996: 1, 1183: 1, 794: 1, 1399: 1, 1222: 1, 934: 1, 897: 1, 1143: 1, 1218: 1, 1340: 1, 970: 1, 1213: 1, 808: 1, 1290: 1, 1309: 1, 1496: 1, 1346: 1, 1417: 1, 762: 1, 1123: 1, 1231: 1, 909: 1, 1235: 1, 1424: 1, 1335: 1, 1428: 1, 1482: 1, 1082: 1, 965: 1, 1394: 1, 1362: 1, 1354: 1, 924: 1, 1177: 1, 1097: 1, 1085: 1, 943: 1, 1285: 1, 975: 1, 1369: 1, 1373: 1, 1204: 1, 1080: 1, 1287: 1, 1396: 1, 987: 1, 1034: 1, 1414: 1, 1069: 1, 1057: 1, 1168: 1, 1303: 1, 1165: 1, 1176: 1, 910: 1, 1310: 1, 1040: 1, 991: 1, 1300: 1, 825: 1, 1021: 1, 1003: 1, 1312: 1, 1106: 1, 1108: 1, 1113: 1, 650: 1, 466: 1, 1059: 1, 1386: 1, 1411: 1, 1477: 1, 1198: 1, 1157: 1, 1277: 1, 834: 1, 1407: 1, 1054: 1, 1026: 1, 1047: 1, 1181: 1, 1459: 1, 1296: 1, 1179: 1, 1236: 1, 813: 1, 1201: 1, 952: 1, 1438: 1, 989: 1, 823: 1, 985: 1, 1159: 1, 1484: 1, 964: 1, 1367: 1, 1319: 1, 1227: 1, 1192: 1, 1422: 1, 1435: 1, 1050: 1, 1216: 1, 1480: 1, 1072: 1, 923: 1, 498: 1, 1478: 1, 1077: 1, 1385: 1, 1388: 1, 1390: 1, 1320: 1, 1015: 1, 1013: 1, 1276: 1, 1294: 1, 1041: 1, 1374: 1, 904: 1, 1416: 1, 655: 1, 1481: 1, 1491: 1, 920: 1, 1140: 1, 1352: 1, 750: 1, 772: 1, 1430: 1, 1462: 1, 1397: 1, 1363: 1, 757: 1, 581: 1, 739: 1, 1325: 1, 740: 1, 1292: 1, 1493: 1, 1284: 1, 898: 1, 1122: 1, 472: 1, 661: 1, 1329: 1, 1305: 1, 882: 1, 1441: 1, 1180: 1, 637: 1, 1333: 1, 1267: 1, 795: 1, 701: 1, 777: 1, 1004: 1, 785: 1, 1321: 1, 1206: 1, 1401: 1, 966: 1, 1434: 1, 1182: 1, 1357: 1, 1212: 1, 1429: 1, 1244: 1, 1187: 1, 1104: 1, 748: 1, 1220: 1, 1331: 1, 1155: 1, 641: 1, 1341: 1, 1114: 1, 647: 1, 724: 1, 1470: 1, 781: 1, 1490: 1, 900: 1, 1348: 1, 764: 1, 1304: 1, 844: 1, 1102: 1, 1446: 1, 726: 1, 763: 1, 1387: 1, 1020: 1, 1468: 1, 807: 1, 1298: 1, 1169: 1, 982: 1, 1250: 1, 675: 1, 1259: 1, 1398: 1, 1001: 1, 449: 1, 1036: 1, 803: 1, 1338: 1, 560: 1, 634: 1, 1134: 1, 1018: 1, 1328: 1, 860: 1, 1350: 1, 986: 1, 928: 1, 828: 1, 968: 1, 416: 1, 1151: 1, 1377: 1, 610: 1, 599: 1, 642: 1, 541: 1, 542: 1, 1167: 1, 1063: 1, 874: 1, 1272: 1, 606: 1, 927: 1, 1147: 1, 963: 1, 592: 1, 805: 1, 616: 1, 1256: 1, 665: 1, 709: 1, 320: 1, 330: 1, 337: 1, 537: 1, 886: 1, 446: 1, 919: 1, 640: 1, 586: 1, 605: 1, 576: 1, 850: 1, 674: 1, 483: 1, 711: 1, 412: 1, 631: 1, 797: 1, 350: 1, 400: 1, 856: 1, 535: 1, 842: 1, 1317: 1, 992: 1, 735: 1, 960: 1, 536: 1, 543: 1, 513: 1, 593: 1, 1042: 1, 680: 1, 629: 1, 587: 1, 420: 1, 1380: 1, 663: 1, 381: 1, 434: 1, 639: 1, 1452: 1, 168: 1, 645: 1, 324: 1, 1068: 1, 1112: 1, 325: 1, 668: 1, 518: 1, 489: 1, 984: 1, 353: 1, 594: 1, 497: 1, 632: 1, 476: 1, 411: 1, 444: 1, 620: 1, 1427: 1, 410: 1, 1315: 1, 595: 1, 346: 1, 689: 1, 690: 1, 317: 1, 367: 1, 1096: 1, 1488: 1, 1144: 1, 1239: 1, 462: 1, 575: 1, 646: 1, 1115: 1, 570: 1, 205: 1, 415: 1, 457: 1, 737: 1, 484: 1, 1100: 1, 364: 1, 485: 1, 623: 1, 315: 1, 1444: 1, 526: 1, 383: 1, 791: 1, 354: 1, 816: 1, 226: 1, 481: 1, 725: 1, 316: 1, 258: 1, 523: 1, 358: 1, 556: 1, 342: 1, 323: 1, 1118: 1, 488: 1, 423: 1, 474: 1, 565: 1, 391: 1, 266: 1, 265: 1, 627: 1, 255: 1, 327: 1, 1098: 1, 332: 1, 572: 1, 571: 1, 305: 1, 345: 1, 236: 1, 225: 1, 835: 1, 721: 1, 238: 1, 348: 1, 573: 1, 539: 1, 214: 1, 896: 1, 289: 1, 361: 1, 566: 1, 426: 1, 653: 1, 377: 1, 351: 1, 743: 1, 1058: 1, 79: 1, 713: 1, 313: 1, 245: 1, 545: 1, 402: 1, 528: 1, 198: 1, 259: 1, 356: 1, 133: 1, 190: 1, 221: 1, 234: 1, 176: 1, 264: 1, 157: 1, 506: 1, 262: 1, 144: 1, 626: 1, 1008: 1, 298: 1, 263: 1, 365: 1, 129: 1, 78: 1, 297: 1, 309: 1, 424: 1, 244: 1, 547: 1, 304: 1, 682: 1, 269: 1, 343: 1, 109: 1, 299: 1, 368: 1, 448: 1, 131: 1, 132: 1, 186: 1, 239: 1, 194: 1, 150: 1, 134: 1, 279: 1, 184: 1, 170: 1, 288: 1, 172: 1, 106: 1, 558: 1, 271: 1, 143: 1, 222: 1, 276: 1, 38: 1, 154: 1, 183: 1, 137: 1, 215: 1, 504: 1, 54: 1, 182: 1, 72: 1, 57: 1, 274: 1, 229: 1, 47: 1, 121: 1, 503: 1, 138: 1, 32: 1, 25: 1, 44: 1, 84: 1, 83: 1, 108: 1, 141: 1, 70: 1, 27: 1, 41: 1, 26: 1, 20: 1, 100: 1, 19: 1, 9: 1, 35: 1, 16: 1, 18: 1, 7: 1, 62: 1, 11: 1, 5: 1, 13: 1, 2: 1, 0: 1}, 'dog': {1301: 1, 1415: 1, 793: 1, 939: 1, 1233: 1, 1053: 1, 1116: 1, 1291: 1, 1403: 1, 1463: 1, 1314: 1, 1283: 1, 1237: 1, 891: 1, 810: 1, 867: 1, 1175: 1, 843: 1, 946: 1, 1061: 1, 1221: 1, 876: 1, 1395: 1, 979: 1, 771: 1, 1099: 1, 1219: 1, 951: 1, 871: 1, 997: 1, 1355: 1, 776: 1, 959: 1, 980: 1, 1288: 1, 1253: 1, 853: 1, 933: 1, 861: 1, 1456: 1, 1185: 1, 1245: 1, 1483: 1, 1023: 1, 1055: 1, 1130: 1, 1074: 1, 1137: 1, 1344: 1, 779: 1, 1421: 1, 1302: 1, 895: 1, 839: 1, 872: 1, 967: 1, 905: 1, 901: 1, 1405: 1, 1286: 1, 921: 1, 1381: 1, 749: 1, 1132: 1, 1084: 1, 1225: 1, 990: 1, 636: 1, 902: 1, 1254: 1, 940: 1, 1062: 1, 1246: 1, 1234: 1, 1447: 1, 914: 1, 918: 1, 1111: 1, 1121: 1, 1030: 1, 809: 1, 1199: 1, 1087: 1, 949: 1, 766: 1, 998: 1, 1365: 1, 903: 1, 1337: 1, 942: 1, 841: 1, 838: 1, 1269: 1, 849: 1, 1497: 1, 1370: 1, 669: 1, 1128: 1, 868: 1, 961: 1, 862: 1, 912: 1, 1255: 1, 1349: 1, 1271: 1, 1007: 1, 915: 1, 848: 1, 932: 1, 814: 1, 1439: 1, 767: 1, 925: 1, 760: 1, 881: 1, 880: 1, 1171: 1, 1347: 1, 649: 1, 694: 1, 821: 1, 1275: 1, 875: 1, 1138: 1, 883: 1, 899: 1, 1432: 1, 1450: 1, 1095: 1, 818: 1, 1158: 1, 475: 1, 728: 1, 1091: 1, 1436: 1, 1492: 1, 1437: 1, 1136: 1, 1412: 1, 1453: 1, 659: 1, 894: 1, 759: 1, 863: 1, 567: 1, 1088: 1, 1056: 1, 1079: 1, 433: 1, 1133: 1, 579: 1, 1119: 1, 612: 1, 878: 1, 873: 1, 832: 1, 1279: 1, 907: 1, 1012: 1, 969: 1, 751: 1, 1083: 1, 758: 1, 588: 1, 511: 1, 944: 1, 859: 1, 609: 1, 667: 1, 1186: 1, 706: 1, 983: 1, 833: 1, 1406: 1, 664: 1, 948: 1, 421: 1, 1073: 1, 435: 1, 1358: 1, 563: 1, 977: 1, 678: 1, 651: 1, 494: 1, 1448: 1, 1142: 1, 577: 1, 911: 1, 1048: 1, 851: 1, 1173: 1, 437: 1, 1209: 1, 1307: 1, 638: 1, 1485: 1, 1120: 1, 988: 1, 857: 1, 643: 1, 854: 1, 1467: 1, 574: 1, 1345: 1, 601: 1, 1107: 1, 1070: 1, 1476: 1, 1420: 1, 683: 1, 660: 1, 551: 1, 1081: 1, 490: 1, 826: 1, 892: 1, 508: 1, 453: 1, 1188: 1, 1039: 1, 707: 1, 409: 1, 679: 1, 589: 1, 693: 1, 582: 1, 783: 1, 852: 1, 617: 1, 1006: 1, 877: 1, 611: 1, 789: 1, 1124: 1, 817: 1, 584: 1, 602: 1, 708: 1, 1466: 1, 300: 1, 815: 1, 1028: 1, 695: 1, 414: 1, 922: 1, 564: 1, 954: 1, 796: 1, 1067: 1, 950: 1, 1146: 1, 455: 1, 1094: 1, 224: 1, 822: 1, 496: 1, 753: 1, 624: 1, 454: 1, 519: 1, 401: 1, 429: 1, 268: 1, 419: 1, 1002: 1, 246: 1, 596: 1, 887: 1, 1066: 1, 1474: 1, 782: 1, 477: 1, 727: 1, 681: 1, 730: 1, 387: 1, 827: 1, 413: 1, 1197: 1, 1251: 1, 562: 1, 590: 1, 1184: 1, 347: 1, 468: 1, 544: 1, 1009: 1, 512: 1, 666: 1, 452: 1, 774: 1, 237: 1, 283: 1, 393: 1, 1443: 1, 784: 1, 333: 1, 754: 1, 691: 1, 510: 1, 471: 1, 376: 1, 648: 1, 270: 1, 355: 1, 517: 1, 408: 1, 524: 1, 158: 1, 591: 1, 501: 1, 1161: 1, 770: 1, 235: 1, 375: 1, 206: 1, 1052: 1, 295: 1, 293: 1, 378: 1, 685: 1, 267: 1, 723: 1, 370: 1, 398: 1, 837: 1, 302: 1, 341: 1, 657: 1, 549: 1, 357: 1, 704: 1, 580: 1, 459: 1, 146: 1, 303: 1, 321: 1, 397: 1, 384: 1, 291: 1, 615: 1, 621: 1, 1240: 1, 284: 1, 747: 1, 516: 1, 388: 1, 461: 1, 507: 1, 248: 1, 373: 1, 930: 1, 469: 1, 1014: 1, 389: 1, 522: 1, 390: 1, 196: 1, 250: 1, 525: 1, 195: 1, 460: 1, 241: 1, 732: 1, 328: 1, 261: 1, 188: 1, 282: 1, 406: 1, 326: 1, 256: 1, 252: 1, 495: 1, 127: 1, 527: 1, 212: 1, 174: 1, 371: 1, 467: 1, 344: 1, 360: 1, 734: 1, 166: 1, 163: 1, 148: 1, 418: 1, 407: 1, 417: 1, 197: 1, 480: 1, 247: 1, 254: 1, 865: 1, 208: 1, 189: 1, 487: 1, 191: 1, 339: 1, 161: 1, 386: 1, 200: 1, 145: 1, 155: 1, 105: 1, 149: 1, 179: 1, 310: 1, 366: 1, 210: 1, 128: 1, 65: 1, 165: 1, 431: 1, 218: 1, 432: 1, 162: 1, 362: 1, 173: 1, 104: 1, 98: 1, 548: 1, 97: 1, 82: 1, 96: 1, 81: 1, 152: 1, 308: 1, 103: 1, 135: 1, 405: 1, 216: 1, 51: 1, 404: 1, 80: 1, 231: 1, 86: 1, 66: 1, 115: 1, 99: 1, 180: 1, 277: 1, 203: 1, 92: 1, 40: 1, 31: 1, 85: 1, 75: 1, 89: 1, 111: 1, 52: 1, 69: 1, 340: 1, 273: 1, 59: 1, 114: 1, 68: 1, 113: 1, 90: 1, 42: 1, 88: 1, 153: 1, 112: 1, 43: 1, 126: 1, 53: 1, 48: 1, 21: 1, 23: 1, 22: 1, 71: 1, 34: 1, 10: 1, 29: 1, 8: 1, 3: 1, 6: 1}, 'cat': {879: 1, 1075: 1, 799: 1, 1260: 1, 1323: 1, 1261: 1, 1166: 1, 1299: 1, 1025: 1, 1359: 1, 1264: 1, 819: 1, 824: 1, 1211: 1, 1339: 1, 1313: 1, 1494: 1, 1010: 1, 1035: 1, 913: 1, 1368: 1, 1129: 1, 1479: 1, 973: 1, 1226: 1, 1282: 1, 1249: 1, 1024: 1, 1455: 1, 1445: 1, 890: 1, 1273: 1, 1326: 1, 820: 1, 1454: 1, 1433: 1, 1154: 1, 1017: 1, 1156: 1, 1195: 1, 1160: 1, 1019: 1, 1389: 1, 1065: 1, 1289: 1, 1189: 1, 1409: 1, 1214: 1, 792: 1, 1011: 1, 811: 1, 1205: 1, 1252: 1, 1043: 1, 1343: 1, 870: 1, 1152: 1, 1243: 1, 1274: 1, 1356: 1, 1464: 1, 1322: 1, 999: 1, 1076: 1, 1295: 1, 768: 1, 1045: 1, 786: 1, 1449: 1, 1051: 1, 1163: 1, 1499: 1, 1228: 1, 1281: 1, 1145: 1, 1196: 1, 1247: 1, 994: 1, 1324: 1, 1379: 1, 1215: 1, 1153: 1, 1127: 1, 1330: 1, 1241: 1, 908: 1, 1498: 1, 1311: 1, 1460: 1, 1404: 1, 1238: 1, 978: 1, 1413: 1, 1382: 1, 1457: 1, 1125: 1, 1431: 1, 1089: 1, 1164: 1, 765: 1, 1316: 1, 1262: 1, 885: 1, 945: 1, 812: 1, 1418: 1, 1400: 1, 845: 1, 788: 1, 1458: 1, 1242: 1, 1172: 1, 1353: 1, 938: 1, 931: 1, 756: 1, 1293: 1, 778: 1, 1471: 1, 1351: 1, 1000: 1, 936: 1, 1475: 1, 769: 1, 1336: 1, 962: 1, 906: 1, 798: 1, 761: 1, 699: 1, 1372: 1, 1110: 1, 554: 1, 956: 1, 855: 1, 1135: 1, 671: 1, 1170: 1, 840: 1, 1383: 1, 1297: 1, 780: 1, 1203: 1, 630: 1, 656: 1, 1193: 1, 1194: 1, 676: 1, 806: 1, 430: 1, 829: 1, 746: 1, 1049: 1, 1126: 1, 697: 1, 1037: 1, 1334: 1, 1327: 1, 514: 1, 800: 1, 731: 1, 802: 1, 1360: 1, 1150: 1, 1384: 1, 745: 1, 1103: 1, 1093: 1, 710: 1, 831: 1, 622: 1, 1232: 1, 1200: 1, 1461: 1, 1472: 1, 1308: 1, 1027: 1, 1044: 1, 1190: 1, 1141: 1, 1426: 1, 714: 1, 1469: 1, 1090: 1, 884: 1, 1038: 1, 1342: 1, 1265: 1, 775: 1, 1410: 1, 1092: 1, 1280: 1, 1278: 1, 1425: 1, 1270: 1, 869: 1, 773: 1, 1332: 1, 1393: 1, 1022: 1, 926: 1, 1258: 1, 1378: 1, 521: 1, 450: 1, 957: 1, 1318: 1, 958: 1, 715: 1, 1223: 1, 677: 1, 790: 1, 716: 1, 1266: 1, 1440: 1, 1016: 1, 1487: 1, 439: 1, 941: 1, 712: 1, 981: 1, 380: 1, 379: 1, 396: 1, 1257: 1, 752: 1, 738: 1, 1402: 1, 607: 1, 801: 1, 608: 1, 1031: 1, 1139: 1, 893: 1, 1086: 1, 1149: 1, 1489: 1, 1465: 1, 846: 1, 478: 1, 866: 1, 662: 1, 1392: 1, 741: 1, 1364: 1, 705: 1, 993: 1, 1391: 1, 1064: 1, 538: 1, 1423: 1, 670: 1, 916: 1, 436: 1, 684: 1, 744: 1, 493: 1, 1101: 1, 729: 1, 1174: 1, 338: 1, 836: 1, 1005: 1, 399: 1, 698: 1, 696: 1, 1224: 1, 971: 1, 568: 1, 1210: 1, 329: 1, 804: 1, 652: 1, 1486: 1, 718: 1, 702: 1, 858: 1, 392: 1, 531: 1, 995: 1, 929: 1, 830: 1, 492: 1, 864: 1, 644: 1, 441: 1, 720: 1, 1207: 1, 534: 1, 372: 1, 1473: 1, 1451: 1, 719: 1, 1046: 1, 385: 1, 672: 1, 1229: 1, 394: 1, 1408: 1, 635: 1, 583: 1, 1148: 1, 947: 1, 561: 1, 955: 1, 463: 1, 319: 1, 1032: 1, 1191: 1, 318: 1, 585: 1, 422: 1, 736: 1, 281: 1, 673: 1, 292: 1, 937: 1, 1495: 1, 374: 1, 972: 1, 633: 1, 569: 1, 597: 1, 314: 1, 445: 1, 164: 1, 500: 1, 532: 1, 658: 1, 473: 1, 1060: 1, 598: 1, 742: 1, 502: 1, 482: 1, 290: 1, 550: 1, 604: 1, 442: 1, 533: 1, 733: 1, 703: 1, 974: 1, 296: 1, 520: 1, 1248: 1, 1033: 1, 688: 1, 976: 1, 722: 1, 209: 1, 692: 1, 613: 1, 530: 1, 1230: 1, 888: 1, 1375: 1, 717: 1, 509: 1, 515: 1, 700: 1, 1105: 1, 1366: 1, 159: 1, 1371: 1, 499: 1, 334: 1, 654: 1, 470: 1, 440: 1, 686: 1, 486: 1, 294: 1, 451: 1, 540: 1, 217: 1, 322: 1, 505: 1, 311: 1, 917: 1, 559: 1, 755: 1, 456: 1, 443: 1, 331: 1, 1131: 1, 249: 1, 352: 1, 438: 1, 1208: 1, 199: 1, 160: 1, 1202: 1, 479: 1, 546: 1, 102: 1, 382: 1, 187: 1, 428: 1, 427: 1, 285: 1, 227: 1, 260: 1, 628: 1, 491: 1, 369: 1, 359: 1, 240: 1, 552: 1, 349: 1, 363: 1, 220: 1, 687: 1, 578: 1, 257: 1, 600: 1, 286: 1, 307: 1, 465: 1, 147: 1, 425: 1, 529: 1, 935: 1, 619: 1, 156: 1, 275: 1, 207: 1, 219: 1, 464: 1, 287: 1, 458: 1, 625: 1, 395: 1, 253: 1, 335: 1, 312: 1, 553: 1, 614: 1, 118: 1, 403: 1, 232: 1, 130: 1, 306: 1, 603: 1, 213: 1, 301: 1, 557: 1, 140: 1, 211: 1, 230: 1, 142: 1, 117: 1, 94: 1, 93: 1, 618: 1, 178: 1, 58: 1, 228: 1, 123: 1, 272: 1, 242: 1, 233: 1, 243: 1, 181: 1, 64: 1, 193: 1, 177: 1, 204: 1, 447: 1, 185: 1, 63: 1, 151: 1, 77: 1, 171: 1, 555: 1, 192: 1, 120: 1, 119: 1, 280: 1, 110: 1, 122: 1, 95: 1, 74: 1, 116: 1, 39: 1, 139: 1, 278: 1, 124: 1, 223: 1, 28: 1, 107: 1, 91: 1, 251: 1, 202: 1, 73: 1, 336: 1, 46: 1, 169: 1, 175: 1, 136: 1, 87: 1, 101: 1, 167: 1, 67: 1, 15: 1, 201: 1, 76: 1, 55: 1, 45: 1, 125: 1, 50: 1, 56: 1, 37: 1, 60: 1, 33: 1, 61: 1, 36: 1, 49: 1, 24: 1, 12: 1, 4: 1, 17: 1, 30: 1, 14: 1, 1: 1}}
Matched classes:
{'wild': 1306, 'dog': 1301, 'cat': 879}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1499
Length of x: 1500
{1306: 0, 1301: 1, 879: 2}
{1306: 0, 1301: 1, 879: 2}
Final accuracy on train dataset:    0.002
Final accuracy on val dataset:      0.0

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=3.0134228187919465, n_clusters=None)
All classes:
{'wild': {1306: 1, 1442: 1, 1078: 1, 1178: 1, 1029: 1, 787: 1, 1071: 1, 1217: 1, 1263: 1, 953: 1, 1109: 1, 847: 1, 1162: 1, 1376: 1, 1268: 1, 889: 1, 1361: 1, 1419: 1, 1117: 1, 996: 1, 1183: 1, 794: 1, 1399: 1, 1222: 1, 934: 1, 897: 1, 1143: 1, 1218: 1, 1340: 1, 970: 1, 1213: 1, 808: 1, 1290: 1, 1309: 1, 1496: 1, 1346: 1, 1417: 1, 762: 1, 1123: 1, 1231: 1, 909: 1, 1235: 1, 1424: 1, 1335: 1, 1428: 1, 1482: 1, 1082: 1, 965: 1, 1394: 1, 1362: 1, 1354: 1, 924: 1, 1177: 1, 1097: 1, 1085: 1, 943: 1, 1285: 1, 975: 1, 1369: 1, 1373: 1, 1204: 1, 1080: 1, 1287: 1, 1396: 1, 987: 1, 1034: 1, 1414: 1, 1069: 1, 1057: 1, 1168: 1, 1303: 1, 1165: 1, 1176: 1, 910: 1, 1310: 1, 1040: 1, 991: 1, 1300: 1, 825: 1, 1021: 1, 1003: 1, 1312: 1, 1106: 1, 1108: 1, 1113: 1, 650: 1, 466: 1, 1059: 1, 1386: 1, 1411: 1, 1477: 1, 1198: 1, 1157: 1, 1277: 1, 834: 1, 1407: 1, 1054: 1, 1026: 1, 1047: 1, 1181: 1, 1459: 1, 1296: 1, 1179: 1, 1236: 1, 813: 1, 1201: 1, 952: 1, 1438: 1, 989: 1, 823: 1, 985: 1, 1159: 1, 1484: 1, 964: 1, 1367: 1, 1319: 1, 1227: 1, 1192: 1, 1422: 1, 1435: 1, 1050: 1, 1216: 1, 1480: 1, 1072: 1, 923: 1, 498: 1, 1478: 1, 1077: 1, 1385: 1, 1388: 1, 1390: 1, 1320: 1, 1015: 1, 1013: 1, 1276: 1, 1294: 1, 1041: 1, 1374: 1, 904: 1, 1416: 1, 655: 1, 1481: 1, 1491: 1, 920: 1, 1140: 1, 1352: 1, 750: 1, 772: 1, 1430: 1, 1462: 1, 1397: 1, 1363: 1, 757: 1, 581: 1, 739: 1, 1325: 1, 740: 1, 1292: 1, 1493: 1, 1284: 1, 898: 1, 1122: 1, 472: 1, 661: 1, 1329: 1, 1305: 1, 882: 1, 1441: 1, 1180: 1, 637: 1, 1333: 1, 1267: 1, 795: 1, 701: 1, 777: 1, 1004: 1, 785: 1, 1321: 1, 1206: 1, 1401: 1, 966: 1, 1434: 1, 1182: 1, 1357: 1, 1212: 1, 1429: 1, 1244: 1, 1187: 1, 1104: 1, 748: 1, 1220: 1, 1331: 1, 1155: 1, 641: 1, 1341: 1, 1114: 1, 647: 1, 724: 1, 1470: 1, 781: 1, 1490: 1, 900: 1, 1348: 1, 764: 1, 1304: 1, 844: 1, 1102: 1, 1446: 1, 726: 1, 763: 1, 1387: 1, 1020: 1, 1468: 1, 807: 1, 1298: 1, 1169: 1, 982: 1, 1250: 1, 675: 1, 1259: 1, 1398: 1, 1001: 1, 449: 1, 1036: 1, 803: 1, 1338: 1, 560: 1, 634: 1, 1134: 1, 1018: 1, 1328: 1, 860: 1, 1350: 1, 986: 1, 928: 1, 828: 1, 968: 1, 416: 1, 1151: 1, 1377: 1, 610: 1, 599: 1, 642: 1, 541: 1, 542: 1, 1167: 1, 1063: 1, 874: 1, 1272: 1, 606: 1, 927: 1, 1147: 1, 963: 1, 592: 1, 805: 1, 616: 1, 1256: 1, 665: 1, 709: 1, 320: 1, 330: 1, 337: 1, 537: 1, 886: 1, 446: 1, 919: 1, 640: 1, 586: 1, 605: 1, 576: 1, 850: 1, 674: 1, 483: 1, 711: 1, 412: 1, 631: 1, 797: 1, 350: 1, 400: 1, 856: 1, 535: 1, 842: 1, 1317: 1, 992: 1, 735: 1, 960: 1, 536: 1, 543: 1, 513: 1, 593: 1, 1042: 1, 680: 1, 629: 1, 587: 1, 420: 1, 1380: 1, 663: 1, 381: 1, 434: 1, 639: 1, 1452: 1, 168: 1, 645: 1, 324: 1, 1068: 1, 1112: 1, 325: 1, 668: 1, 518: 1, 489: 1, 984: 1, 353: 1, 594: 1, 497: 1, 632: 1, 476: 1, 411: 1, 444: 1, 620: 1, 1427: 1, 410: 1, 1315: 1, 595: 1, 346: 1, 689: 1, 690: 1, 317: 1, 367: 1, 1096: 1, 1488: 1, 1144: 1, 1239: 1, 462: 1, 575: 1, 646: 1, 1115: 1, 570: 1, 205: 1, 415: 1, 457: 1, 737: 1, 484: 1, 1100: 1, 364: 1, 485: 1, 623: 1, 315: 1, 1444: 1, 526: 1, 383: 1, 791: 1, 354: 1, 816: 1, 226: 1, 481: 1, 725: 1, 316: 1, 258: 1, 523: 1, 358: 1, 556: 1, 342: 1, 323: 1, 1118: 1, 488: 1, 423: 1, 474: 1, 565: 1, 391: 1, 266: 1, 265: 1, 627: 1, 255: 1, 327: 1, 1098: 1, 332: 1, 572: 1, 571: 1, 305: 1, 345: 1, 236: 1, 225: 1, 835: 1, 721: 1, 238: 1, 348: 1, 573: 1, 539: 1, 214: 1, 896: 1, 289: 1, 361: 1, 566: 1, 426: 1, 653: 1, 377: 1, 351: 1, 743: 1, 1058: 1, 79: 1, 713: 1, 313: 1, 245: 1, 545: 1, 402: 1, 528: 1, 198: 1, 259: 1, 356: 1, 133: 1, 190: 1, 221: 1, 234: 1, 176: 1, 264: 1, 157: 1, 506: 1, 262: 1, 144: 1, 626: 1, 1008: 1, 298: 1, 263: 1, 365: 1, 129: 1, 78: 1, 297: 1, 309: 1, 424: 1, 244: 1, 547: 1, 304: 1, 682: 1, 269: 1, 343: 1, 109: 1, 299: 1, 368: 1, 448: 1, 131: 1, 132: 1, 186: 1, 239: 1, 194: 1, 150: 1, 134: 1, 279: 1, 184: 1, 170: 1, 288: 1, 172: 1, 106: 1, 558: 1, 271: 1, 143: 1, 222: 1, 276: 1, 38: 1, 154: 1, 183: 1, 137: 1, 215: 1, 504: 1, 54: 1, 182: 1, 72: 1, 57: 1, 274: 1, 229: 1, 47: 1, 121: 1, 503: 1, 138: 1, 32: 1, 25: 1, 44: 1, 84: 1, 83: 1, 108: 1, 141: 1, 70: 1, 27: 1, 41: 1, 26: 1, 20: 1, 100: 1, 19: 1, 9: 1, 35: 1, 16: 1, 18: 1, 7: 1, 62: 1, 11: 1, 5: 1, 13: 1, 2: 1, 0: 1}, 'dog': {1301: 1, 1415: 1, 793: 1, 939: 1, 1233: 1, 1053: 1, 1116: 1, 1291: 1, 1403: 1, 1463: 1, 1314: 1, 1283: 1, 1237: 1, 891: 1, 810: 1, 867: 1, 1175: 1, 843: 1, 946: 1, 1061: 1, 1221: 1, 876: 1, 1395: 1, 979: 1, 771: 1, 1099: 1, 1219: 1, 951: 1, 871: 1, 997: 1, 1355: 1, 776: 1, 959: 1, 980: 1, 1288: 1, 1253: 1, 853: 1, 933: 1, 861: 1, 1456: 1, 1185: 1, 1245: 1, 1483: 1, 1023: 1, 1055: 1, 1130: 1, 1074: 1, 1137: 1, 1344: 1, 779: 1, 1421: 1, 1302: 1, 895: 1, 839: 1, 872: 1, 967: 1, 905: 1, 901: 1, 1405: 1, 1286: 1, 921: 1, 1381: 1, 749: 1, 1132: 1, 1084: 1, 1225: 1, 990: 1, 636: 1, 902: 1, 1254: 1, 940: 1, 1062: 1, 1246: 1, 1234: 1, 1447: 1, 914: 1, 918: 1, 1111: 1, 1121: 1, 1030: 1, 809: 1, 1199: 1, 1087: 1, 949: 1, 766: 1, 998: 1, 1365: 1, 903: 1, 1337: 1, 942: 1, 841: 1, 838: 1, 1269: 1, 849: 1, 1497: 1, 1370: 1, 669: 1, 1128: 1, 868: 1, 961: 1, 862: 1, 912: 1, 1255: 1, 1349: 1, 1271: 1, 1007: 1, 915: 1, 848: 1, 932: 1, 814: 1, 1439: 1, 767: 1, 925: 1, 760: 1, 881: 1, 880: 1, 1171: 1, 1347: 1, 649: 1, 694: 1, 821: 1, 1275: 1, 875: 1, 1138: 1, 883: 1, 899: 1, 1432: 1, 1450: 1, 1095: 1, 818: 1, 1158: 1, 475: 1, 728: 1, 1091: 1, 1436: 1, 1492: 1, 1437: 1, 1136: 1, 1412: 1, 1453: 1, 659: 1, 894: 1, 759: 1, 863: 1, 567: 1, 1088: 1, 1056: 1, 1079: 1, 433: 1, 1133: 1, 579: 1, 1119: 1, 612: 1, 878: 1, 873: 1, 832: 1, 1279: 1, 907: 1, 1012: 1, 969: 1, 751: 1, 1083: 1, 758: 1, 588: 1, 511: 1, 944: 1, 859: 1, 609: 1, 667: 1, 1186: 1, 706: 1, 983: 1, 833: 1, 1406: 1, 664: 1, 948: 1, 421: 1, 1073: 1, 435: 1, 1358: 1, 563: 1, 977: 1, 678: 1, 651: 1, 494: 1, 1448: 1, 1142: 1, 577: 1, 911: 1, 1048: 1, 851: 1, 1173: 1, 437: 1, 1209: 1, 1307: 1, 638: 1, 1485: 1, 1120: 1, 988: 1, 857: 1, 643: 1, 854: 1, 1467: 1, 574: 1, 1345: 1, 601: 1, 1107: 1, 1070: 1, 1476: 1, 1420: 1, 683: 1, 660: 1, 551: 1, 1081: 1, 490: 1, 826: 1, 892: 1, 508: 1, 453: 1, 1188: 1, 1039: 1, 707: 1, 409: 1, 679: 1, 589: 1, 693: 1, 582: 1, 783: 1, 852: 1, 617: 1, 1006: 1, 877: 1, 611: 1, 789: 1, 1124: 1, 817: 1, 584: 1, 602: 1, 708: 1, 1466: 1, 300: 1, 815: 1, 1028: 1, 695: 1, 414: 1, 922: 1, 564: 1, 954: 1, 796: 1, 1067: 1, 950: 1, 1146: 1, 455: 1, 1094: 1, 224: 1, 822: 1, 496: 1, 753: 1, 624: 1, 454: 1, 519: 1, 401: 1, 429: 1, 268: 1, 419: 1, 1002: 1, 246: 1, 596: 1, 887: 1, 1066: 1, 1474: 1, 782: 1, 477: 1, 727: 1, 681: 1, 730: 1, 387: 1, 827: 1, 413: 1, 1197: 1, 1251: 1, 562: 1, 590: 1, 1184: 1, 347: 1, 468: 1, 544: 1, 1009: 1, 512: 1, 666: 1, 452: 1, 774: 1, 237: 1, 283: 1, 393: 1, 1443: 1, 784: 1, 333: 1, 754: 1, 691: 1, 510: 1, 471: 1, 376: 1, 648: 1, 270: 1, 355: 1, 517: 1, 408: 1, 524: 1, 158: 1, 591: 1, 501: 1, 1161: 1, 770: 1, 235: 1, 375: 1, 206: 1, 1052: 1, 295: 1, 293: 1, 378: 1, 685: 1, 267: 1, 723: 1, 370: 1, 398: 1, 837: 1, 302: 1, 341: 1, 657: 1, 549: 1, 357: 1, 704: 1, 580: 1, 459: 1, 146: 1, 303: 1, 321: 1, 397: 1, 384: 1, 291: 1, 615: 1, 621: 1, 1240: 1, 284: 1, 747: 1, 516: 1, 388: 1, 461: 1, 507: 1, 248: 1, 373: 1, 930: 1, 469: 1, 1014: 1, 389: 1, 522: 1, 390: 1, 196: 1, 250: 1, 525: 1, 195: 1, 460: 1, 241: 1, 732: 1, 328: 1, 261: 1, 188: 1, 282: 1, 406: 1, 326: 1, 256: 1, 252: 1, 495: 1, 127: 1, 527: 1, 212: 1, 174: 1, 371: 1, 467: 1, 344: 1, 360: 1, 734: 1, 166: 1, 163: 1, 148: 1, 418: 1, 407: 1, 417: 1, 197: 1, 480: 1, 247: 1, 254: 1, 865: 1, 208: 1, 189: 1, 487: 1, 191: 1, 339: 1, 161: 1, 386: 1, 200: 1, 145: 1, 155: 1, 105: 1, 149: 1, 179: 1, 310: 1, 366: 1, 210: 1, 128: 1, 65: 1, 165: 1, 431: 1, 218: 1, 432: 1, 162: 1, 362: 1, 173: 1, 104: 1, 98: 1, 548: 1, 97: 1, 82: 1, 96: 1, 81: 1, 152: 1, 308: 1, 103: 1, 135: 1, 405: 1, 216: 1, 51: 1, 404: 1, 80: 1, 231: 1, 86: 1, 66: 1, 115: 1, 99: 1, 180: 1, 277: 1, 203: 1, 92: 1, 40: 1, 31: 1, 85: 1, 75: 1, 89: 1, 111: 1, 52: 1, 69: 1, 340: 1, 273: 1, 59: 1, 114: 1, 68: 1, 113: 1, 90: 1, 42: 1, 88: 1, 153: 1, 112: 1, 43: 1, 126: 1, 53: 1, 48: 1, 21: 1, 23: 1, 22: 1, 71: 1, 34: 1, 10: 1, 29: 1, 8: 1, 3: 1, 6: 1}, 'cat': {879: 1, 1075: 1, 799: 1, 1260: 1, 1323: 1, 1261: 1, 1166: 1, 1299: 1, 1025: 1, 1359: 1, 1264: 1, 819: 1, 824: 1, 1211: 1, 1339: 1, 1313: 1, 1494: 1, 1010: 1, 1035: 1, 913: 1, 1368: 1, 1129: 1, 1479: 1, 973: 1, 1226: 1, 1282: 1, 1249: 1, 1024: 1, 1455: 1, 1445: 1, 890: 1, 1273: 1, 1326: 1, 820: 1, 1454: 1, 1433: 1, 1154: 1, 1017: 1, 1156: 1, 1195: 1, 1160: 1, 1019: 1, 1389: 1, 1065: 1, 1289: 1, 1189: 1, 1409: 1, 1214: 1, 792: 1, 1011: 1, 811: 1, 1205: 1, 1252: 1, 1043: 1, 1343: 1, 870: 1, 1152: 1, 1243: 1, 1274: 1, 1356: 1, 1464: 1, 1322: 1, 999: 1, 1076: 1, 1295: 1, 768: 1, 1045: 1, 786: 1, 1449: 1, 1051: 1, 1163: 1, 1499: 1, 1228: 1, 1281: 1, 1145: 1, 1196: 1, 1247: 1, 994: 1, 1324: 1, 1379: 1, 1215: 1, 1153: 1, 1127: 1, 1330: 1, 1241: 1, 908: 1, 1498: 1, 1311: 1, 1460: 1, 1404: 1, 1238: 1, 978: 1, 1413: 1, 1382: 1, 1457: 1, 1125: 1, 1431: 1, 1089: 1, 1164: 1, 765: 1, 1316: 1, 1262: 1, 885: 1, 945: 1, 812: 1, 1418: 1, 1400: 1, 845: 1, 788: 1, 1458: 1, 1242: 1, 1172: 1, 1353: 1, 938: 1, 931: 1, 756: 1, 1293: 1, 778: 1, 1471: 1, 1351: 1, 1000: 1, 936: 1, 1475: 1, 769: 1, 1336: 1, 962: 1, 906: 1, 798: 1, 761: 1, 699: 1, 1372: 1, 1110: 1, 554: 1, 956: 1, 855: 1, 1135: 1, 671: 1, 1170: 1, 840: 1, 1383: 1, 1297: 1, 780: 1, 1203: 1, 630: 1, 656: 1, 1193: 1, 1194: 1, 676: 1, 806: 1, 430: 1, 829: 1, 746: 1, 1049: 1, 1126: 1, 697: 1, 1037: 1, 1334: 1, 1327: 1, 514: 1, 800: 1, 731: 1, 802: 1, 1360: 1, 1150: 1, 1384: 1, 745: 1, 1103: 1, 1093: 1, 710: 1, 831: 1, 622: 1, 1232: 1, 1200: 1, 1461: 1, 1472: 1, 1308: 1, 1027: 1, 1044: 1, 1190: 1, 1141: 1, 1426: 1, 714: 1, 1469: 1, 1090: 1, 884: 1, 1038: 1, 1342: 1, 1265: 1, 775: 1, 1410: 1, 1092: 1, 1280: 1, 1278: 1, 1425: 1, 1270: 1, 869: 1, 773: 1, 1332: 1, 1393: 1, 1022: 1, 926: 1, 1258: 1, 1378: 1, 521: 1, 450: 1, 957: 1, 1318: 1, 958: 1, 715: 1, 1223: 1, 677: 1, 790: 1, 716: 1, 1266: 1, 1440: 1, 1016: 1, 1487: 1, 439: 1, 941: 1, 712: 1, 981: 1, 380: 1, 379: 1, 396: 1, 1257: 1, 752: 1, 738: 1, 1402: 1, 607: 1, 801: 1, 608: 1, 1031: 1, 1139: 1, 893: 1, 1086: 1, 1149: 1, 1489: 1, 1465: 1, 846: 1, 478: 1, 866: 1, 662: 1, 1392: 1, 741: 1, 1364: 1, 705: 1, 993: 1, 1391: 1, 1064: 1, 538: 1, 1423: 1, 670: 1, 916: 1, 436: 1, 684: 1, 744: 1, 493: 1, 1101: 1, 729: 1, 1174: 1, 338: 1, 836: 1, 1005: 1, 399: 1, 698: 1, 696: 1, 1224: 1, 971: 1, 568: 1, 1210: 1, 329: 1, 804: 1, 652: 1, 1486: 1, 718: 1, 702: 1, 858: 1, 392: 1, 531: 1, 995: 1, 929: 1, 830: 1, 492: 1, 864: 1, 644: 1, 441: 1, 720: 1, 1207: 1, 534: 1, 372: 1, 1473: 1, 1451: 1, 719: 1, 1046: 1, 385: 1, 672: 1, 1229: 1, 394: 1, 1408: 1, 635: 1, 583: 1, 1148: 1, 947: 1, 561: 1, 955: 1, 463: 1, 319: 1, 1032: 1, 1191: 1, 318: 1, 585: 1, 422: 1, 736: 1, 281: 1, 673: 1, 292: 1, 937: 1, 1495: 1, 374: 1, 972: 1, 633: 1, 569: 1, 597: 1, 314: 1, 445: 1, 164: 1, 500: 1, 532: 1, 658: 1, 473: 1, 1060: 1, 598: 1, 742: 1, 502: 1, 482: 1, 290: 1, 550: 1, 604: 1, 442: 1, 533: 1, 733: 1, 703: 1, 974: 1, 296: 1, 520: 1, 1248: 1, 1033: 1, 688: 1, 976: 1, 722: 1, 209: 1, 692: 1, 613: 1, 530: 1, 1230: 1, 888: 1, 1375: 1, 717: 1, 509: 1, 515: 1, 700: 1, 1105: 1, 1366: 1, 159: 1, 1371: 1, 499: 1, 334: 1, 654: 1, 470: 1, 440: 1, 686: 1, 486: 1, 294: 1, 451: 1, 540: 1, 217: 1, 322: 1, 505: 1, 311: 1, 917: 1, 559: 1, 755: 1, 456: 1, 443: 1, 331: 1, 1131: 1, 249: 1, 352: 1, 438: 1, 1208: 1, 199: 1, 160: 1, 1202: 1, 479: 1, 546: 1, 102: 1, 382: 1, 187: 1, 428: 1, 427: 1, 285: 1, 227: 1, 260: 1, 628: 1, 491: 1, 369: 1, 359: 1, 240: 1, 552: 1, 349: 1, 363: 1, 220: 1, 687: 1, 578: 1, 257: 1, 600: 1, 286: 1, 307: 1, 465: 1, 147: 1, 425: 1, 529: 1, 935: 1, 619: 1, 156: 1, 275: 1, 207: 1, 219: 1, 464: 1, 287: 1, 458: 1, 625: 1, 395: 1, 253: 1, 335: 1, 312: 1, 553: 1, 614: 1, 118: 1, 403: 1, 232: 1, 130: 1, 306: 1, 603: 1, 213: 1, 301: 1, 557: 1, 140: 1, 211: 1, 230: 1, 142: 1, 117: 1, 94: 1, 93: 1, 618: 1, 178: 1, 58: 1, 228: 1, 123: 1, 272: 1, 242: 1, 233: 1, 243: 1, 181: 1, 64: 1, 193: 1, 177: 1, 204: 1, 447: 1, 185: 1, 63: 1, 151: 1, 77: 1, 171: 1, 555: 1, 192: 1, 120: 1, 119: 1, 280: 1, 110: 1, 122: 1, 95: 1, 74: 1, 116: 1, 39: 1, 139: 1, 278: 1, 124: 1, 223: 1, 28: 1, 107: 1, 91: 1, 251: 1, 202: 1, 73: 1, 336: 1, 46: 1, 169: 1, 175: 1, 136: 1, 87: 1, 101: 1, 167: 1, 67: 1, 15: 1, 201: 1, 76: 1, 55: 1, 45: 1, 125: 1, 50: 1, 56: 1, 37: 1, 60: 1, 33: 1, 61: 1, 36: 1, 49: 1, 24: 1, 12: 1, 4: 1, 17: 1, 30: 1, 14: 1, 1: 1}}
Matched classes:
{'wild': 1306, 'dog': 1301, 'cat': 879}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1499
Length of x: 1500
{1306: 0, 1301: 1, 879: 2}
{1306: 0, 1301: 1, 879: 2}
Final accuracy on train dataset:    0.002
Final accuracy on val dataset:      0.0

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=5.026845637583893, n_clusters=None)
All classes:
{'wild': {1306: 1, 1442: 1, 1078: 1, 1178: 1, 1029: 1, 787: 1, 1071: 1, 1217: 1, 1263: 1, 953: 1, 1109: 1, 847: 1, 1162: 1, 1376: 1, 1268: 1, 889: 1, 1361: 1, 1419: 1, 1117: 1, 996: 1, 1183: 1, 794: 1, 1399: 1, 1222: 1, 934: 1, 897: 1, 1143: 1, 1218: 1, 1340: 1, 970: 1, 1213: 1, 808: 1, 1290: 1, 1309: 1, 1496: 1, 1346: 1, 1417: 1, 762: 1, 1123: 1, 1231: 1, 909: 1, 1235: 1, 1424: 1, 1335: 1, 1428: 1, 1482: 1, 1082: 1, 965: 1, 1394: 1, 1362: 1, 1354: 1, 924: 1, 1177: 1, 1097: 1, 1085: 1, 943: 1, 1285: 1, 975: 1, 1369: 1, 1373: 1, 1204: 1, 1080: 1, 1287: 1, 1396: 1, 987: 1, 1034: 1, 1414: 1, 1069: 1, 1057: 1, 1168: 1, 1303: 1, 1165: 1, 1176: 1, 910: 1, 1310: 1, 1040: 1, 991: 1, 1300: 1, 825: 1, 1021: 1, 1003: 1, 1312: 1, 1106: 1, 1108: 1, 1113: 1, 650: 1, 466: 1, 1059: 1, 1386: 1, 1411: 1, 1477: 1, 1198: 1, 1157: 1, 1277: 1, 834: 1, 1407: 1, 1054: 1, 1026: 1, 1047: 1, 1181: 1, 1459: 1, 1296: 1, 1179: 1, 1236: 1, 813: 1, 1201: 1, 952: 1, 1438: 1, 989: 1, 823: 1, 985: 1, 1159: 1, 1484: 1, 964: 1, 1367: 1, 1319: 1, 1227: 1, 1192: 1, 1422: 1, 1435: 1, 1050: 1, 1216: 1, 1480: 1, 1072: 1, 923: 1, 498: 1, 1478: 1, 1077: 1, 1385: 1, 1388: 1, 1390: 1, 1320: 1, 1015: 1, 1013: 1, 1276: 1, 1294: 1, 1041: 1, 1374: 1, 904: 1, 1416: 1, 655: 1, 1481: 1, 1491: 1, 920: 1, 1140: 1, 1352: 1, 750: 1, 772: 1, 1430: 1, 1462: 1, 1397: 1, 1363: 1, 757: 1, 581: 1, 739: 1, 1325: 1, 740: 1, 1292: 1, 1493: 1, 1284: 1, 898: 1, 1122: 1, 472: 1, 661: 1, 1329: 1, 1305: 1, 882: 1, 1441: 1, 1180: 1, 637: 1, 1333: 1, 1267: 1, 795: 1, 701: 1, 777: 1, 1004: 1, 785: 1, 1321: 1, 1206: 1, 1401: 1, 966: 1, 1434: 1, 1182: 1, 1357: 1, 1212: 1, 1429: 1, 1244: 1, 1187: 1, 1104: 1, 748: 1, 1220: 1, 1331: 1, 1155: 1, 641: 1, 1341: 1, 1114: 1, 647: 1, 724: 1, 1470: 1, 781: 1, 1490: 1, 900: 1, 1348: 1, 764: 1, 1304: 1, 844: 1, 1102: 1, 1446: 1, 726: 1, 763: 1, 1387: 1, 1020: 1, 1468: 1, 807: 1, 1298: 1, 1169: 1, 982: 1, 1250: 1, 675: 1, 1259: 1, 1398: 1, 1001: 1, 449: 1, 1036: 1, 803: 1, 1338: 1, 560: 1, 634: 1, 1134: 1, 1018: 1, 1328: 1, 860: 1, 1350: 1, 986: 1, 928: 1, 828: 1, 968: 1, 416: 1, 1151: 1, 1377: 1, 610: 1, 599: 1, 642: 1, 541: 1, 542: 1, 1167: 1, 1063: 1, 874: 1, 1272: 1, 606: 1, 927: 1, 1147: 1, 963: 1, 592: 1, 805: 1, 616: 1, 1256: 1, 665: 1, 709: 1, 320: 1, 330: 1, 337: 1, 537: 1, 886: 1, 446: 1, 919: 1, 640: 1, 586: 1, 605: 1, 576: 1, 850: 1, 674: 1, 483: 1, 711: 1, 412: 1, 631: 1, 797: 1, 350: 1, 400: 1, 856: 1, 535: 1, 842: 1, 1317: 1, 992: 1, 735: 1, 960: 1, 536: 1, 543: 1, 513: 1, 593: 1, 1042: 1, 680: 1, 629: 1, 587: 1, 420: 1, 1380: 1, 663: 1, 381: 1, 434: 1, 639: 1, 1452: 1, 168: 1, 645: 1, 324: 1, 1068: 1, 1112: 1, 325: 1, 668: 1, 518: 1, 489: 1, 984: 1, 353: 1, 594: 1, 497: 1, 632: 1, 476: 1, 411: 1, 444: 1, 620: 1, 1427: 1, 410: 1, 1315: 1, 595: 1, 346: 1, 689: 1, 690: 1, 317: 1, 367: 1, 1096: 1, 1488: 1, 1144: 1, 1239: 1, 462: 1, 575: 1, 646: 1, 1115: 1, 570: 1, 205: 1, 415: 1, 457: 1, 737: 1, 484: 1, 1100: 1, 364: 1, 485: 1, 623: 1, 315: 1, 1444: 1, 526: 1, 383: 1, 791: 1, 354: 1, 816: 1, 226: 1, 481: 1, 725: 1, 316: 1, 258: 1, 523: 1, 358: 1, 556: 1, 342: 1, 323: 1, 1118: 1, 488: 1, 423: 1, 474: 1, 565: 1, 391: 1, 266: 1, 265: 1, 627: 1, 255: 1, 327: 1, 1098: 1, 332: 1, 572: 1, 571: 1, 305: 1, 345: 1, 236: 1, 225: 1, 835: 1, 721: 1, 238: 1, 348: 1, 573: 1, 539: 1, 214: 1, 896: 1, 289: 1, 361: 1, 566: 1, 426: 1, 653: 1, 377: 1, 351: 1, 743: 1, 1058: 1, 79: 1, 713: 1, 313: 1, 245: 1, 545: 1, 402: 1, 528: 1, 198: 1, 259: 1, 356: 1, 133: 1, 190: 1, 221: 1, 234: 1, 176: 1, 264: 1, 157: 1, 506: 1, 262: 1, 144: 1, 626: 1, 1008: 1, 298: 1, 263: 1, 365: 1, 129: 1, 78: 1, 297: 1, 309: 1, 424: 1, 244: 1, 547: 1, 304: 1, 682: 1, 269: 1, 343: 1, 109: 1, 299: 1, 368: 1, 448: 1, 131: 1, 132: 1, 186: 1, 239: 1, 194: 1, 150: 1, 134: 1, 279: 1, 184: 1, 170: 1, 288: 1, 172: 1, 106: 1, 558: 1, 271: 1, 143: 1, 222: 1, 276: 1, 38: 1, 154: 1, 183: 1, 137: 1, 215: 1, 504: 1, 54: 1, 182: 1, 72: 1, 57: 1, 274: 1, 229: 1, 47: 1, 121: 1, 503: 1, 138: 1, 32: 1, 25: 1, 90: 1, 84: 1, 83: 1, 108: 1, 141: 1, 70: 1, 27: 1, 41: 1, 26: 1, 20: 1, 100: 1, 19: 1, 9: 1, 35: 1, 16: 1, 18: 1, 7: 1, 62: 1, 11: 1, 5: 1, 13: 1, 2: 1, 1: 1}, 'dog': {1301: 1, 1415: 1, 793: 1, 939: 1, 1233: 1, 1053: 1, 1116: 1, 1291: 1, 1403: 1, 1463: 1, 1314: 1, 1283: 1, 1237: 1, 891: 1, 810: 1, 867: 1, 1175: 1, 843: 1, 946: 1, 1061: 1, 1221: 1, 876: 1, 1395: 1, 979: 1, 771: 1, 1099: 1, 1219: 1, 951: 1, 871: 1, 997: 1, 1355: 1, 776: 1, 959: 1, 980: 1, 1288: 1, 1253: 1, 853: 1, 933: 1, 861: 1, 1456: 1, 1185: 1, 1245: 1, 1483: 1, 1023: 1, 1055: 1, 1130: 1, 1074: 1, 1137: 1, 1344: 1, 779: 1, 1421: 1, 1302: 1, 895: 1, 839: 1, 872: 1, 967: 1, 905: 1, 901: 1, 1405: 1, 1286: 1, 921: 1, 1381: 1, 749: 1, 1132: 1, 1084: 1, 1225: 1, 990: 1, 636: 1, 902: 1, 1254: 1, 940: 1, 1062: 1, 1246: 1, 1234: 1, 1447: 1, 914: 1, 918: 1, 1111: 1, 1121: 1, 1030: 1, 809: 1, 1199: 1, 1087: 1, 949: 1, 766: 1, 998: 1, 1365: 1, 903: 1, 1337: 1, 942: 1, 841: 1, 838: 1, 1269: 1, 849: 1, 1497: 1, 1370: 1, 669: 1, 1128: 1, 868: 1, 961: 1, 862: 1, 912: 1, 1255: 1, 1349: 1, 1271: 1, 1007: 1, 915: 1, 848: 1, 932: 1, 814: 1, 1439: 1, 767: 1, 925: 1, 760: 1, 881: 1, 880: 1, 1171: 1, 1347: 1, 649: 1, 694: 1, 821: 1, 1275: 1, 875: 1, 1138: 1, 883: 1, 899: 1, 1432: 1, 1450: 1, 1095: 1, 818: 1, 1158: 1, 475: 1, 728: 1, 1091: 1, 1436: 1, 1492: 1, 1437: 1, 1136: 1, 1412: 1, 1453: 1, 659: 1, 894: 1, 759: 1, 863: 1, 567: 1, 1088: 1, 1056: 1, 1079: 1, 433: 1, 1133: 1, 579: 1, 1119: 1, 612: 1, 878: 1, 873: 1, 832: 1, 1279: 1, 907: 1, 1012: 1, 969: 1, 751: 1, 1083: 1, 758: 1, 588: 1, 511: 1, 944: 1, 859: 1, 609: 1, 667: 1, 1186: 1, 706: 1, 983: 1, 833: 1, 1406: 1, 664: 1, 948: 1, 421: 1, 1073: 1, 435: 1, 1358: 1, 563: 1, 977: 1, 678: 1, 651: 1, 494: 1, 1448: 1, 1142: 1, 577: 1, 911: 1, 1048: 1, 851: 1, 1173: 1, 437: 1, 1209: 1, 1307: 1, 638: 1, 1485: 1, 1120: 1, 988: 1, 857: 1, 643: 1, 854: 1, 1467: 1, 574: 1, 1345: 1, 601: 1, 1107: 1, 1070: 1, 1476: 1, 1420: 1, 683: 1, 660: 1, 551: 1, 1081: 1, 490: 1, 826: 1, 892: 1, 508: 1, 453: 1, 1188: 1, 1039: 1, 707: 1, 409: 1, 679: 1, 589: 1, 693: 1, 582: 1, 783: 1, 852: 1, 617: 1, 1006: 1, 877: 1, 611: 1, 789: 1, 1124: 1, 817: 1, 584: 1, 602: 1, 708: 1, 1466: 1, 300: 1, 815: 1, 1028: 1, 695: 1, 414: 1, 922: 1, 564: 1, 954: 1, 796: 1, 1067: 1, 950: 1, 1146: 1, 455: 1, 1094: 1, 224: 1, 822: 1, 496: 1, 753: 1, 624: 1, 454: 1, 519: 1, 401: 1, 429: 1, 268: 1, 419: 1, 1002: 1, 246: 1, 596: 1, 887: 1, 1066: 1, 1474: 1, 782: 1, 477: 1, 727: 1, 681: 1, 730: 1, 387: 1, 827: 1, 413: 1, 1197: 1, 1251: 1, 562: 1, 590: 1, 1184: 1, 347: 1, 468: 1, 544: 1, 1009: 1, 512: 1, 666: 1, 452: 1, 774: 1, 237: 1, 283: 1, 393: 1, 1443: 1, 784: 1, 333: 1, 754: 1, 691: 1, 510: 1, 471: 1, 376: 1, 648: 1, 270: 1, 355: 1, 517: 1, 408: 1, 524: 1, 158: 1, 591: 1, 501: 1, 1161: 1, 770: 1, 235: 1, 375: 1, 206: 1, 1052: 1, 295: 1, 293: 1, 378: 1, 685: 1, 267: 1, 723: 1, 370: 1, 398: 1, 837: 1, 302: 1, 341: 1, 657: 1, 549: 1, 357: 1, 704: 1, 580: 1, 459: 1, 146: 1, 303: 1, 321: 1, 397: 1, 384: 1, 291: 1, 615: 1, 621: 1, 1240: 1, 284: 1, 747: 1, 516: 1, 388: 1, 461: 1, 507: 1, 248: 1, 373: 1, 930: 1, 469: 1, 1014: 1, 389: 1, 522: 1, 390: 1, 196: 1, 250: 1, 525: 1, 195: 1, 460: 1, 241: 1, 732: 1, 328: 1, 261: 1, 188: 1, 282: 1, 406: 1, 326: 1, 256: 1, 252: 1, 495: 1, 127: 1, 527: 1, 212: 1, 174: 1, 371: 1, 467: 1, 344: 1, 360: 1, 734: 1, 166: 1, 163: 1, 148: 1, 418: 1, 407: 1, 417: 1, 197: 1, 480: 1, 247: 1, 254: 1, 865: 1, 208: 1, 189: 1, 487: 1, 191: 1, 339: 1, 161: 1, 386: 1, 200: 1, 145: 1, 155: 1, 105: 1, 149: 1, 179: 1, 310: 1, 366: 1, 210: 1, 128: 1, 65: 1, 165: 1, 431: 1, 218: 1, 432: 1, 162: 1, 362: 1, 173: 1, 104: 1, 98: 1, 548: 1, 97: 1, 82: 1, 96: 1, 81: 1, 152: 1, 308: 1, 103: 1, 135: 1, 405: 1, 216: 1, 51: 1, 404: 1, 80: 1, 231: 1, 86: 1, 66: 1, 115: 1, 99: 1, 180: 1, 277: 1, 203: 1, 92: 1, 40: 1, 31: 1, 85: 1, 75: 1, 89: 1, 111: 1, 52: 1, 69: 1, 340: 1, 273: 1, 59: 1, 114: 1, 68: 1, 113: 1, 181: 1, 42: 1, 88: 1, 153: 1, 112: 1, 43: 1, 126: 1, 53: 1, 48: 1, 44: 1, 23: 1, 22: 1, 71: 1, 34: 1, 21: 1, 29: 1, 8: 1, 3: 1, 6: 1}, 'cat': {879: 1, 1075: 1, 799: 1, 1260: 1, 1323: 1, 1261: 1, 1166: 1, 1299: 1, 1025: 1, 1359: 1, 1264: 1, 819: 1, 824: 1, 1211: 1, 1339: 1, 1313: 1, 1494: 1, 1010: 1, 1035: 1, 913: 1, 1368: 1, 1129: 1, 1479: 1, 973: 1, 1226: 1, 1282: 1, 1249: 1, 1024: 1, 1455: 1, 1445: 1, 890: 1, 1273: 1, 1326: 1, 820: 1, 1454: 1, 1433: 1, 1154: 1, 1017: 1, 1156: 1, 1195: 1, 1160: 1, 1019: 1, 1389: 1, 1065: 1, 1289: 1, 1189: 1, 1409: 1, 1214: 1, 792: 1, 1011: 1, 811: 1, 1205: 1, 1252: 1, 1043: 1, 1343: 1, 870: 1, 1152: 1, 1243: 1, 1274: 1, 1356: 1, 1464: 1, 1322: 1, 999: 1, 1076: 1, 1295: 1, 768: 1, 1045: 1, 786: 1, 1449: 1, 1051: 1, 1163: 1, 0: 2, 1228: 1, 1281: 1, 1145: 1, 1196: 1, 1247: 1, 994: 1, 1324: 1, 1379: 1, 1215: 1, 1153: 1, 1127: 1, 1330: 1, 1241: 1, 908: 1, 1498: 1, 1311: 1, 1460: 1, 1404: 1, 1238: 1, 978: 1, 1413: 1, 1382: 1, 1457: 1, 1125: 1, 1431: 1, 1089: 1, 1164: 1, 765: 1, 1316: 1, 1262: 1, 885: 1, 945: 1, 812: 1, 1418: 1, 1400: 1, 845: 1, 788: 1, 1458: 1, 1242: 1, 1172: 1, 1353: 1, 938: 1, 931: 1, 756: 1, 1293: 1, 778: 1, 1471: 1, 1351: 1, 1000: 1, 936: 1, 1475: 1, 769: 1, 1336: 1, 962: 1, 906: 1, 798: 1, 761: 1, 699: 1, 1372: 1, 1110: 1, 554: 1, 956: 1, 855: 1, 1135: 1, 671: 1, 1170: 1, 840: 1, 1383: 1, 1297: 1, 780: 1, 1203: 1, 630: 1, 656: 1, 1193: 1, 1194: 1, 676: 1, 806: 1, 430: 1, 829: 1, 746: 1, 1049: 1, 1126: 1, 697: 1, 1037: 1, 1334: 1, 1327: 1, 514: 1, 800: 1, 731: 1, 802: 1, 1360: 1, 1150: 1, 1384: 1, 745: 1, 1103: 1, 1093: 1, 710: 1, 831: 1, 622: 1, 1232: 1, 1200: 1, 1461: 1, 1472: 1, 1308: 1, 1027: 1, 1044: 1, 1190: 1, 1141: 1, 1426: 1, 714: 1, 1469: 1, 1090: 1, 884: 1, 1038: 1, 1342: 1, 1265: 1, 775: 1, 1410: 1, 1092: 1, 1280: 1, 1278: 1, 1425: 1, 1270: 1, 869: 1, 773: 1, 1332: 1, 1393: 1, 1022: 1, 926: 1, 1258: 1, 1378: 1, 521: 1, 450: 1, 957: 1, 1318: 1, 958: 1, 715: 1, 1223: 1, 677: 1, 790: 1, 716: 1, 1266: 1, 1440: 1, 1016: 1, 1487: 1, 439: 1, 941: 1, 712: 1, 981: 1, 380: 1, 379: 1, 396: 1, 1257: 1, 752: 1, 738: 1, 1402: 1, 607: 1, 801: 1, 608: 1, 1031: 1, 1139: 1, 893: 1, 1086: 1, 1149: 1, 1489: 1, 1465: 1, 846: 1, 478: 1, 866: 1, 662: 1, 1392: 1, 741: 1, 1364: 1, 705: 1, 993: 1, 1391: 1, 1064: 1, 538: 1, 1423: 1, 670: 1, 916: 1, 436: 1, 684: 1, 744: 1, 493: 1, 1101: 1, 729: 1, 1174: 1, 338: 1, 836: 1, 1005: 1, 399: 1, 698: 1, 696: 1, 1224: 1, 971: 1, 568: 1, 1210: 1, 329: 1, 804: 1, 652: 1, 1486: 1, 718: 1, 702: 1, 858: 1, 392: 1, 531: 1, 995: 1, 929: 1, 830: 1, 492: 1, 864: 1, 644: 1, 441: 1, 720: 1, 1207: 1, 534: 1, 372: 1, 1473: 1, 1451: 1, 719: 1, 1046: 1, 385: 1, 672: 1, 1229: 1, 394: 1, 1408: 1, 635: 1, 583: 1, 1148: 1, 947: 1, 561: 1, 955: 1, 463: 1, 319: 1, 1032: 1, 1191: 1, 318: 1, 585: 1, 422: 1, 736: 1, 281: 1, 673: 1, 292: 1, 937: 1, 1495: 1, 374: 1, 972: 1, 633: 1, 569: 1, 597: 1, 314: 1, 445: 1, 164: 1, 500: 1, 532: 1, 658: 1, 473: 1, 1060: 1, 598: 1, 742: 1, 502: 1, 482: 1, 290: 1, 550: 1, 604: 1, 442: 1, 533: 1, 733: 1, 703: 1, 974: 1, 296: 1, 520: 1, 1248: 1, 1033: 1, 688: 1, 976: 1, 722: 1, 209: 1, 692: 1, 613: 1, 530: 1, 1230: 1, 888: 1, 1375: 1, 717: 1, 509: 1, 515: 1, 700: 1, 1105: 1, 1366: 1, 159: 1, 1371: 1, 499: 1, 334: 1, 654: 1, 470: 1, 440: 1, 686: 1, 486: 1, 294: 1, 451: 1, 540: 1, 217: 1, 322: 1, 505: 1, 311: 1, 917: 1, 559: 1, 755: 1, 456: 1, 443: 1, 331: 1, 1131: 1, 249: 1, 352: 1, 438: 1, 1208: 1, 199: 1, 160: 1, 1202: 1, 479: 1, 546: 1, 102: 1, 382: 1, 187: 1, 428: 1, 427: 1, 285: 1, 227: 1, 260: 1, 628: 1, 491: 1, 369: 1, 359: 1, 240: 1, 552: 1, 349: 1, 363: 1, 220: 1, 687: 1, 578: 1, 257: 1, 600: 1, 286: 1, 307: 1, 465: 1, 147: 1, 425: 1, 529: 1, 935: 1, 619: 1, 156: 1, 275: 1, 207: 1, 219: 1, 464: 1, 287: 1, 458: 1, 625: 1, 395: 1, 253: 1, 335: 1, 312: 1, 553: 1, 614: 1, 118: 1, 403: 1, 232: 1, 130: 1, 306: 1, 603: 1, 213: 1, 301: 1, 557: 1, 140: 1, 211: 1, 230: 1, 142: 1, 117: 1, 94: 1, 93: 1, 618: 1, 178: 1, 58: 1, 228: 1, 123: 1, 272: 1, 242: 1, 233: 1, 243: 1, 64: 1, 193: 1, 177: 1, 204: 1, 447: 1, 185: 1, 63: 1, 151: 1, 77: 1, 171: 1, 555: 1, 192: 1, 120: 1, 119: 1, 280: 1, 110: 1, 122: 1, 95: 1, 74: 1, 116: 1, 39: 1, 139: 1, 278: 1, 124: 1, 223: 1, 28: 1, 107: 1, 91: 1, 251: 1, 202: 1, 73: 1, 336: 1, 46: 1, 169: 1, 175: 1, 136: 1, 87: 1, 101: 1, 167: 1, 67: 1, 15: 1, 201: 1, 76: 1, 55: 1, 45: 1, 125: 1, 50: 1, 56: 1, 37: 1, 60: 1, 33: 1, 61: 1, 36: 1, 49: 1, 24: 1, 12: 1, 10: 1, 17: 1, 30: 1, 14: 1, 4: 1}}
Matched classes:
{'cat': 0, 'wild': 1306, 'dog': 1301}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1499
Length of x: 1500
{1306: 0, 1301: 1, 0: 2}
{1306: 0, 1301: 1, 0: 2}
Final accuracy on train dataset:    0.0026666666666666666
Final accuracy on val dataset:      0.0006666666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=7.0402684563758395, n_clusters=None)
All classes:
{'wild': {1306: 1, 1442: 1, 1078: 1, 1178: 1, 1029: 1, 787: 1, 1071: 1, 1217: 1, 1263: 1, 953: 1, 1109: 1, 847: 1, 1162: 1, 1376: 1, 1268: 1, 889: 1, 1361: 1, 1419: 1, 1117: 1, 996: 1, 1183: 1, 794: 1, 1399: 1, 1222: 1, 934: 1, 897: 1, 1143: 1, 1218: 1, 1340: 1, 970: 1, 1213: 1, 808: 1, 1290: 1, 1309: 1, 2: 2, 1346: 1, 1417: 1, 762: 1, 1123: 1, 1231: 1, 909: 1, 1235: 1, 1424: 1, 1335: 1, 1428: 1, 1482: 1, 1082: 1, 965: 1, 1394: 1, 1362: 1, 1354: 1, 924: 1, 1177: 1, 1097: 1, 1085: 1, 943: 1, 1285: 1, 975: 1, 1369: 1, 1373: 1, 1204: 1, 1080: 1, 1287: 1, 1396: 1, 987: 1, 1034: 1, 1414: 1, 1069: 1, 1057: 1, 1168: 1, 1303: 1, 1165: 1, 1176: 1, 910: 1, 1310: 1, 1040: 1, 991: 1, 1300: 1, 825: 1, 1021: 1, 1003: 1, 1312: 1, 1106: 1, 1108: 1, 1113: 1, 650: 1, 466: 1, 1059: 1, 1386: 1, 1411: 1, 1477: 1, 1198: 1, 1157: 1, 1277: 1, 834: 1, 1407: 1, 1054: 1, 1026: 1, 1047: 1, 1181: 1, 1459: 1, 1296: 1, 1179: 1, 1236: 1, 813: 1, 1201: 1, 952: 1, 1438: 1, 989: 1, 823: 1, 985: 1, 1159: 1, 1484: 1, 964: 1, 1367: 1, 1319: 1, 1227: 1, 1192: 1, 1422: 1, 1435: 1, 1050: 1, 1216: 1, 1480: 1, 1072: 1, 923: 1, 498: 1, 1478: 1, 1077: 1, 1385: 1, 1388: 1, 1390: 1, 1320: 1, 1015: 1, 1013: 1, 1276: 1, 1294: 1, 1041: 1, 1374: 1, 904: 1, 1416: 1, 655: 1, 1481: 1, 1491: 1, 920: 1, 1140: 1, 1352: 1, 750: 1, 772: 1, 1430: 1, 1462: 1, 1397: 1, 1363: 1, 757: 1, 581: 1, 739: 1, 1325: 1, 740: 1, 1292: 1, 1493: 1, 1284: 1, 898: 1, 1122: 1, 472: 1, 661: 1, 1329: 1, 1305: 1, 882: 1, 1441: 1, 1180: 1, 637: 1, 1333: 1, 1267: 1, 795: 1, 701: 1, 777: 1, 1004: 1, 785: 1, 1321: 1, 1206: 1, 1401: 1, 966: 1, 1434: 1, 1182: 1, 1357: 1, 1212: 1, 1429: 1, 1244: 1, 1187: 1, 1104: 1, 5: 2, 1220: 1, 1331: 1, 1155: 1, 641: 1, 1341: 1, 1114: 1, 647: 1, 724: 1, 1470: 1, 781: 1, 1490: 1, 900: 1, 1348: 1, 764: 1, 1304: 1, 844: 1, 1102: 1, 1446: 1, 726: 1, 763: 1, 1387: 1, 1020: 1, 1468: 1, 807: 1, 1298: 1, 1169: 1, 982: 1, 1250: 1, 675: 1, 1259: 1, 1398: 1, 1001: 1, 449: 1, 1036: 1, 803: 1, 1338: 1, 560: 1, 634: 1, 1134: 1, 1018: 1, 1328: 1, 860: 1, 1350: 1, 986: 1, 928: 1, 828: 1, 968: 1, 416: 1, 1151: 1, 1377: 1, 610: 1, 599: 1, 642: 1, 541: 1, 542: 1, 1167: 1, 1063: 1, 874: 1, 1272: 1, 606: 1, 927: 1, 1147: 1, 963: 1, 592: 1, 805: 1, 616: 1, 1256: 1, 665: 1, 709: 1, 320: 1, 330: 1, 337: 1, 537: 1, 886: 1, 446: 1, 919: 1, 640: 1, 586: 1, 605: 1, 576: 1, 850: 1, 674: 1, 483: 1, 711: 1, 412: 1, 631: 1, 797: 1, 350: 1, 400: 1, 856: 1, 535: 1, 842: 1, 1317: 1, 992: 1, 735: 1, 960: 1, 536: 1, 543: 1, 513: 1, 593: 1, 1042: 1, 680: 1, 629: 1, 587: 1, 420: 1, 1380: 1, 663: 1, 381: 1, 434: 1, 639: 1, 1452: 1, 168: 1, 645: 1, 324: 1, 1068: 1, 1112: 1, 325: 1, 668: 1, 518: 1, 489: 1, 984: 1, 353: 1, 594: 1, 497: 1, 632: 1, 476: 1, 411: 1, 444: 1, 620: 1, 1427: 1, 410: 1, 1315: 1, 595: 1, 346: 1, 689: 1, 690: 1, 317: 1, 367: 1, 1096: 1, 1488: 1, 1144: 1, 1239: 1, 462: 1, 575: 1, 646: 1, 1115: 1, 570: 1, 205: 1, 415: 1, 457: 1, 737: 1, 484: 1, 1100: 1, 364: 1, 485: 1, 623: 1, 315: 1, 1444: 1, 526: 1, 383: 1, 354: 1, 816: 1, 226: 1, 481: 1, 725: 1, 316: 1, 258: 1, 523: 1, 358: 1, 556: 1, 342: 1, 323: 1, 1118: 1, 488: 1, 423: 1, 474: 1, 565: 1, 391: 1, 266: 1, 265: 1, 627: 1, 255: 1, 327: 1, 1098: 1, 332: 1, 572: 1, 571: 1, 305: 1, 345: 1, 236: 1, 225: 1, 835: 1, 721: 1, 238: 1, 348: 1, 573: 1, 539: 1, 214: 1, 896: 1, 289: 1, 361: 1, 566: 1, 426: 1, 653: 1, 377: 1, 351: 1, 743: 1, 1058: 1, 79: 1, 713: 1, 313: 1, 245: 1, 545: 1, 402: 1, 528: 1, 198: 1, 259: 1, 356: 1, 133: 1, 190: 1, 221: 1, 234: 1, 176: 1, 264: 1, 157: 1, 506: 1, 262: 1, 144: 1, 626: 1, 1008: 1, 298: 1, 263: 1, 365: 1, 129: 1, 78: 1, 297: 1, 309: 1, 424: 1, 244: 1, 547: 1, 304: 1, 682: 1, 269: 1, 343: 1, 109: 1, 299: 1, 368: 1, 448: 1, 131: 1, 132: 1, 0: 2, 239: 1, 194: 1, 150: 1, 134: 1, 279: 1, 184: 1, 170: 1, 288: 1, 172: 1, 106: 1, 558: 1, 271: 1, 143: 1, 222: 1, 276: 1, 38: 1, 154: 1, 183: 1, 137: 1, 215: 1, 504: 1, 54: 1, 182: 1, 145: 1, 57: 1, 274: 1, 229: 1, 121: 1, 503: 1, 138: 1, 32: 1, 25: 1, 90: 1, 84: 1, 83: 1, 108: 1, 141: 1, 70: 1, 27: 1, 41: 1, 26: 1, 20: 1, 19: 1, 9: 1, 72: 1, 16: 1, 18: 1, 7: 1, 62: 1, 48: 1, 23: 1, 13: 1, 24: 1, 3: 1}, 'dog': {1301: 1, 1415: 1, 793: 1, 939: 1, 1233: 1, 1053: 1, 1116: 1, 1291: 1, 1403: 1, 1463: 1, 1314: 1, 1283: 1, 1237: 1, 891: 1, 810: 1, 867: 1, 1175: 1, 843: 1, 946: 1, 1061: 1, 1221: 1, 876: 1, 1395: 1, 979: 1, 771: 1, 1099: 1, 1219: 1, 951: 1, 871: 1, 997: 1, 1355: 1, 776: 1, 959: 1, 980: 1, 1288: 1, 1253: 1, 853: 1, 933: 1, 861: 1, 1456: 1, 1185: 1, 1245: 1, 1483: 1, 1023: 1, 1055: 1, 1130: 1, 1074: 1, 1137: 1, 1344: 1, 779: 1, 1421: 1, 1302: 1, 895: 1, 839: 1, 872: 1, 967: 1, 905: 1, 901: 1, 1405: 1, 1286: 1, 921: 1, 1381: 1, 749: 1, 1132: 1, 1084: 1, 1225: 1, 990: 1, 636: 1, 902: 1, 1254: 1, 940: 1, 1062: 1, 1246: 1, 1234: 1, 1447: 1, 914: 1, 918: 1, 1111: 1, 1121: 1, 1030: 1, 809: 1, 1199: 1, 1087: 1, 949: 1, 766: 1, 998: 1, 1365: 1, 903: 1, 1337: 1, 942: 1, 841: 1, 838: 1, 1269: 1, 849: 1, 748: 1, 1370: 1, 669: 1, 1128: 1, 868: 1, 961: 1, 862: 1, 912: 1, 1255: 1, 1349: 1, 1271: 1, 1007: 1, 915: 1, 848: 1, 932: 1, 814: 1, 1439: 1, 767: 1, 925: 1, 760: 1, 881: 1, 880: 1, 1171: 1, 1347: 1, 649: 1, 694: 1, 821: 1, 1275: 1, 875: 1, 1138: 1, 883: 1, 899: 1, 1432: 1, 1450: 1, 1095: 1, 818: 1, 1158: 1, 475: 1, 728: 1, 1091: 1, 1436: 1, 1492: 1, 1437: 1, 1136: 1, 1412: 1, 1453: 1, 659: 1, 894: 1, 759: 1, 863: 1, 567: 1, 1088: 1, 1056: 1, 1079: 1, 433: 1, 1133: 1, 579: 1, 1119: 1, 612: 1, 878: 1, 873: 1, 832: 1, 1279: 1, 907: 1, 1012: 1, 969: 1, 751: 1, 1083: 1, 758: 1, 588: 1, 511: 1, 944: 1, 859: 1, 609: 1, 667: 1, 1186: 1, 706: 1, 983: 1, 833: 1, 1406: 1, 664: 1, 948: 1, 421: 1, 1073: 1, 435: 1, 1358: 1, 563: 1, 977: 1, 678: 1, 651: 1, 494: 1, 1448: 1, 1142: 1, 577: 1, 911: 1, 1048: 1, 851: 1, 1173: 1, 437: 1, 1209: 1, 1307: 1, 638: 1, 1485: 1, 1120: 1, 988: 1, 857: 1, 643: 1, 854: 1, 1467: 1, 574: 1, 1345: 1, 601: 1, 1107: 1, 1070: 1, 1476: 1, 1420: 1, 683: 1, 660: 1, 551: 1, 1081: 1, 490: 1, 826: 1, 892: 1, 508: 1, 453: 1, 1188: 1, 1039: 1, 707: 1, 409: 1, 679: 1, 589: 1, 693: 1, 582: 1, 783: 1, 852: 1, 617: 1, 1006: 1, 877: 1, 611: 1, 789: 1, 1124: 1, 817: 1, 584: 1, 602: 1, 708: 1, 1466: 1, 300: 1, 815: 1, 1028: 1, 695: 1, 414: 1, 922: 1, 564: 1, 954: 1, 796: 1, 1067: 1, 950: 1, 1146: 1, 455: 1, 1094: 1, 224: 1, 822: 1, 496: 1, 753: 1, 624: 1, 454: 1, 519: 1, 401: 1, 429: 1, 268: 1, 419: 1, 1002: 1, 246: 1, 596: 1, 887: 1, 1066: 1, 1474: 1, 782: 1, 477: 1, 727: 1, 681: 1, 730: 1, 387: 1, 827: 1, 413: 1, 1197: 1, 1251: 1, 562: 1, 590: 1, 1184: 1, 347: 1, 468: 1, 544: 1, 1009: 1, 512: 1, 666: 1, 452: 1, 774: 1, 237: 1, 283: 1, 393: 1, 1443: 1, 784: 1, 333: 1, 754: 1, 691: 1, 510: 1, 471: 1, 376: 1, 648: 1, 270: 1, 355: 1, 517: 1, 408: 1, 524: 1, 158: 1, 591: 1, 501: 1, 1161: 1, 770: 1, 235: 1, 375: 1, 206: 1, 1052: 1, 295: 1, 293: 1, 378: 1, 685: 1, 267: 1, 723: 1, 370: 1, 398: 1, 837: 1, 302: 1, 341: 1, 657: 1, 549: 1, 357: 1, 704: 1, 580: 1, 459: 1, 146: 1, 303: 1, 321: 1, 397: 1, 384: 1, 583: 1, 615: 1, 621: 1, 1240: 1, 284: 1, 373: 1, 516: 1, 388: 1, 461: 1, 507: 1, 248: 1, 186: 1, 930: 1, 469: 1, 1014: 1, 389: 1, 522: 1, 390: 1, 196: 1, 250: 1, 525: 1, 195: 1, 460: 1, 241: 1, 732: 1, 328: 1, 261: 1, 188: 1, 282: 1, 406: 1, 326: 1, 256: 1, 252: 1, 495: 1, 127: 1, 527: 1, 212: 1, 174: 1, 371: 1, 467: 1, 344: 1, 360: 1, 734: 1, 166: 1, 163: 1, 148: 1, 418: 1, 407: 1, 417: 1, 395: 1, 480: 1, 247: 1, 254: 1, 865: 1, 208: 1, 189: 1, 487: 1, 191: 1, 339: 1, 161: 1, 386: 1, 200: 1, 291: 1, 155: 1, 105: 1, 149: 1, 179: 1, 310: 1, 366: 1, 210: 1, 128: 1, 65: 1, 165: 1, 431: 1, 218: 1, 432: 1, 162: 1, 362: 1, 173: 1, 104: 1, 197: 1, 548: 1, 97: 1, 82: 1, 96: 1, 81: 1, 152: 1, 308: 1, 103: 1, 135: 1, 405: 1, 216: 1, 51: 1, 404: 1, 80: 1, 231: 1, 86: 1, 66: 1, 115: 1, 99: 1, 180: 1, 277: 1, 203: 1, 92: 1, 40: 1, 31: 1, 85: 1, 75: 1, 89: 1, 111: 1, 52: 1, 69: 1, 340: 1, 273: 1, 59: 1, 114: 1, 68: 1, 113: 1, 181: 1, 42: 1, 88: 1, 153: 1, 112: 1, 43: 1, 126: 1, 53: 1, 98: 1, 44: 1, 47: 1, 22: 1, 71: 1, 34: 1, 21: 1, 29: 1, 17: 1, 8: 1, 6: 1}, 'cat': {879: 1, 1075: 1, 799: 1, 1260: 1, 1323: 1, 1261: 1, 1166: 1, 1299: 1, 1025: 1, 1359: 1, 1264: 1, 819: 1, 824: 1, 1211: 1, 1339: 1, 1313: 1, 1494: 1, 1010: 1, 1035: 1, 913: 1, 1368: 1, 1129: 1, 1479: 1, 973: 1, 1226: 1, 1282: 1, 1249: 1, 1024: 1, 1455: 1, 1445: 1, 890: 1, 1273: 1, 1326: 1, 820: 1, 1454: 1, 1433: 1, 1154: 1, 1017: 1, 1156: 1, 1195: 1, 1160: 1, 1019: 1, 1389: 1, 1065: 1, 1289: 1, 1189: 1, 1409: 1, 1214: 1, 792: 1, 1011: 1, 811: 1, 1205: 1, 1252: 1, 1043: 1, 1343: 1, 870: 1, 1152: 1, 1243: 1, 1274: 1, 1356: 1, 1464: 1, 1322: 1, 999: 1, 1076: 1, 1295: 1, 768: 1, 1045: 1, 786: 1, 1449: 1, 1051: 1, 1163: 1, 1: 2, 1228: 1, 1281: 1, 1145: 1, 1196: 1, 1247: 1, 994: 1, 1324: 1, 1379: 1, 1215: 1, 1153: 1, 1127: 1, 1330: 1, 1241: 1, 908: 1, 11: 2, 1311: 1, 1460: 1, 1404: 1, 1238: 1, 978: 1, 1413: 1, 1382: 1, 1457: 1, 1125: 1, 1431: 1, 1089: 1, 1164: 1, 765: 1, 1316: 1, 1262: 1, 885: 1, 945: 1, 812: 1, 1418: 1, 1400: 1, 845: 1, 788: 1, 1458: 1, 1242: 1, 1172: 1, 1353: 1, 938: 1, 931: 1, 756: 1, 1293: 1, 778: 1, 1471: 1, 1351: 1, 1000: 1, 936: 1, 1475: 1, 769: 1, 1336: 1, 962: 1, 906: 1, 798: 1, 761: 1, 699: 1, 1372: 1, 1110: 1, 554: 1, 956: 1, 855: 1, 1135: 1, 671: 1, 1170: 1, 840: 1, 1383: 1, 1297: 1, 780: 1, 1203: 1, 630: 1, 656: 1, 1193: 1, 1194: 1, 676: 1, 806: 1, 430: 1, 829: 1, 746: 1, 1049: 1, 1126: 1, 697: 1, 1037: 1, 1334: 1, 1327: 1, 514: 1, 800: 1, 731: 1, 802: 1, 1360: 1, 1150: 1, 1384: 1, 745: 1, 1103: 1, 1093: 1, 710: 1, 831: 1, 622: 1, 1232: 1, 1200: 1, 1461: 1, 1472: 1, 1308: 1, 1027: 1, 1044: 1, 1190: 1, 1141: 1, 1426: 1, 714: 1, 1469: 1, 1090: 1, 884: 1, 1038: 1, 1342: 1, 1265: 1, 775: 1, 1410: 1, 1092: 1, 1280: 1, 1278: 1, 1425: 1, 1270: 1, 869: 1, 773: 1, 1332: 1, 1393: 1, 1022: 1, 926: 1, 1258: 1, 1378: 1, 521: 1, 450: 1, 957: 1, 1318: 1, 958: 1, 715: 1, 1223: 1, 677: 1, 790: 1, 716: 1, 1266: 1, 1440: 1, 1016: 1, 1487: 1, 439: 1, 941: 1, 712: 1, 981: 1, 380: 1, 379: 1, 396: 1, 1257: 1, 752: 1, 738: 1, 1402: 1, 607: 1, 801: 1, 608: 1, 1031: 1, 1139: 1, 893: 1, 1086: 1, 1149: 1, 1489: 1, 1465: 1, 846: 1, 478: 1, 866: 1, 662: 1, 1392: 1, 741: 1, 1364: 1, 705: 1, 993: 1, 1391: 1, 1064: 1, 538: 1, 1423: 1, 670: 1, 916: 1, 436: 1, 684: 1, 744: 1, 493: 1, 1101: 1, 729: 1, 1174: 1, 338: 1, 836: 1, 1005: 1, 399: 1, 698: 1, 696: 1, 1224: 1, 971: 1, 568: 1, 1210: 1, 329: 1, 804: 1, 652: 1, 1486: 1, 718: 1, 702: 1, 858: 1, 392: 1, 531: 1, 995: 1, 929: 1, 830: 1, 492: 1, 864: 1, 644: 1, 441: 1, 720: 1, 1207: 1, 534: 1, 372: 1, 1473: 1, 1451: 1, 719: 1, 1046: 1, 385: 1, 672: 1, 1229: 1, 394: 1, 1408: 1, 635: 1, 1148: 1, 947: 1, 561: 1, 955: 1, 463: 1, 319: 1, 1032: 1, 1191: 1, 318: 1, 585: 1, 422: 1, 736: 1, 281: 1, 673: 1, 292: 1, 937: 1, 747: 1, 374: 1, 972: 1, 633: 1, 569: 1, 597: 1, 314: 1, 445: 1, 164: 1, 500: 1, 532: 1, 658: 1, 473: 1, 1060: 1, 598: 1, 742: 1, 502: 1, 482: 1, 290: 1, 550: 1, 604: 1, 442: 1, 533: 1, 733: 1, 703: 1, 974: 1, 296: 1, 520: 1, 1248: 1, 1033: 1, 688: 1, 976: 1, 722: 1, 209: 1, 692: 1, 613: 1, 530: 1, 1230: 1, 888: 1, 1375: 1, 717: 1, 509: 1, 515: 1, 700: 1, 1105: 1, 1366: 1, 159: 1, 1371: 1, 499: 1, 334: 1, 654: 1, 470: 1, 440: 1, 686: 1, 486: 1, 294: 1, 451: 1, 540: 1, 217: 1, 322: 1, 505: 1, 311: 1, 917: 1, 559: 1, 755: 1, 456: 1, 443: 1, 331: 1, 1131: 1, 249: 1, 352: 1, 438: 1, 1208: 1, 199: 1, 160: 1, 1202: 1, 479: 1, 546: 1, 102: 1, 382: 1, 187: 1, 428: 1, 427: 1, 285: 1, 227: 1, 260: 1, 628: 1, 491: 1, 369: 1, 359: 1, 240: 1, 552: 1, 349: 1, 363: 1, 220: 1, 687: 1, 578: 1, 257: 1, 600: 1, 286: 1, 307: 1, 465: 1, 147: 1, 425: 1, 529: 1, 935: 1, 619: 1, 156: 1, 275: 1, 207: 1, 219: 1, 464: 1, 287: 1, 458: 1, 625: 1, 791: 1, 253: 1, 335: 1, 312: 1, 553: 1, 614: 1, 118: 1, 403: 1, 232: 1, 130: 1, 306: 1, 603: 1, 213: 1, 301: 1, 557: 1, 140: 1, 211: 1, 230: 1, 142: 1, 117: 1, 94: 1, 93: 1, 618: 1, 178: 1, 58: 1, 228: 1, 123: 1, 272: 1, 242: 1, 233: 1, 243: 1, 64: 1, 193: 1, 177: 1, 204: 1, 447: 1, 185: 1, 63: 1, 151: 1, 77: 1, 171: 1, 555: 1, 192: 1, 120: 1, 119: 1, 280: 1, 110: 1, 122: 1, 95: 1, 74: 1, 116: 1, 39: 1, 139: 1, 278: 1, 124: 1, 223: 1, 28: 1, 107: 1, 91: 1, 251: 1, 202: 1, 73: 1, 336: 1, 46: 1, 169: 1, 175: 1, 136: 1, 87: 1, 101: 1, 167: 1, 67: 1, 15: 1, 201: 1, 76: 1, 55: 1, 45: 1, 125: 1, 50: 1, 56: 1, 37: 1, 60: 1, 33: 1, 61: 1, 36: 1, 100: 1, 49: 1, 12: 1, 10: 1, 35: 1, 30: 1, 14: 1, 4: 1}}
Matched classes:
{'wild': 2, 'cat': 1, 'dog': 1301}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1491
Length of x: 1500
{2: 0, 1301: 1, 1: 2}
{2: 0, 1301: 1, 1: 2}
Final accuracy on train dataset:    0.0033333333333333335
Final accuracy on val dataset:      0.0

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=9.053691275167786, n_clusters=None)
All classes:
{'wild': {1306: 1, 1442: 1, 1078: 1, 1178: 1, 1029: 1, 787: 1, 1071: 1, 1217: 1, 1263: 1, 953: 1, 1109: 1, 847: 1, 1162: 1, 1376: 1, 1268: 1, 889: 1, 1361: 1, 1419: 1, 1117: 1, 996: 1, 1183: 1, 794: 1, 1399: 1, 1222: 1, 934: 1, 897: 1, 1143: 1, 1218: 1, 1340: 1, 970: 1, 1213: 1, 808: 1, 1290: 1, 1309: 1, 23: 2, 1346: 1, 1417: 1, 762: 1, 1123: 1, 1231: 1, 909: 1, 1235: 1, 1424: 1, 1335: 1, 1428: 1, 15: 2, 1082: 1, 965: 1, 1394: 1, 1362: 1, 1354: 1, 924: 1, 1177: 1, 1097: 1, 1085: 1, 943: 1, 1285: 1, 975: 1, 1369: 1, 1373: 1, 1204: 1, 1080: 1, 1287: 1, 1396: 1, 987: 1, 1034: 1, 1414: 1, 1069: 1, 1057: 1, 1168: 1, 1303: 1, 1165: 1, 1176: 1, 910: 1, 1310: 1, 1040: 1, 991: 1, 1300: 1, 825: 1, 1021: 1, 1003: 1, 1312: 1, 1106: 1, 1108: 1, 1113: 1, 650: 1, 466: 1, 1059: 1, 1386: 1, 1411: 1, 41: 2, 1198: 1, 1157: 1, 1277: 1, 834: 1, 1407: 1, 1054: 1, 1026: 1, 1047: 1, 1181: 1, 5: 2, 1296: 1, 1179: 1, 1236: 1, 813: 1, 1201: 1, 952: 1, 1438: 1, 989: 1, 823: 1, 985: 1, 1159: 1, 83: 3, 964: 1, 1367: 1, 1319: 1, 1227: 1, 1192: 1, 1422: 1, 1435: 1, 1050: 1, 1216: 1, 162: 2, 1072: 1, 923: 1, 498: 1, 738: 1, 1077: 1, 1385: 1, 1388: 1, 1390: 1, 1320: 1, 1015: 1, 1013: 1, 1276: 1, 1294: 1, 1041: 1, 1374: 1, 904: 1, 1416: 1, 655: 1, 740: 1, 745: 1, 920: 1, 1140: 1, 1352: 1, 750: 1, 772: 1, 1430: 1, 20: 2, 1397: 1, 1363: 1, 757: 1, 1164: 1, 42: 2, 1325: 1, 43: 2, 1292: 1, 1284: 1, 898: 1, 1122: 1, 472: 1, 661: 1, 1329: 1, 882: 1, 1441: 1, 1180: 1, 637: 1, 1333: 1, 1267: 1, 795: 1, 701: 1, 777: 1, 1004: 1, 785: 1, 1321: 1, 1206: 1, 1401: 1, 966: 1, 1434: 1, 1182: 1, 1357: 1, 1212: 1, 1429: 1, 1244: 1, 1187: 1, 1104: 1, 49: 2, 1220: 1, 1331: 1, 1155: 1, 641: 1, 1341: 1, 1114: 1, 647: 1, 4: 2, 77: 2, 781: 1, 17: 3, 900: 1, 1348: 1, 764: 1, 1304: 1, 844: 1, 1102: 1, 1446: 1, 10: 2, 763: 1, 1387: 1, 1020: 1, 6: 2, 807: 1, 1298: 1, 1169: 1, 982: 1, 675: 1, 1259: 1, 1398: 1, 1001: 1, 449: 1, 1036: 1, 803: 1, 1338: 1, 560: 1, 634: 1, 1134: 1, 1018: 1, 1328: 1, 860: 1, 1350: 1, 986: 1, 928: 1, 828: 1, 968: 1, 416: 1, 1151: 1, 1377: 1, 610: 1, 599: 1, 642: 1, 541: 1, 542: 1, 1167: 1, 1063: 1, 874: 1, 1272: 1, 606: 1, 927: 1, 1147: 1, 963: 1, 592: 1, 805: 1, 1256: 1, 665: 1, 709: 1, 320: 1, 330: 1, 676: 1, 537: 1, 886: 1, 446: 1, 919: 1, 640: 1, 586: 1, 605: 1, 576: 1, 850: 1, 483: 1, 711: 1, 412: 1, 631: 1, 797: 1, 350: 1, 400: 1, 856: 1, 535: 1, 842: 1, 1317: 1, 992: 1, 960: 1, 536: 1, 543: 1, 513: 1, 593: 1, 1042: 1, 680: 1, 629: 1, 587: 1, 420: 1, 1380: 1, 663: 1, 381: 1, 434: 1, 639: 1, 9: 3, 337: 1, 324: 1, 1068: 1, 1112: 1, 652: 1, 668: 1, 518: 1, 489: 1, 984: 1, 353: 1, 594: 1, 497: 1, 632: 1, 476: 1, 411: 1, 444: 1, 620: 1, 1427: 1, 410: 1, 1315: 1, 595: 1, 346: 1, 689: 1, 690: 1, 317: 1, 35: 2, 1096: 1, 743: 1, 1144: 1, 1239: 1, 462: 1, 575: 1, 646: 1, 1115: 1, 205: 1, 457: 1, 36: 2, 484: 1, 1100: 1, 364: 1, 485: 1, 623: 1, 315: 1, 1444: 1, 526: 1, 383: 1, 354: 1, 816: 1, 226: 1, 481: 1, 19: 2, 316: 1, 258: 1, 523: 1, 358: 1, 556: 1, 342: 1, 323: 1, 1118: 1, 488: 1, 423: 1, 474: 1, 565: 1, 391: 1, 266: 1, 265: 1, 627: 1, 327: 1, 1098: 1, 332: 1, 572: 1, 571: 1, 305: 1, 345: 1, 236: 1, 225: 1, 835: 1, 721: 1, 238: 1, 348: 1, 539: 1, 214: 1, 896: 1, 289: 1, 1: 2, 566: 1, 426: 1, 377: 1, 351: 1, 312: 2, 1058: 1, 160: 1, 713: 1, 313: 1, 491: 1, 545: 1, 402: 1, 528: 1, 198: 1, 259: 1, 356: 1, 133: 1, 190: 1, 221: 1, 234: 1, 157: 1, 506: 1, 262: 1, 290: 1, 626: 1, 1008: 1, 298: 1, 263: 1, 24: 2, 129: 1, 78: 1, 297: 1, 309: 1, 424: 1, 244: 1, 547: 1, 304: 1, 682: 1, 269: 1, 220: 1, 600: 1, 368: 1, 448: 1, 264: 1, 132: 1, 239: 1, 134: 1, 279: 1, 369: 1, 288: 1, 172: 1, 106: 1, 558: 1, 271: 1, 143: 1, 222: 1, 154: 1, 183: 1, 276: 1, 215: 1, 109: 1, 182: 1, 145: 1, 57: 1, 274: 1, 229: 1, 121: 1, 503: 1, 138: 1, 65: 1, 51: 1, 90: 1, 341: 1, 168: 1, 108: 1, 284: 1, 141: 1, 56: 1, 335: 1, 54: 1, 170: 1, 81: 1, 167: 1, 72: 1, 33: 1, 37: 1, 31: 1, 125: 1, 97: 1, 47: 1, 28: 1, 100: 1, 142: 1}, 'dog': {1301: 1, 1415: 1, 793: 1, 939: 1, 1233: 1, 1053: 1, 1116: 1, 1291: 1, 1403: 1, 731: 1, 1314: 1, 1283: 1, 1237: 1, 891: 1, 810: 1, 867: 1, 1175: 1, 843: 1, 946: 1, 1061: 1, 1221: 1, 876: 1, 1395: 1, 979: 1, 771: 1, 1099: 1, 1219: 1, 951: 1, 871: 1, 997: 1, 1355: 1, 776: 1, 959: 1, 980: 1, 1288: 1, 1253: 1, 853: 1, 933: 1, 861: 1, 727: 1, 1185: 1, 1245: 1, 741: 1, 1023: 1, 1055: 1, 1130: 1, 1074: 1, 1137: 1, 1344: 1, 779: 1, 1421: 1, 1302: 1, 895: 1, 839: 1, 872: 1, 967: 1, 905: 1, 901: 1, 1405: 1, 1286: 1, 921: 1, 1381: 1, 749: 1, 1132: 1, 1084: 1, 1225: 1, 990: 1, 636: 1, 902: 1, 1254: 1, 940: 1, 1062: 1, 1246: 1, 1234: 1, 0: 2, 914: 1, 918: 1, 1111: 1, 1121: 1, 1030: 1, 809: 1, 1199: 1, 1087: 1, 949: 1, 766: 1, 998: 1, 1365: 1, 903: 1, 1337: 1, 942: 1, 841: 1, 838: 1, 1269: 1, 849: 1, 748: 1, 1370: 1, 669: 1, 1128: 1, 868: 1, 961: 1, 862: 1, 912: 1, 1255: 1, 1349: 1, 1271: 1, 1007: 1, 915: 1, 848: 1, 932: 1, 814: 1, 1439: 1, 767: 1, 925: 1, 760: 1, 881: 1, 880: 1, 1171: 1, 1347: 1, 649: 1, 694: 1, 821: 1, 1275: 1, 875: 1, 1138: 1, 883: 1, 899: 1, 1432: 1, 724: 1, 1095: 1, 818: 1, 1158: 1, 475: 1, 728: 1, 1091: 1, 1436: 1, 70: 2, 1437: 1, 1136: 1, 1412: 1, 726: 1, 659: 1, 894: 1, 759: 1, 863: 1, 567: 1, 1088: 1, 1056: 1, 1079: 1, 433: 1, 1133: 1, 579: 1, 1119: 1, 612: 1, 878: 1, 873: 1, 832: 1, 1279: 1, 907: 1, 1012: 1, 969: 1, 751: 1, 1083: 1, 758: 1, 588: 1, 511: 1, 944: 1, 859: 1, 609: 1, 667: 1, 1186: 1, 706: 1, 983: 1, 833: 1, 1406: 1, 664: 1, 948: 1, 421: 1, 1073: 1, 435: 1, 1358: 1, 563: 1, 977: 1, 678: 1, 651: 1, 494: 1, 723: 1, 1142: 1, 577: 1, 911: 1, 1048: 1, 851: 1, 1173: 1, 437: 1, 1209: 1, 1307: 1, 638: 1, 742: 1, 1120: 1, 988: 1, 857: 1, 643: 1, 854: 1, 733: 1, 574: 1, 1345: 1, 601: 1, 1107: 1, 1070: 1, 737: 1, 1420: 1, 683: 1, 660: 1, 551: 1, 1081: 1, 490: 1, 826: 1, 892: 1, 508: 1, 453: 1, 1188: 1, 1039: 1, 707: 1, 409: 1, 679: 1, 589: 1, 693: 1, 582: 1, 783: 1, 852: 1, 617: 1, 1006: 1, 877: 1, 611: 1, 789: 1, 1124: 1, 817: 1, 584: 1, 602: 1, 708: 1, 732: 1, 300: 1, 815: 1, 1028: 1, 695: 1, 414: 1, 922: 1, 564: 1, 954: 1, 796: 1, 1067: 1, 950: 1, 1146: 1, 455: 1, 1094: 1, 224: 1, 822: 1, 496: 1, 753: 1, 1250: 1, 454: 1, 519: 1, 401: 1, 429: 1, 268: 1, 419: 1, 1002: 1, 246: 1, 596: 1, 887: 1, 1066: 1, 367: 1, 782: 1, 477: 1, 363: 1, 681: 1, 730: 1, 387: 1, 827: 1, 413: 1, 1197: 1, 562: 1, 590: 1, 1184: 1, 347: 1, 468: 1, 544: 1, 1009: 1, 512: 1, 666: 1, 452: 1, 774: 1, 237: 1, 283: 1, 393: 1, 1443: 1, 784: 1, 333: 1, 754: 1, 691: 1, 510: 1, 471: 1, 376: 1, 648: 1, 270: 1, 355: 1, 517: 1, 408: 1, 524: 1, 158: 1, 591: 1, 501: 1, 1161: 1, 770: 1, 235: 1, 375: 1, 206: 1, 1052: 1, 295: 1, 293: 1, 378: 1, 685: 1, 267: 1, 361: 1, 370: 1, 398: 1, 837: 1, 302: 1, 684: 1, 657: 1, 549: 1, 357: 1, 704: 1, 580: 1, 459: 1, 146: 1, 303: 1, 321: 1, 397: 1, 384: 1, 583: 1, 615: 1, 621: 1, 1240: 1, 570: 1, 373: 1, 516: 1, 388: 1, 461: 1, 507: 1, 248: 1, 186: 1, 930: 1, 469: 1, 1014: 1, 389: 1, 522: 1, 390: 1, 394: 1, 250: 1, 525: 1, 195: 1, 460: 1, 241: 1, 365: 1, 658: 1, 261: 1, 188: 1, 282: 1, 406: 1, 653: 1, 256: 1, 252: 1, 495: 1, 255: 1, 527: 1, 212: 1, 174: 1, 371: 1, 467: 1, 344: 1, 360: 1, 734: 1, 166: 1, 328: 1, 148: 1, 418: 1, 407: 1, 417: 1, 395: 1, 480: 1, 247: 1, 254: 1, 865: 1, 208: 1, 189: 1, 487: 1, 191: 1, 339: 1, 161: 1, 386: 1, 200: 1, 291: 1, 624: 1, 105: 1, 299: 1, 179: 1, 310: 1, 366: 1, 210: 1, 128: 1, 131: 1, 331: 1, 431: 1, 218: 1, 432: 1, 325: 1, 362: 1, 173: 1, 104: 1, 197: 1, 548: 1, 196: 1, 165: 1, 194: 1, 163: 1, 152: 1, 308: 1, 207: 1, 135: 1, 811: 1, 216: 1, 103: 1, 404: 1, 326: 1, 231: 1, 86: 1, 66: 1, 115: 1, 180: 1, 277: 1, 203: 1, 92: 1, 82: 1, 63: 1, 171: 1, 75: 1, 89: 1, 111: 1, 52: 1, 69: 1, 340: 1, 273: 1, 59: 1, 230: 1, 137: 1, 113: 1, 2: 2, 85: 1, 178: 1, 307: 1, 112: 1, 88: 1, 126: 1, 53: 1, 98: 1, 44: 1, 96: 1, 45: 1, 144: 1, 176: 1, 60: 1, 150: 1, 73: 1, 55: 1}, 'cat': {879: 1, 1075: 1, 799: 1, 1260: 1, 1323: 1, 1261: 1, 1166: 1, 1299: 1, 1025: 1, 1359: 1, 1264: 1, 819: 1, 824: 1, 1211: 1, 1339: 1, 1313: 1, 7: 3, 1010: 1, 1035: 1, 913: 1, 1368: 1, 1129: 1, 739: 1, 973: 1, 1226: 1, 1282: 1, 1249: 1, 1024: 1, 18: 2, 1445: 1, 890: 1, 1273: 1, 1326: 1, 820: 1, 8: 2, 1433: 1, 1154: 1, 1017: 1, 1156: 1, 1195: 1, 1160: 1, 1019: 1, 1389: 1, 1065: 1, 1289: 1, 1189: 1, 1409: 1, 1214: 1, 792: 1, 1011: 1, 1205: 1, 1252: 1, 1043: 1, 1343: 1, 870: 1, 1152: 1, 1243: 1, 1274: 1, 1356: 1, 38: 2, 1322: 1, 999: 1, 1076: 1, 1295: 1, 768: 1, 1045: 1, 786: 1, 3: 2, 1051: 1, 1163: 1, 87: 2, 1228: 1, 1281: 1, 1145: 1, 1196: 1, 1247: 1, 994: 1, 1324: 1, 1379: 1, 1215: 1, 1153: 1, 1127: 1, 1330: 1, 1241: 1, 908: 1, 48: 2, 1311: 1, 16: 2, 1404: 1, 1238: 1, 978: 1, 1413: 1, 1382: 1, 21: 2, 1125: 1, 1431: 1, 1089: 1, 765: 1, 1316: 1, 1262: 1, 885: 1, 945: 1, 812: 1, 1418: 1, 1400: 1, 845: 1, 788: 1, 1242: 1, 1172: 1, 938: 1, 931: 1, 756: 1, 1293: 1, 778: 1, 40: 2, 1351: 1, 1000: 1, 936: 1, 155: 2, 769: 1, 1336: 1, 962: 1, 906: 1, 798: 1, 761: 1, 699: 1, 1372: 1, 1110: 1, 554: 1, 956: 1, 855: 1, 1135: 1, 671: 1, 1170: 1, 840: 1, 1383: 1, 1297: 1, 780: 1, 1203: 1, 630: 1, 656: 1, 1193: 1, 1194: 1, 1353: 1, 806: 1, 430: 1, 829: 1, 746: 1, 1049: 1, 1126: 1, 697: 1, 1037: 1, 1334: 1, 1327: 1, 514: 1, 800: 1, 39: 2, 802: 1, 1360: 1, 1150: 1, 1384: 1, 27: 2, 1103: 1, 1093: 1, 710: 1, 831: 1, 622: 1, 1232: 1, 1200: 1, 11: 3, 735: 1, 1308: 1, 1027: 1, 1044: 1, 1190: 1, 1141: 1, 1426: 1, 714: 1, 14: 3, 1090: 1, 1038: 1, 1342: 1, 1265: 1, 775: 1, 1410: 1, 1092: 1, 1280: 1, 1278: 1, 1425: 1, 1270: 1, 869: 1, 773: 1, 1332: 1, 1393: 1, 1022: 1, 926: 1, 1258: 1, 1378: 1, 521: 1, 450: 1, 957: 1, 1318: 1, 958: 1, 715: 1, 1223: 1, 677: 1, 716: 1, 1266: 1, 1440: 1, 1016: 1, 29: 2, 439: 1, 941: 1, 712: 1, 981: 1, 380: 1, 379: 1, 396: 1, 1257: 1, 752: 1, 26: 2, 1402: 1, 607: 1, 801: 1, 608: 1, 1031: 1, 1139: 1, 893: 1, 1086: 1, 1149: 1, 12: 2, 846: 1, 478: 1, 866: 1, 662: 1, 1392: 1, 74: 2, 1364: 1, 993: 1, 1391: 1, 1064: 1, 538: 1, 1423: 1, 670: 1, 916: 1, 436: 1, 744: 1, 493: 1, 1101: 1, 729: 1, 1174: 1, 338: 1, 836: 1, 1005: 1, 399: 1, 698: 1, 696: 1, 1224: 1, 971: 1, 568: 1, 1210: 1, 329: 1, 804: 1, 1305: 1, 13: 2, 718: 1, 702: 1, 858: 1, 392: 1, 531: 1, 995: 1, 929: 1, 830: 1, 492: 1, 864: 1, 644: 1, 884: 1, 720: 1, 534: 1, 372: 1, 736: 1, 725: 1, 719: 1, 1046: 1, 385: 1, 672: 1, 1229: 1, 790: 1, 1408: 1, 635: 1, 1148: 1, 947: 1, 561: 1, 955: 1, 463: 1, 319: 1, 1032: 1, 1191: 1, 318: 1, 585: 1, 422: 1, 80: 2, 281: 1, 673: 1, 292: 1, 937: 1, 747: 1, 374: 1, 972: 1, 633: 1, 569: 1, 597: 1, 314: 1, 445: 1, 164: 1, 500: 1, 532: 1, 473: 1, 1060: 1, 598: 1, 502: 1, 482: 1, 581: 1, 550: 1, 604: 1, 442: 1, 533: 1, 34: 2, 703: 1, 974: 1, 520: 1, 1248: 1, 1033: 1, 688: 1, 976: 1, 722: 1, 209: 1, 692: 1, 613: 1, 530: 1, 1230: 1, 888: 1, 1375: 1, 717: 1, 509: 1, 515: 1, 700: 1, 1105: 1, 1366: 1, 159: 1, 1371: 1, 499: 1, 334: 1, 654: 1, 470: 1, 440: 1, 686: 1, 486: 1, 294: 1, 451: 1, 540: 1, 217: 1, 645: 1, 505: 1, 917: 1, 559: 1, 755: 1, 456: 1, 443: 1, 1131: 1, 249: 1, 705: 1, 438: 1, 1208: 1, 199: 1, 322: 1, 479: 1, 546: 1, 102: 1, 382: 1, 187: 1, 428: 1, 427: 1, 285: 1, 227: 1, 260: 1, 628: 1, 359: 1, 240: 1, 552: 1, 349: 1, 181: 1, 441: 1, 687: 1, 578: 1, 257: 1, 1202: 1, 573: 1, 616: 1, 465: 1, 296: 1, 425: 1, 529: 1, 935: 1, 619: 1, 156: 1, 275: 1, 415: 1, 219: 1, 464: 1, 287: 1, 458: 1, 1251: 1, 791: 1, 253: 1, 625: 1, 553: 1, 614: 1, 118: 1, 403: 1, 232: 1, 130: 1, 306: 1, 1207: 1, 213: 1, 603: 1, 557: 1, 140: 1, 211: 1, 286: 1, 117: 1, 94: 1, 93: 1, 618: 1, 58: 1, 228: 1, 123: 1, 272: 1, 242: 1, 233: 1, 243: 1, 64: 1, 193: 1, 177: 1, 204: 1, 447: 1, 185: 1, 127: 1, 151: 1, 311: 1, 343: 1, 555: 1, 192: 1, 120: 1, 119: 1, 280: 1, 110: 1, 245: 1, 95: 1, 149: 1, 116: 1, 79: 1, 139: 1, 278: 1, 124: 1, 223: 1, 107: 1, 184: 1, 504: 1, 405: 1, 147: 1, 674: 1, 46: 1, 169: 1, 352: 1, 136: 1, 175: 1, 101: 1, 336: 1, 67: 1, 32: 1, 201: 1, 153: 1, 91: 1, 251: 1, 50: 1, 114: 1, 76: 1, 122: 1, 68: 1, 61: 1, 301: 1, 202: 1, 99: 1, 25: 1, 22: 1, 71: 1, 62: 1, 30: 1, 84: 1}}
Matched classes:
{'wild': 83, 'cat': 7, 'dog': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1436
Length of x: 1500
{83: 0, 0: 1, 7: 2}
{83: 0, 0: 1, 7: 2}
Final accuracy on train dataset:    0.005333333333333333
Final accuracy on val dataset:      0.0

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=11.067114093959733, n_clusters=None)
All classes:
{'wild': {83: 2, 138: 3, 1078: 1, 1178: 1, 1029: 1, 787: 1, 1071: 1, 22: 3, 6: 3, 953: 1, 1109: 1, 847: 1, 1162: 1, 69: 2, 40: 2, 889: 1, 184: 3, 51: 3, 1117: 1, 996: 1, 1183: 1, 794: 1, 699: 1, 11: 5, 934: 1, 897: 1, 1143: 1, 21: 2, 125: 2, 970: 1, 606: 1, 808: 1, 16: 3, 192: 2, 4: 3, 530: 2, 762: 1, 1123: 1, 57: 2, 909: 1, 617: 1, 73: 4, 106: 2, 114: 4, 528: 2, 1082: 1, 965: 1, 263: 2, 680: 1, 126: 4, 924: 1, 1177: 1, 1097: 1, 1085: 1, 943: 1, 34: 2, 975: 1, 215: 2, 234: 3, 1204: 1, 1080: 1, 222: 2, 251: 2, 987: 1, 1034: 1, 164: 3, 1069: 1, 1057: 1, 1168: 1, 94: 2, 1165: 1, 1176: 1, 910: 1, 157: 4, 1040: 1, 991: 1, 649: 1, 825: 1, 1021: 1, 147: 2, 1106: 1, 1108: 1, 1113: 1, 466: 1, 1059: 1, 72: 3, 120: 2, 1198: 1, 1157: 1, 834: 1, 428: 3, 1054: 1, 1026: 1, 1047: 1, 1181: 1, 200: 2, 87: 2, 1179: 1, 15: 2, 1201: 1, 952: 1, 368: 2, 989: 1, 823: 1, 985: 1, 65: 6, 964: 1, 70: 2, 112: 2, 613: 1, 1192: 1, 158: 3, 213: 3, 1050: 1, 607: 1, 1072: 1, 923: 1, 498: 1, 738: 1, 1077: 1, 692: 1, 132: 2, 1015: 1, 1013: 1, 198: 2, 1041: 1, 315: 2, 904: 1, 68: 4, 745: 1, 920: 1, 1140: 1, 145: 2, 750: 1, 31: 3, 122: 3, 277: 3, 681: 1, 757: 1, 1164: 1, 139: 4, 32: 2, 898: 1, 1122: 1, 472: 1, 661: 1, 81: 2, 109: 3, 1180: 1, 48: 2, 795: 1, 149: 2, 777: 1, 1004: 1, 785: 1, 1206: 1, 700: 1, 150: 3, 1182: 1, 23: 5, 404: 3, 621: 1, 1187: 1, 1104: 1, 199: 2, 304: 1, 665: 1, 1155: 1, 320: 1, 107: 2, 1114: 1, 12: 3, 781: 1, 900: 1, 336: 1, 764: 1, 651: 1, 844: 1, 1102: 1, 763: 1, 56: 2, 807: 1, 648: 1, 1169: 1, 982: 1, 675: 1, 629: 1, 1001: 1, 1036: 1, 803: 1, 117: 2, 560: 1, 52: 2, 1134: 1, 1018: 1, 67: 2, 986: 1, 968: 1, 416: 1, 1151: 1, 688: 1, 5: 2, 599: 1, 156: 2, 541: 1, 542: 1, 1167: 1, 1063: 1, 874: 1, 3: 2, 927: 1, 1147: 1, 963: 1, 592: 1, 805: 1, 66: 2, 179: 2, 537: 1, 886: 1, 446: 1, 919: 1, 1174: 1, 605: 1, 576: 1, 483: 1, 412: 1, 469: 2, 801: 1, 856: 1, 115: 2, 992: 1, 960: 1, 536: 1, 543: 1, 513: 1, 593: 1, 1042: 1, 292: 2, 630: 1, 842: 1, 663: 1, 381: 1, 159: 1, 82: 3, 337: 1, 240: 2, 1068: 1, 652: 1, 45: 3, 518: 1, 353: 1, 1190: 1, 497: 1, 411: 1, 620: 1, 410: 1, 61: 2, 595: 1, 346: 1, 689: 1, 91: 4, 33: 2, 1096: 1, 1144: 1, 926: 1, 575: 1, 1115: 1, 457: 1, 484: 1, 1100: 1, 364: 1, 485: 1, 631: 1, 242: 2, 526: 1, 383: 1, 398: 2, 226: 1, 481: 1, 30: 2, 258: 1, 523: 1, 342: 1, 155: 2, 1118: 1, 978: 1, 423: 1, 474: 1, 565: 1, 266: 1, 327: 1, 1098: 1, 332: 1, 571: 1, 236: 1, 451: 1, 835: 1, 238: 1, 698: 1, 429: 1, 896: 1, 579: 1, 566: 1, 426: 1, 755: 1, 93: 4, 1058: 1, 160: 1, 713: 1, 35: 2, 984: 1, 806: 1, 397: 1, 259: 1, 356: 1, 267: 1, 190: 1, 470: 1, 506: 1, 262: 1, 290: 1, 298: 1, 316: 1, 309: 1, 850: 1, 489: 1, 547: 1, 539: 1, 600: 1, 448: 1, 531: 1, 479: 1, 269: 1, 279: 1, 740: 1, 288: 1, 558: 1, 271: 1, 143: 1, 44: 2, 737: 1, 553: 1, 431: 1, 182: 1, 464: 1, 274: 1, 278: 1, 265: 1, 210: 1, 284: 1, 141: 1, 229: 1, 167: 1, 440: 1, 168: 1, 586: 1, 135: 1, 76: 1, 129: 1, 385: 1, 463: 1, 202: 1}, 'dog': {650: 1, 707: 1, 793: 1, 939: 1, 38: 2, 1053: 1, 1116: 1, 645: 1, 701: 1, 731: 1, 656: 1, 641: 1, 618: 1, 891: 1, 810: 1, 867: 1, 1175: 1, 843: 1, 946: 1, 1061: 1, 610: 1, 876: 1, 697: 1, 979: 1, 771: 1, 1099: 1, 609: 1, 951: 1, 871: 1, 997: 1, 677: 1, 776: 1, 959: 1, 980: 1, 243: 2, 626: 1, 853: 1, 933: 1, 861: 1, 727: 1, 1185: 1, 59: 2, 741: 1, 1023: 1, 1055: 1, 1130: 1, 1074: 1, 1137: 1, 671: 1, 779: 1, 710: 1, 37: 2, 895: 1, 839: 1, 872: 1, 967: 1, 905: 1, 901: 1, 702: 1, 642: 1, 921: 1, 690: 1, 749: 1, 1132: 1, 1084: 1, 26: 2, 990: 1, 636: 1, 902: 1, 17: 2, 1062: 1, 622: 1, 616: 1, 314: 2, 914: 1, 918: 1, 1111: 1, 1121: 1, 1030: 1, 809: 1, 1199: 1, 1087: 1, 949: 1, 766: 1, 998: 1, 682: 1, 903: 1, 668: 1, 942: 1, 841: 1, 838: 1, 634: 1, 849: 1, 748: 1, 684: 1, 669: 1, 1128: 1, 868: 1, 961: 1, 862: 1, 912: 1, 627: 1, 674: 1, 635: 1, 1007: 1, 915: 1, 848: 1, 932: 1, 814: 1, 719: 1, 767: 1, 925: 1, 760: 1, 881: 1, 880: 1, 1171: 1, 673: 1, 324: 1, 694: 1, 821: 1, 637: 1, 875: 1, 1138: 1, 883: 1, 899: 1, 357: 1, 724: 1, 1095: 1, 818: 1, 1158: 1, 475: 1, 728: 1, 1091: 1, 717: 1, 108: 3, 718: 1, 1136: 1, 705: 1, 726: 1, 659: 1, 894: 1, 759: 1, 863: 1, 567: 1, 1088: 1, 1056: 1, 1079: 1, 433: 1, 1133: 1, 1159: 1, 1119: 1, 612: 1, 878: 1, 873: 1, 832: 1, 639: 1, 907: 1, 1012: 1, 969: 1, 751: 1, 1083: 1, 758: 1, 588: 1, 511: 1, 944: 1, 859: 1, 2: 2, 667: 1, 1186: 1, 706: 1, 983: 1, 833: 1, 350: 1, 664: 1, 948: 1, 421: 1, 1073: 1, 435: 1, 678: 1, 563: 1, 977: 1, 338: 1, 19: 5, 494: 1, 723: 1, 1142: 1, 577: 1, 911: 1, 1048: 1, 851: 1, 1173: 1, 437: 1, 1209: 1, 653: 1, 638: 1, 742: 1, 1120: 1, 988: 1, 857: 1, 643: 1, 854: 1, 733: 1, 574: 1, 672: 1, 601: 1, 1107: 1, 1070: 1, 709: 1, 683: 1, 660: 1, 551: 1, 1081: 1, 490: 1, 826: 1, 892: 1, 508: 1, 453: 1, 1188: 1, 1039: 1, 409: 1, 339: 1, 589: 1, 693: 1, 582: 1, 783: 1, 852: 1, 308: 1, 1006: 1, 877: 1, 305: 1, 789: 1, 1124: 1, 817: 1, 584: 1, 602: 1, 708: 1, 732: 1, 300: 1, 815: 1, 1028: 1, 695: 1, 922: 1, 564: 1, 954: 1, 796: 1, 1067: 1, 950: 1, 1146: 1, 455: 1, 1094: 1, 449: 1, 822: 1, 496: 1, 753: 1, 77: 2, 454: 1, 519: 1, 401: 1, 860: 1, 268: 1, 419: 1, 1002: 1, 246: 1, 596: 1, 887: 1, 1066: 1, 367: 1, 782: 1, 477: 1, 363: 1, 340: 1, 730: 1, 387: 1, 827: 1, 828: 1, 1197: 1, 562: 1, 590: 1, 1184: 1, 696: 1, 468: 1, 544: 1, 1009: 1, 512: 1, 666: 1, 452: 1, 774: 1, 476: 1, 283: 1, 788: 1, 721: 1, 784: 1, 333: 1, 754: 1, 1022: 1, 471: 1, 376: 1, 323: 1, 270: 1, 355: 1, 517: 1, 408: 1, 524: 1, 318: 1, 1003: 1, 1161: 1, 770: 1, 235: 1, 375: 1, 413: 1, 1052: 1, 591: 1, 378: 1, 685: 1, 535: 1, 361: 1, 370: 1, 797: 1, 837: 1, 302: 1, 341: 1, 657: 1, 549: 1, 704: 1, 580: 1, 459: 1, 587: 1, 608: 1, 321: 1, 384: 1, 583: 1, 615: 1, 310: 1, 619: 1, 570: 1, 747: 1, 516: 1, 388: 1, 461: 1, 1016: 1, 248: 1, 373: 1, 930: 1, 940: 1, 1014: 1, 389: 1, 522: 1, 390: 1, 394: 1, 501: 1, 525: 1, 391: 1, 460: 1, 241: 1, 365: 1, 658: 1, 261: 1, 756: 1, 282: 1, 813: 1, 326: 1, 256: 1, 252: 1, 495: 1, 255: 1, 527: 1, 212: 1, 349: 1, 743: 1, 935: 1, 344: 1, 734: 1, 334: 1, 328: 1, 297: 1, 418: 1, 816: 1, 417: 1, 791: 1, 480: 1, 247: 1, 509: 1, 865: 1, 208: 1, 380: 1, 487: 1, 191: 1, 169: 1, 161: 1, 773: 1, 402: 1, 291: 1, 311: 1, 211: 1, 299: 1, 359: 1, 154: 1, 366: 1, 422: 1, 128: 1, 529: 1, 331: 1, 864: 1, 218: 1, 432: 1, 325: 1, 362: 1, 347: 1, 420: 1, 792: 1, 548: 1, 393: 1, 165: 1, 194: 1, 163: 1, 28: 2, 29: 2, 415: 1, 272: 1, 811: 1, 434: 1, 207: 1, 162: 1, 928: 1, 348: 1, 133: 1, 232: 1, 180: 1, 556: 1, 407: 1, 185: 1, 166: 1, 127: 1, 171: 1, 151: 1, 360: 1, 447: 1, 105: 1, 280: 1, 482: 1, 462: 1, 276: 1, 227: 1, 504: 2, 691: 1, 358: 1, 153: 1, 225: 1, 178: 1, 253: 1, 216: 1, 395: 1, 90: 1, 186: 1, 289: 1, 354: 1, 604: 1, 295: 1, 223: 1}, 'cat': {879: 1, 1075: 1, 799: 1, 121: 3, 75: 2, 78: 2, 1166: 1, 53: 2, 1025: 1, 679: 1, 25: 2, 819: 1, 824: 1, 1: 2, 444: 2, 98: 5, 63: 3, 1010: 1, 1035: 1, 913: 1, 9: 3, 1129: 1, 739: 1, 973: 1, 54: 2, 42: 2, 1024: 1, 313: 2, 131: 3, 890: 1, 36: 2, 148: 2, 820: 1, 293: 2, 716: 1, 1154: 1, 1017: 1, 1156: 1, 1195: 1, 1160: 1, 1019: 1, 345: 2, 1065: 1, 62: 2, 1189: 1, 104: 2, 8: 3, 1011: 1, 1205: 1, 41: 2, 1043: 1, 86: 2, 870: 1, 1152: 1, 50: 2, 102: 2, 137: 2, 488: 2, 999: 1, 1076: 1, 647: 1, 768: 1, 1045: 1, 786: 1, 89: 5, 1051: 1, 1163: 1, 176: 2, 18: 2, 640: 1, 1145: 1, 1196: 1, 623: 1, 994: 1, 254: 2, 264: 2, 10: 2, 1153: 1, 1127: 1, 206: 3, 20: 3, 908: 1, 195: 2, 655: 1, 555: 2, 24: 3, 1112: 2, 142: 2, 175: 2, 1125: 1, 715: 1, 1089: 1, 765: 1, 172: 2, 119: 3, 885: 1, 945: 1, 812: 1, 219: 4, 174: 2, 845: 1, 43: 2, 1172: 1, 938: 1, 931: 1, 646: 1, 778: 1, 14: 3, 183: 4, 1000: 1, 936: 1, 769: 1, 0: 3, 962: 1, 906: 1, 798: 1, 60: 4, 74: 2, 1110: 1, 554: 1, 956: 1, 855: 1, 1135: 1, 220: 2, 1170: 1, 840: 1, 46: 4, 780: 1, 1203: 1, 170: 2, 1193: 1, 1194: 1, 676: 1, 430: 1, 829: 1, 746: 1, 1049: 1, 1126: 1, 146: 2, 1037: 1, 64: 2, 88: 2, 514: 1, 800: 1, 802: 1, 124: 2, 1150: 1, 224: 2, 1103: 1, 1093: 1, 97: 3, 831: 1, 116: 2, 1200: 1, 196: 3, 735: 1, 201: 2, 1027: 1, 1044: 1, 1141: 1, 7: 3, 714: 1, 188: 4, 1090: 1, 1038: 1, 197: 4, 632: 1, 775: 1, 1092: 1, 319: 1, 99: 2, 85: 3, 55: 2, 869: 1, 221: 2, 47: 2, 521: 1, 450: 1, 957: 1, 958: 1, 13: 3, 611: 1, 214: 3, 71: 2, 58: 2, 209: 2, 231: 4, 941: 1, 712: 1, 981: 1, 761: 1, 379: 1, 396: 1, 752: 1, 217: 2, 1031: 1, 1139: 1, 893: 1, 1086: 1, 1149: 1, 846: 1, 478: 1, 866: 1, 662: 1, 205: 2, 301: 2, 39: 2, 993: 1, 285: 2, 538: 1, 711: 1, 916: 1, 436: 1, 744: 1, 493: 1, 1101: 1, 729: 1, 130: 2, 836: 1, 1005: 1, 399: 1, 971: 1, 568: 1, 329: 1, 804: 1, 113: 2, 858: 1, 392: 1, 1064: 1, 995: 1, 929: 1, 830: 1, 492: 1, 644: 1, 884: 1, 720: 1, 534: 1, 372: 1, 736: 1, 725: 1, 1046: 1, 335: 1, 614: 1, 790: 1, 703: 1, 317: 1, 1148: 1, 947: 1, 955: 1, 84: 2, 1032: 1, 1191: 1, 233: 2, 585: 1, 80: 2, 281: 1, 510: 2, 937: 1, 374: 1, 972: 1, 633: 1, 569: 1, 597: 1, 100: 2, 445: 1, 330: 1, 500: 1, 532: 1, 473: 1, 1060: 1, 598: 1, 502: 1, 581: 1, 550: 1, 442: 1, 533: 1, 572: 2, 520: 1, 624: 1, 1033: 1, 244: 2, 976: 1, 722: 1, 173: 2, 306: 1, 27: 2, 888: 1, 1020: 1, 515: 1, 1105: 1, 95: 2, 111: 2, 670: 1, 654: 1, 882: 1, 686: 1, 294: 1, 540: 1, 322: 1, 505: 1, 917: 1, 559: 1, 456: 1, 443: 1, 1131: 1, 499: 1, 438: 1, 400: 1, 546: 1, 414: 1, 382: 1, 628: 1, 966: 1, 552: 1, 181: 1, 441: 1, 687: 1, 578: 1, 257: 1, 1202: 1, 573: 1, 307: 1, 465: 1, 594: 1, 425: 1, 49: 2, 275: 1, 439: 1, 287: 1, 458: 1, 625: 1, 507: 1, 312: 1, 237: 1, 152: 1, 1207: 1, 427: 1, 1208: 1, 557: 1, 140: 1, 424: 1, 286: 1, 189: 1, 187: 1, 118: 1, 228: 1, 123: 1, 545: 1, 974: 1, 467: 1, 260: 1, 193: 1, 177: 1, 204: 1, 371: 1, 303: 1, 343: 1, 772: 1, 486: 1, 239: 1, 561: 1, 491: 1, 386: 1, 79: 1, 249: 1, 369: 1, 405: 1, 296: 1, 101: 2, 377: 1, 352: 1, 273: 1, 351: 1, 203: 1, 96: 2, 136: 1, 134: 1, 403: 1, 110: 2, 1008: 1, 230: 1, 245: 1, 250: 1, 603: 1, 406: 1, 103: 1, 92: 1, 144: 1, 503: 1}}
Matched classes:
{'wild': 65, 'dog': 19, 'cat': 98}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1194
Length of x: 1500
{65: 0, 19: 1, 98: 2}
{65: 0, 19: 1, 98: 2}
Final accuracy on train dataset:    0.010666666666666666
Final accuracy on val dataset:      0.004666666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=13.080536912751679, n_clusters=None)
All classes:
{'wild': {337: 2, 32: 7, 103: 3, 215: 4, 628: 2, 787: 1, 93: 6, 187: 3, 114: 3, 476: 1, 554: 1, 847: 1, 174: 2, 297: 4, 88: 9, 444: 1, 72: 4, 418: 3, 534: 2, 85: 4, 152: 2, 794: 1, 699: 1, 204: 5, 80: 3, 448: 1, 6: 5, 201: 3, 125: 2, 43: 6, 606: 1, 808: 1, 176: 5, 774: 2, 48: 5, 130: 4, 44: 4, 40: 2, 617: 1, 159: 6, 427: 2, 87: 9, 575: 5, 86: 2, 680: 1, 12: 2, 322: 4, 157: 4, 542: 1, 24: 4, 740: 3, 313: 2, 160: 3, 108: 7, 308: 3, 139: 4, 129: 4, 124: 3, 36: 3, 528: 1, 625: 4, 25: 4, 382: 2, 20: 5, 123: 2, 495: 1, 649: 1, 825: 1, 127: 4, 227: 2, 107: 2, 155: 4, 105: 2, 292: 3, 241: 2, 134: 2, 834: 1, 858: 3, 257: 2, 512: 1, 113: 2, 590: 1, 708: 2, 298: 4, 150: 3, 256: 2, 158: 2, 368: 2, 104: 2, 823: 1, 172: 4, 141: 9, 273: 2, 613: 1, 192: 2, 27: 5, 428: 3, 151: 2, 74: 6, 461: 1, 96: 2, 738: 1, 538: 1, 76: 4, 143: 2, 198: 2, 520: 1, 14: 2, 138: 6, 62: 2, 117: 3, 9: 5, 750: 1, 518: 3, 277: 3, 681: 1, 757: 1, 153: 4, 33: 2, 90: 2, 57: 2, 55: 4, 193: 3, 795: 1, 777: 1, 785: 1, 700: 1, 116: 3, 386: 5, 621: 1, 122: 2, 400: 2, 304: 1, 577: 1, 320: 1, 431: 2, 208: 3, 781: 1, 46: 2, 336: 1, 651: 1, 844: 1, 763: 1, 807: 1, 648: 1, 177: 2, 675: 1, 106: 2, 803: 1, 214: 2, 262: 2, 416: 1, 688: 1, 89: 3, 312: 4, 56: 4, 26: 2, 573: 1, 592: 1, 805: 1, 268: 2, 228: 3, 37: 2, 576: 1, 412: 1, 801: 1, 115: 2, 109: 2, 269: 2, 259: 1, 630: 1, 842: 1, 663: 1, 764: 1, 231: 2, 372: 3, 22: 3, 594: 1, 497: 1, 620: 1, 410: 1, 367: 4, 571: 1, 457: 1, 364: 1, 242: 1, 631: 1, 383: 1, 398: 2, 481: 1, 342: 1, 558: 1, 8: 3, 423: 1, 665: 1, 572: 1, 474: 1, 66: 2, 698: 1, 429: 1, 289: 1, 426: 1, 755: 1, 397: 1, 173: 2, 713: 1, 381: 1, 290: 1, 633: 1, 850: 1, 328: 2, 207: 3, 180: 2, 737: 1, 366: 1, 531: 1, 210: 1, 229: 1, 167: 1, 385: 1, 202: 1}, 'dog': {650: 1, 707: 1, 793: 1, 469: 1, 315: 2, 526: 1, 222: 2, 645: 1, 701: 1, 731: 1, 656: 1, 641: 1, 618: 1, 10: 4, 810: 1, 867: 1, 587: 1, 843: 1, 175: 2, 278: 2, 610: 1, 0: 3, 697: 1, 47: 2, 771: 1, 549: 1, 609: 1, 475: 1, 871: 1, 498: 1, 677: 1, 776: 1, 479: 1, 489: 1, 243: 2, 626: 1, 853: 1, 466: 1, 861: 1, 727: 1, 132: 4, 741: 1, 511: 1, 380: 2, 564: 1, 41: 2, 317: 2, 671: 1, 779: 1, 710: 1, 185: 3, 21: 2, 839: 1, 872: 1, 131: 2, 19: 2, 68: 2, 702: 1, 642: 1, 11: 2, 690: 1, 749: 1, 377: 2, 101: 2, 432: 2, 171: 2, 450: 1, 145: 2, 530: 1, 622: 1, 616: 1, 629: 2, 456: 1, 39: 2, 555: 1, 560: 1, 514: 1, 809: 1, 599: 1, 543: 1, 77: 2, 140: 2, 682: 1, 451: 1, 668: 1, 275: 2, 841: 1, 838: 1, 634: 1, 849: 1, 748: 1, 684: 1, 669: 1, 868: 1, 280: 2, 674: 1, 635: 1, 503: 1, 70: 2, 848: 1, 465: 1, 814: 1, 719: 1, 767: 1, 462: 1, 760: 1, 440: 1, 7: 2, 585: 1, 673: 1, 324: 1, 694: 1, 821: 1, 637: 1, 875: 1, 568: 1, 2: 2, 449: 1, 357: 1, 724: 1, 547: 1, 578: 1, 51: 2, 728: 1, 717: 1, 436: 3, 718: 1, 83: 2, 705: 1, 726: 1, 659: 1, 64: 2, 759: 1, 863: 1, 624: 2, 527: 1, 539: 1, 433: 1, 566: 1, 579: 1, 559: 1, 612: 1, 4: 2, 873: 1, 832: 1, 639: 1, 13: 2, 505: 1, 484: 1, 751: 1, 541: 1, 758: 1, 588: 1, 91: 3, 471: 1, 859: 1, 500: 2, 667: 1, 470: 2, 706: 1, 99: 2, 833: 1, 350: 1, 664: 1, 421: 1, 536: 1, 435: 1, 678: 1, 97: 2, 338: 1, 321: 5, 494: 1, 570: 1, 102: 2, 455: 1, 523: 1, 219: 2, 437: 1, 604: 1, 653: 1, 638: 1, 742: 1, 279: 1, 493: 1, 857: 1, 643: 1, 854: 1, 733: 1, 574: 1, 672: 1, 601: 1, 353: 2, 709: 1, 683: 1, 660: 1, 540: 1, 490: 1, 826: 1, 445: 1, 508: 1, 453: 1, 593: 1, 190: 2, 409: 1, 339: 1, 589: 1, 693: 1, 582: 1, 783: 1, 852: 1, 92: 3, 1: 2, 305: 1, 789: 1, 561: 1, 817: 1, 584: 1, 732: 1, 602: 1, 815: 1, 148: 2, 695: 1, 460: 1, 563: 1, 237: 1, 796: 1, 533: 1, 45: 2, 546: 1, 224: 1, 822: 1, 496: 1, 753: 1, 314: 2, 454: 1, 519: 1, 804: 1, 860: 1, 537: 1, 419: 1, 246: 1, 596: 1, 443: 1, 285: 2, 782: 1, 478: 1, 363: 1, 340: 1, 730: 1, 827: 1, 828: 1, 598: 1, 591: 1, 696: 1, 468: 1, 544: 1, 504: 1, 287: 2, 666: 1, 452: 1, 238: 1, 567: 1, 788: 1, 721: 1, 784: 1, 333: 1, 754: 1, 510: 1, 78: 2, 376: 1, 323: 1, 270: 1, 355: 1, 517: 1, 818: 1, 524: 1, 318: 1, 501: 1, 770: 1, 235: 1, 752: 1, 413: 1, 525: 1, 295: 1, 378: 1, 685: 1, 535: 1, 723: 1, 370: 1, 797: 1, 837: 1, 605: 1, 341: 1, 657: 1, 274: 1, 704: 1, 580: 1, 459: 1, 293: 1, 644: 1, 583: 1, 310: 1, 619: 1, 284: 1, 747: 1, 516: 1, 388: 1, 28: 2, 507: 1, 248: 1, 373: 1, 59: 2, 506: 1, 389: 1, 390: 1, 250: 1, 391: 1, 483: 1, 365: 1, 261: 1, 756: 1, 282: 1, 813: 1, 326: 1, 252: 1, 255: 1, 263: 1, 425: 1, 349: 1, 743: 1, 467: 1, 334: 1, 595: 1, 816: 1, 835: 1, 791: 1, 480: 1, 247: 1, 254: 1, 865: 1, 417: 1, 487: 1, 384: 1, 169: 1, 161: 1, 773: 1, 806: 1, 291: 1, 424: 1, 600: 1, 359: 1, 309: 1, 734: 1, 422: 1, 529: 1, 864: 1, 218: 1, 652: 1, 362: 1, 792: 1, 548: 1, 393: 1, 331: 1, 194: 1, 327: 1, 464: 2, 492: 2, 811: 1, 434: 1, 325: 1, 463: 1, 348: 1, 267: 1, 232: 1, 361: 1, 556: 1, 407: 1, 745: 1, 166: 1, 513: 1, 689: 1, 608: 1, 360: 1, 447: 1, 211: 1, 562: 1, 240: 1, 230: 1, 553: 1, 251: 2, 691: 1, 358: 1, 225: 1, 178: 1, 126: 1, 216: 1, 395: 1, 182: 1, 144: 1, 354: 1, 302: 1, 147: 1, 223: 1}, 'cat': {439: 1, 623: 4, 799: 1, 58: 9, 303: 2, 5: 8, 236: 2, 3: 4, 149: 3, 679: 1, 266: 3, 819: 1, 824: 1, 249: 3, 31: 5, 98: 5, 81: 8, 146: 2, 188: 2, 94: 4, 82: 5, 217: 3, 739: 1, 486: 1, 118: 4, 53: 7, 133: 5, 17: 2, 239: 3, 212: 5, 820: 1, 294: 2, 716: 1, 183: 3, 369: 2, 264: 2, 265: 2, 121: 3, 532: 1, 209: 2, 154: 3, 54: 4, 164: 5, 168: 2, 200: 2, 276: 3, 870: 1, 186: 2, 205: 2, 206: 2, 23: 5, 488: 2, 71: 3, 346: 2, 647: 1, 768: 1, 786: 1, 179: 5, 196: 2, 307: 3, 300: 3, 120: 4, 640: 1, 283: 4, 552: 2, 52: 7, 762: 2, 316: 2, 515: 2, 137: 2, 195: 2, 655: 1, 199: 3, 351: 2, 715: 1, 343: 2, 765: 1, 692: 2, 67: 4, 34: 2, 472: 1, 812: 1, 260: 6, 627: 6, 845: 1, 135: 3, 65: 2, 778: 1, 35: 7, 189: 3, 38: 2, 769: 1, 798: 1, 142: 7, 299: 2, 84: 2, 110: 2, 855: 1, 15: 3, 258: 4, 840: 1, 780: 1, 29: 7, 170: 2, 61: 3, 676: 1, 862: 1, 829: 1, 42: 7, 50: 2, 800: 1, 802: 1, 234: 2, 394: 3, 831: 1, 658: 2, 735: 1, 63: 3, 163: 2, 545: 3, 714: 1, 213: 5, 60: 4, 197: 4, 632: 1, 244: 2, 319: 1, 401: 2, 345: 3, 226: 2, 869: 1, 18: 4, 281: 3, 521: 1, 128: 2, 156: 2, 611: 1, 430: 3, 420: 2, 712: 1, 75: 2, 761: 1, 379: 1, 396: 1, 661: 3, 387: 2, 446: 1, 184: 2, 119: 3, 846: 1, 866: 1, 662: 1, 411: 2, 272: 3, 347: 3, 711: 1, 874: 1, 744: 1, 550: 1, 729: 1, 836: 1, 399: 1, 49: 2, 329: 1, 392: 1, 311: 2, 830: 1, 356: 2, 441: 1, 720: 1, 112: 2, 746: 1, 736: 1, 725: 1, 335: 1, 614: 1, 790: 1, 703: 1, 636: 1, 473: 1, 477: 1, 586: 1, 162: 2, 271: 3, 374: 1, 485: 1, 569: 1, 597: 1, 404: 2, 69: 2, 330: 3, 502: 1, 581: 1, 111: 2, 442: 1, 79: 2, 165: 3, 73: 3, 722: 1, 221: 1, 509: 1, 245: 2, 191: 2, 670: 1, 654: 1, 16: 2, 686: 1, 286: 2, 95: 2, 646: 1, 136: 2, 100: 3, 30: 2, 565: 1, 438: 1, 414: 1, 766: 1, 482: 1, 181: 1, 220: 1, 687: 1, 615: 1, 851: 1, 402: 2, 253: 1, 306: 1, 603: 1, 856: 1, 557: 1, 344: 2, 375: 1, 458: 1, 551: 2, 332: 2, 233: 1, 522: 1, 775: 1, 371: 1, 607: 1, 772: 1, 491: 1, 499: 1, 405: 1, 296: 1, 203: 2, 352: 1, 408: 1, 403: 1, 301: 1, 406: 1, 415: 1, 288: 1}}
Matched classes:
{'wild': 88, 'cat': 58, 'dog': 321}
Predictions stats on train:
Different than -1: 0
Max predicted class: 869
Length of x: 1500
{88: 0, 321: 1, 58: 2}
{88: 0, 321: 1, 58: 2}
Final accuracy on train dataset:    0.015333333333333332
Final accuracy on val dataset:      0.0006666666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=15.093959731543626, n_clusters=None)
All classes:
{'wild': {278: 7, 133: 7, 27: 17, 139: 15, 25: 5, 393: 1, 300: 9, 114: 8, 22: 8, 476: 1, 554: 1, 227: 2, 390: 5, 6: 6, 356: 9, 444: 1, 427: 6, 85: 8, 74: 3, 172: 4, 10: 4, 242: 1, 349: 1, 164: 13, 507: 4, 448: 1, 94: 6, 215: 7, 125: 2, 318: 11, 15: 3, 87: 2, 226: 4, 261: 4, 361: 4, 331: 2, 47: 4, 72: 12, 575: 5, 347: 2, 115: 2, 42: 9, 542: 1, 409: 4, 211: 5, 54: 4, 308: 3, 0: 7, 348: 5, 499: 3, 148: 3, 528: 1, 96: 7, 208: 4, 244: 4, 495: 1, 40: 2, 412: 1, 256: 4, 216: 2, 585: 3, 1: 3, 95: 4, 68: 15, 24: 6, 512: 1, 90: 3, 590: 1, 117: 4, 229: 4, 513: 2, 204: 5, 411: 1, 283: 9, 273: 2, 306: 1, 317: 6, 82: 8, 461: 1, 538: 1, 154: 4, 287: 2, 132: 6, 520: 1, 46: 6, 518: 3, 277: 3, 158: 2, 551: 2, 138: 9, 387: 3, 213: 3, 124: 2, 48: 3, 26: 3, 80: 4, 150: 3, 577: 1, 105: 3, 190: 2, 325: 1, 381: 1, 403: 1, 458: 4, 337: 1, 126: 3, 113: 2, 262: 2, 362: 3, 312: 4, 573: 1, 268: 2, 457: 3, 576: 1, 400: 1, 540: 2, 259: 1, 38: 2, 285: 2, 464: 2, 497: 1, 17: 1, 571: 1, 485: 1, 49: 2, 243: 2, 481: 1, 302: 3, 332: 1, 267: 2, 214: 1, 579: 1, 198: 1, 581: 1, 207: 3, 130: 3, 531: 1, 459: 1}, 'dog': {41: 3, 217: 2, 396: 1, 469: 1, 315: 2, 526: 1, 34: 4, 322: 1, 350: 1, 173: 2, 64: 2, 13: 2, 112: 5, 179: 2, 134: 2, 587: 1, 144: 5, 175: 2, 50: 4, 37: 2, 423: 3, 155: 3, 384: 2, 220: 2, 549: 1, 31: 3, 475: 1, 311: 2, 498: 1, 84: 2, 67: 2, 479: 1, 489: 1, 488: 2, 59: 3, 127: 3, 466: 1, 284: 2, 122: 4, 266: 4, 56: 2, 511: 1, 564: 1, 66: 3, 128: 3, 162: 2, 44: 2, 185: 3, 177: 2, 419: 1, 21: 3, 131: 2, 165: 2, 558: 2, 320: 1, 401: 2, 169: 2, 253: 2, 160: 4, 89: 3, 432: 2, 343: 2, 450: 1, 291: 2, 530: 1, 45: 2, 19: 2, 30: 4, 456: 1, 23: 3, 555: 1, 560: 1, 514: 1, 404: 1, 299: 1, 543: 1, 39: 4, 140: 2, 451: 1, 109: 3, 420: 1, 228: 2, 60: 3, 424: 1, 168: 2, 334: 1, 433: 1, 63: 2, 503: 1, 16: 3, 465: 1, 62: 2, 383: 1, 462: 1, 440: 1, 76: 2, 324: 1, 157: 3, 410: 1, 141: 3, 437: 1, 443: 2, 449: 1, 357: 1, 547: 1, 578: 1, 65: 3, 97: 2, 137: 4, 231: 2, 352: 1, 120: 2, 129: 2, 379: 1, 58: 3, 527: 1, 539: 1, 304: 3, 566: 1, 559: 1, 178: 2, 436: 1, 415: 1, 319: 1, 232: 2, 505: 1, 484: 1, 541: 1, 378: 1, 588: 1, 368: 3, 471: 1, 429: 1, 500: 2, 470: 2, 316: 2, 416: 1, 71: 2, 421: 1, 536: 1, 435: 1, 338: 1, 98: 2, 32: 2, 321: 5, 494: 1, 570: 1, 102: 2, 455: 1, 523: 1, 250: 2, 326: 1, 79: 2, 180: 2, 279: 1, 493: 1, 428: 1, 212: 2, 366: 1, 574: 1, 335: 1, 353: 2, 341: 1, 108: 2, 490: 1, 301: 2, 445: 1, 508: 1, 453: 1, 296: 1, 382: 2, 163: 2, 589: 1, 346: 1, 582: 1, 391: 1, 135: 2, 373: 3, 272: 2, 152: 1, 394: 1, 561: 1, 5: 3, 584: 1, 365: 1, 18: 2, 407: 1, 298: 2, 290: 3, 460: 1, 563: 1, 237: 1, 397: 1, 533: 1, 183: 2, 546: 1, 224: 1, 496: 1, 57: 3, 314: 2, 519: 1, 193: 2, 537: 1, 209: 1, 246: 1, 4: 2, 478: 1, 363: 1, 340: 1, 181: 1, 413: 1, 33: 3, 591: 1, 468: 1, 544: 1, 504: 1, 161: 3, 452: 1, 238: 1, 567: 1, 196: 1, 146: 2, 333: 1, 55: 2, 510: 1, 376: 1, 53: 2, 270: 1, 355: 1, 517: 1, 408: 1, 307: 2, 235: 1, 375: 1, 206: 1, 525: 1, 295: 1, 342: 1, 535: 1, 398: 1, 242: 1, 17: 2, 170: 1, 351: 1, 580: 1, 583: 1, 310: 1, 388: 1, 236: 2, 506: 1, 389: 1, 275: 3, 501: 1, 195: 1, 483: 1, 182: 1, 524: 1, 282: 1, 406: 1, 252: 1, 255: 1, 263: 1, 371: 1, 467: 1, 292: 2, 297: 1, 417: 1, 247: 1, 418: 1, 487: 1, 386: 1, 402: 1, 8: 2, 359: 1, 309: 1, 210: 1, 529: 1, 218: 1, 149: 2, 395: 1, 548: 1, 73: 2, 328: 1, 369: 3, 405: 1, 434: 1, 463: 1, 556: 1, 372: 1, 166: 1, 344: 1, 303: 1, 360: 1, 230: 1, 553: 1, 251: 2, 345: 1, 225: 1, 358: 1, 254: 1, 197: 1, 354: 1, 147: 1, 447: 1}, 'cat': {439: 1, 78: 11, 399: 1, 473: 9, 167: 3, 199: 8, 474: 2, 14: 6, 257: 5, 339: 1, 534: 3, 12: 3, 92: 3, 274: 4, 516: 5, 171: 7, 330: 8, 293: 2, 377: 2, 189: 4, 29: 11, 70: 10, 69: 3, 486: 1, 118: 4, 186: 11, 222: 4, 480: 3, 9: 15, 75: 6, 241: 4, 111: 8, 20: 3, 264: 2, 265: 2, 3: 4, 532: 1, 219: 4, 329: 5, 249: 3, 51: 7, 276: 3, 106: 4, 431: 5, 191: 5, 93: 3, 143: 3, 151: 5, 323: 1, 370: 2, 36: 5, 7: 5, 426: 5, 568: 4, 107: 3, 425: 7, 187: 4, 52: 5, 101: 5, 552: 2, 327: 1, 119: 5, 123: 3, 192: 3, 103: 3, 245: 5, 280: 2, 472: 1, 174: 2, 260: 6, 121: 8, 271: 3, 200: 3, 294: 7, 380: 3, 86: 4, 286: 7, 194: 6, 77: 4, 269: 3, 258: 4, 441: 2, 11: 3, 240: 7, 116: 4, 110: 2, 430: 1, 414: 1, 142: 8, 104: 5, 234: 2, 176: 4, 153: 3, 367: 1, 136: 4, 81: 6, 61: 2, 159: 1, 145: 4, 281: 3, 521: 1, 515: 2, 156: 3, 305: 1, 188: 6, 99: 3, 289: 2, 88: 3, 35: 3, 446: 1, 239: 4, 422: 1, 205: 2, 545: 3, 184: 3, 550: 1, 364: 1, 28: 3, 223: 2, 100: 2, 392: 1, 313: 2, 43: 3, 336: 1, 477: 1, 586: 1, 91: 5, 248: 5, 374: 1, 569: 1, 201: 2, 562: 2, 502: 1, 442: 1, 203: 4, 509: 1, 492: 2, 83: 2, 572: 2, 202: 3, 565: 1, 438: 1, 454: 2, 482: 1, 2: 3, 557: 1, 233: 1, 522: 1, 221: 2, 385: 1, 491: 1, 288: 1}}
Matched classes:
{'wild': 27, 'cat': 9, 'dog': 112}
Predictions stats on train:
Different than -1: 0
Max predicted class: 592
Length of x: 1500
{27: 0, 112: 1, 9: 2}
{27: 0, 112: 1, 9: 2}
Final accuracy on train dataset:    0.024666666666666667
Final accuracy on val dataset:      0.004666666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=17.107382550335572, n_clusters=None)
All classes:
{'wild': {278: 7, 105: 16, 132: 19, 280: 15, 117: 8, 393: 1, 300: 9, 229: 8, 185: 8, 198: 4, 182: 1, 227: 2, 172: 6, 248: 6, 183: 12, 38: 7, 187: 8, 42: 12, 76: 4, 94: 9, 186: 4, 349: 1, 158: 15, 52: 7, 135: 3, 189: 6, 60: 15, 318: 11, 269: 3, 351: 2, 37: 9, 361: 4, 331: 2, 58: 5, 127: 21, 184: 3, 98: 9, 174: 9, 225: 4, 7: 11, 22: 15, 308: 3, 348: 5, 91: 9, 297: 3, 161: 5, 389: 7, 33: 6, 113: 6, 156: 2, 16: 3, 71: 3, 142: 3, 192: 4, 138: 15, 32: 6, 134: 4, 194: 2, 235: 4, 121: 10, 87: 3, 205: 1, 366: 3, 306: 1, 165: 8, 64: 2, 65: 2, 188: 6, 114: 4, 387: 3, 81: 4, 93: 5, 150: 3, 99: 7, 190: 2, 381: 1, 201: 1, 228: 4, 337: 1, 197: 4, 286: 1, 311: 2, 285: 2, 149: 1, 242: 1, 302: 3, 214: 1, 397: 1}, 'dog': {84: 3, 224: 3, 396: 1, 56: 2, 315: 2, 200: 2, 25: 5, 322: 1, 350: 1, 53: 3, 130: 2, 13: 8, 57: 6, 359: 2, 131: 3, 145: 7, 289: 5, 137: 3, 153: 2, 211: 3, 109: 5, 384: 2, 30: 4, 164: 2, 257: 3, 77: 2, 102: 3, 85: 2, 169: 2, 273: 2, 239: 1, 244: 1, 119: 4, 240: 3, 47: 4, 39: 2, 284: 2, 144: 6, 45: 3, 255: 1, 204: 2, 133: 3, 126: 4, 325: 2, 179: 2, 372: 3, 9: 2, 100: 4, 264: 2, 332: 2, 320: 1, 48: 4, 340: 2, 253: 2, 160: 4, 180: 3, 36: 4, 343: 2, 51: 3, 199: 5, 373: 2, 82: 2, 125: 4, 95: 3, 171: 2, 63: 2, 14: 2, 299: 1, 271: 1, 162: 4, 282: 2, 111: 4, 122: 4, 243: 3, 168: 2, 334: 1, 256: 2, 272: 3, 251: 2, 383: 1, 50: 2, 310: 2, 324: 1, 157: 3, 283: 3, 218: 1, 226: 3, 357: 1, 86: 2, 80: 4, 276: 4, 231: 2, 352: 1, 241: 2, 24: 3, 379: 1, 236: 3, 222: 2, 29: 3, 304: 3, 288: 2, 123: 3, 178: 2, 41: 2, 23: 2, 319: 1, 72: 4, 40: 2, 112: 2, 378: 1, 293: 1, 368: 3, 234: 2, 316: 2, 207: 1, 290: 2, 15: 2, 107: 2, 46: 2, 338: 1, 270: 2, 321: 5, 104: 2, 147: 2, 206: 2, 89: 3, 261: 1, 250: 2, 326: 1, 79: 2, 362: 2, 279: 1, 212: 2, 335: 1, 353: 2, 341: 1, 217: 2, 78: 2, 301: 2, 73: 2, 296: 1, 382: 2, 163: 2, 294: 1, 346: 1, 391: 1, 28: 3, 152: 1, 394: 1, 265: 2, 221: 3, 259: 2, 365: 1, 154: 2, 203: 1, 66: 4, 281: 1, 237: 1, 182: 1, 266: 1, 26: 3, 68: 2, 136: 2, 314: 2, 116: 3, 193: 2, 268: 1, 246: 1, 92: 2, 238: 1, 363: 1, 364: 1, 17: 4, 295: 1, 75: 3, 6: 4, 323: 3, 19: 2, 196: 1, 90: 3, 333: 1, 108: 2, 355: 1, 258: 1, 307: 2, 375: 1, 262: 1, 287: 2, 342: 1, 267: 1, 0: 2, 76: 1, 149: 2, 170: 1, 146: 2, 388: 1, 110: 3, 275: 3, 195: 1, 252: 1, 263: 1, 371: 1, 292: 2, 208: 1, 247: 1, 139: 2, 386: 1, 312: 2, 309: 1, 298: 2, 328: 1, 369: 3, 277: 1, 166: 1, 344: 1, 303: 1, 360: 1, 230: 1, 345: 1, 358: 1, 395: 1, 354: 1}, 'cat': {67: 2, 317: 11, 1: 3, 61: 16, 167: 3, 4: 13, 118: 5, 74: 10, 143: 6, 339: 1, 181: 10, 213: 3, 5: 6, 274: 4, 21: 12, 35: 21, 175: 7, 377: 2, 380: 4, 120: 18, 141: 10, 124: 5, 374: 11, 59: 12, 12: 6, 173: 15, 140: 9, 3: 8, 103: 13, 54: 5, 70: 5, 209: 6, 155: 4, 219: 2, 31: 9, 329: 5, 43: 4, 223: 5, 20: 7, 215: 5, 191: 5, 96: 7, 106: 4, 151: 5, 27: 3, 148: 5, 128: 5, 49: 10, 216: 3, 376: 4, 11: 9, 8: 5, 327: 1, 2: 6, 232: 15, 220: 6, 347: 4, 55: 13, 390: 6, 313: 4, 83: 4, 202: 5, 18: 4, 233: 4, 88: 5, 367: 1, 330: 6, 159: 1, 69: 7, 260: 1, 115: 8, 305: 1, 10: 5, 97: 3, 356: 3, 291: 3, 62: 10, 210: 1, 101: 4, 392: 1, 129: 4, 176: 3, 336: 1, 177: 2, 370: 5, 44: 2, 254: 1, 34: 2, 249: 3, 385: 1, 245: 1}}
Matched classes:
{'wild': 127, 'cat': 35, 'dog': 13}
Predictions stats on train:
Different than -1: 0
Max predicted class: 397
Length of x: 1500
{127: 0, 13: 1, 35: 2}
{127: 0, 13: 1, 35: 2}
Final accuracy on train dataset:    0.03333333333333333
Final accuracy on val dataset:      0.0026666666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=19.120805369127517, n_clusters=None)
All classes:
{'wild': {278: 7, 211: 16, 132: 19, 280: 15, 236: 8, 184: 2, 6: 17, 185: 8, 30: 10, 182: 1, 227: 2, 87: 13, 84: 12, 58: 17, 77: 7, 187: 8, 85: 14, 80: 6, 189: 9, 28: 10, 64: 7, 13: 29, 213: 7, 135: 3, 122: 15, 53: 15, 269: 3, 76: 9, 147: 8, 256: 21, 198: 9, 174: 9, 225: 4, 126: 16, 24: 17, 7: 12, 138: 6, 113: 6, 170: 2, 137: 3, 142: 3, 192: 4, 277: 15, 61: 7, 134: 4, 194: 2, 38: 18, 176: 3, 23: 6, 129: 2, 131: 2, 230: 4, 150: 3, 199: 7, 96: 1, 201: 1, 228: 4, 197: 4, 286: 1, 285: 2, 25: 1, 242: 1, 214: 1}, 'dog': {47: 6, 224: 3, 40: 3, 229: 2, 26: 5, 200: 2, 106: 5, 45: 3, 108: 4, 1: 5, 130: 2, 235: 8, 17: 7, 103: 4, 33: 5, 145: 7, 289: 5, 22: 4, 153: 2, 19: 6, 31: 4, 125: 4, 164: 2, 37: 5, 156: 2, 205: 3, 5: 3, 97: 6, 273: 2, 239: 1, 244: 1, 119: 4, 240: 3, 95: 4, 161: 2, 284: 2, 115: 7, 18: 8, 255: 1, 14: 4, 133: 3, 25: 6, 93: 3, 65: 6, 172: 2, 100: 4, 264: 2, 165: 2, 8: 6, 90: 3, 253: 2, 160: 4, 148: 4, 29: 4, 210: 3, 177: 6, 186: 2, 166: 2, 251: 4, 191: 3, 171: 2, 127: 2, 43: 4, 149: 1, 271: 1, 282: 2, 111: 4, 54: 5, 243: 3, 168: 2, 46: 4, 60: 3, 272: 3, 208: 3, 63: 2, 102: 2, 154: 2, 42: 3, 157: 3, 283: 3, 218: 1, 226: 3, 39: 2, 86: 2, 162: 4, 276: 4, 231: 2, 241: 2, 204: 3, 4: 3, 35: 6, 222: 2, 121: 3, 11: 4, 50: 3, 0: 7, 169: 2, 20: 4, 48: 2, 3: 8, 82: 2, 16: 3, 234: 2, 207: 1, 128: 2, 107: 2, 94: 2, 270: 2, 75: 3, 27: 3, 206: 2, 179: 3, 261: 1, 250: 2, 79: 2, 279: 1, 212: 2, 32: 2, 52: 4, 217: 2, 12: 2, 190: 2, 146: 1, 195: 1, 118: 3, 265: 2, 21: 5, 259: 2, 59: 3, 203: 1, 66: 4, 281: 1, 237: 1, 182: 1, 266: 1, 110: 3, 136: 2, 116: 3, 193: 2, 268: 1, 246: 1, 92: 2, 238: 1, 144: 4, 152: 3, 123: 4, 81: 2, 181: 3, 101: 3, 258: 1, 262: 1, 267: 1, 151: 2, 80: 1, 221: 3, 275: 3, 252: 1, 263: 1, 57: 2, 247: 1, 139: 2, 96: 1, 44: 2}, 'cat': {67: 2, 158: 11, 178: 3, 248: 16, 41: 15, 89: 13, 71: 7, 74: 10, 287: 6, 124: 2, 10: 15, 104: 6, 98: 6, 274: 4, 36: 15, 72: 21, 91: 15, 68: 9, 120: 18, 88: 21, 249: 5, 62: 16, 56: 28, 140: 9, 143: 8, 109: 5, 141: 5, 209: 6, 155: 4, 219: 2, 2: 12, 34: 15, 175: 4, 223: 5, 55: 11, 215: 5, 9: 12, 15: 6, 114: 3, 257: 5, 99: 10, 216: 3, 49: 9, 288: 5, 163: 1, 117: 6, 232: 15, 220: 6, 173: 4, 112: 13, 83: 4, 202: 5, 78: 4, 233: 4, 183: 7, 105: 2, 51: 10, 159: 1, 69: 7, 188: 5, 196: 3, 260: 4, 167: 1, 73: 8, 180: 2, 254: 1, 70: 2, 170: 1, 245: 1}}
Matched classes:
{'wild': 13, 'cat': 56, 'dog': 235}
Predictions stats on train:
Different than -1: 0
Max predicted class: 276
Length of x: 1500
{13: 0, 235: 1, 56: 2}
{13: 0, 235: 1, 56: 2}
Final accuracy on train dataset:    0.043333333333333335
Final accuracy on val dataset:      0.004666666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=21.134228187919465, n_clusters=None)
All classes:
{'wild': {58: 15, 211: 16, 76: 40, 90: 27, 45: 23, 3: 2, 127: 19, 62: 10, 182: 1, 24: 13, 87: 13, 39: 32, 155: 7, 187: 8, 172: 14, 92: 7, 189: 9, 118: 10, 129: 7, 36: 32, 2: 13, 21: 33, 134: 3, 154: 9, 73: 11, 198: 9, 174: 9, 112: 4, 126: 16, 99: 17, 68: 12, 63: 8, 113: 6, 170: 2, 137: 3, 192: 4, 47: 11, 194: 2, 176: 3, 150: 3, 18: 1, 201: 1, 9: 6, 197: 4, 142: 2, 51: 1}, 'dog': {88: 8, 22: 7, 82: 3, 34: 6, 32: 7, 200: 2, 5: 8, 35: 5, 13: 5, 117: 8, 111: 12, 103: 4, 136: 5, 49: 10, 46: 4, 48: 4, 80: 6, 91: 8, 29: 5, 164: 2, 75: 5, 156: 2, 44: 4, 105: 3, 7: 8, 19: 4, 54: 3, 119: 4, 53: 6, 16: 7, 161: 2, 42: 4, 115: 7, 77: 8, 30: 3, 60: 4, 27: 6, 51: 6, 188: 3, 132: 6, 40: 4, 100: 4, 131: 2, 37: 3, 31: 7, 181: 3, 108: 6, 160: 4, 148: 4, 122: 4, 210: 3, 67: 10, 33: 3, 166: 2, 191: 3, 171: 2, 59: 4, 178: 4, 149: 1, 135: 1, 110: 5, 18: 4, 50: 5, 93: 4, 121: 3, 208: 3, 17: 4, 205: 2, 26: 3, 85: 3, 38: 4, 141: 3, 8: 3, 79: 2, 86: 2, 162: 4, 204: 3, 14: 5, 71: 6, 101: 3, 128: 7, 169: 2, 83: 4, 97: 2, 72: 8, 165: 2, 139: 3, 207: 1, 52: 3, 94: 2, 151: 3, 56: 3, 206: 2, 179: 3, 130: 1, 11: 8, 0: 4, 65: 2, 106: 4, 3: 2, 190: 2, 146: 1, 195: 1, 107: 5, 177: 5, 95: 3, 120: 3, 203: 1, 66: 4, 140: 1, 182: 1, 28: 3, 116: 3, 193: 2, 185: 2, 152: 3, 123: 4, 81: 2, 133: 1, 92: 1, 57: 2, 89: 2}, 'cat': {25: 7, 158: 11, 43: 8, 41: 29, 84: 15, 102: 17, 74: 10, 109: 9, 124: 2, 186: 15, 104: 6, 98: 6, 61: 15, 147: 15, 145: 21, 184: 15, 138: 9, 20: 33, 69: 27, 125: 16, 114: 28, 78: 14, 144: 8, 6: 9, 55: 7, 209: 6, 15: 9, 10: 4, 153: 16, 70: 15, 175: 4, 1: 13, 23: 25, 64: 6, 12: 16, 4: 10, 199: 9, 143: 5, 163: 1, 173: 4, 168: 4, 202: 5, 157: 4, 183: 7, 159: 1, 196: 3, 167: 1, 180: 2, 96: 2, 170: 1}}
Matched classes:
{'wild': 76, 'cat': 20, 'dog': 111}
Predictions stats on train:
Different than -1: 0
Max predicted class: 204
Length of x: 1500
{76: 0, 111: 1, 20: 2}
{76: 0, 111: 1, 20: 2}
Final accuracy on train dataset:    0.056666666666666664
Final accuracy on val dataset:      0.0006666666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=23.147651006711413, n_clusters=None)
All classes:
{'wild': {22: 24, 37: 48, 76: 40, 58: 31, 25: 31, 65: 2, 127: 19, 126: 10, 8: 1, 15: 17, 87: 13, 155: 7, 1: 47, 92: 7, 32: 19, 45: 9, 73: 32, 118: 13, 134: 3, 154: 9, 23: 28, 86: 9, 112: 4, 12: 19, 68: 12, 128: 8, 113: 6, 11: 2, 137: 3, 96: 11, 150: 3, 85: 1, 100: 1, 40: 6, 142: 2, 104: 1}, 'dog': {61: 9, 42: 9, 46: 5, 69: 6, 66: 7, 51: 8, 31: 9, 117: 5, 5: 10, 111: 12, 36: 7, 136: 5, 99: 10, 52: 7, 48: 4, 162: 6, 91: 8, 0: 7, 164: 2, 151: 5, 156: 2, 17: 7, 18: 6, 16: 8, 80: 4, 54: 3, 119: 4, 8: 7, 34: 7, 161: 2, 3: 8, 115: 7, 77: 8, 121: 4, 27: 6, 104: 6, 93: 3, 9: 8, 82: 4, 131: 2, 64: 7, 20: 6, 108: 6, 160: 4, 148: 4, 122: 4, 44: 5, 67: 10, 33: 3, 2: 5, 13: 6, 59: 4, 149: 1, 135: 1, 110: 5, 85: 6, 50: 5, 83: 11, 35: 4, 103: 3, 71: 4, 24: 5, 53: 3, 38: 4, 141: 3, 75: 3, 79: 2, 62: 5, 143: 6, 101: 3, 7: 6, 97: 2, 28: 13, 139: 3, 72: 3, 105: 3, 56: 3, 89: 3, 130: 1, 49: 8, 90: 4, 132: 2, 106: 4, 65: 2, 146: 1, 107: 5, 95: 3, 120: 3, 30: 6, 140: 1, 116: 3, 152: 3, 123: 4, 81: 2, 133: 1, 92: 1, 57: 2}, 'cat': {21: 22, 158: 11, 88: 8, 84: 29, 41: 30, 102: 17, 74: 10, 109: 9, 124: 2, 11: 7, 98: 6, 10: 19, 147: 15, 145: 21, 138: 9, 14: 49, 26: 36, 125: 16, 114: 28, 78: 14, 144: 8, 60: 9, 55: 7, 63: 9, 94: 4, 153: 16, 70: 15, 29: 20, 47: 25, 129: 6, 39: 10, 43: 14, 19: 7, 163: 1, 4: 8, 157: 4, 159: 1, 6: 3}}
Matched classes:
{'cat': 14, 'wild': 37, 'dog': 28}
Predictions stats on train:
Different than -1: 0
Max predicted class: 164
Length of x: 1500
{37: 0, 28: 1, 14: 2}
{37: 0, 28: 1, 14: 2}
Final accuracy on train dataset:    0.07333333333333333
Final accuracy on val dataset:      0.005333333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=25.161073825503358, n_clusters=None)
All classes:
{'wild': {22: 24, 42: 88, 118: 31, 51: 31, 4: 3, 127: 19, 126: 10, 18: 1, 12: 24, 87: 13, 41: 47, 92: 7, 32: 19, 45: 9, 16: 53, 9: 25, 14: 6, 31: 37, 86: 9, 112: 4, 63: 8, 113: 6, 50: 2, 96: 11, 74: 3, 100: 1, 40: 6, 68: 1}, 'dog': {61: 9, 85: 9, 46: 5, 69: 6, 66: 7, 104: 8, 0: 15, 117: 5, 26: 10, 111: 12, 73: 7, 21: 13, 99: 10, 52: 7, 48: 4, 8: 20, 91: 8, 35: 9, 68: 8, 24: 11, 1: 8, 37: 6, 67: 8, 10: 5, 54: 3, 119: 4, 18: 7, 70: 7, 36: 4, 15: 9, 115: 7, 77: 8, 3: 8, 93: 3, 80: 8, 82: 4, 65: 2, 64: 7, 108: 6, 23: 15, 122: 4, 90: 5, 7: 4, 6: 6, 58: 6, 59: 4, 17: 4, 110: 5, 4: 8, 102: 5, 71: 4, 103: 3, 49: 5, 53: 3, 38: 4, 75: 3, 47: 10, 62: 5, 33: 9, 101: 3, 34: 6, 97: 2, 57: 13, 11: 7, 72: 3, 105: 3, 56: 3, 89: 3, 106: 4, 107: 5, 95: 3, 120: 3, 116: 3, 123: 4, 81: 2, 92: 1}, 'cat': {44: 22, 27: 36, 88: 8, 19: 50, 83: 30, 25: 21, 39: 46, 109: 9, 124: 2, 50: 7, 98: 6, 2: 25, 13: 23, 5: 18, 29: 49, 125: 16, 114: 28, 78: 14, 121: 9, 55: 7, 94: 4, 76: 16, 20: 25, 60: 20, 43: 14, 79: 7, 28: 2, 84: 8, 30: 3}}
Matched classes:
{'wild': 42, 'cat': 19, 'dog': 8}
Predictions stats on train:
Different than -1: 0
Max predicted class: 127
Length of x: 1500
{42: 0, 8: 1, 19: 2}
{42: 0, 8: 1, 19: 2}
Final accuracy on train dataset:    0.10533333333333333
Final accuracy on val dataset:      0.018666666666666668

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=27.174496644295303, n_clusters=None)
All classes:
{'wild': {94: 24, 42: 88, 10: 35, 51: 31, 46: 3, 14: 29, 18: 1, 25: 24, 87: 13, 41: 47, 92: 7, 16: 27, 45: 9, 33: 53, 9: 25, 30: 6, 63: 37, 86: 9, 56: 6, 26: 2, 96: 11, 74: 3, 100: 1, 40: 6, 2: 1}, 'dog': {53: 13, 85: 9, 5: 9, 69: 6, 50: 11, 2: 16, 35: 15, 24: 9, 1: 13, 55: 12, 21: 11, 6: 18, 99: 10, 52: 7, 36: 20, 91: 8, 71: 9, 13: 17, 15: 8, 37: 6, 67: 8, 44: 5, 0: 6, 23: 8, 18: 7, 70: 7, 73: 4, 66: 9, 57: 7, 77: 8, 32: 8, 93: 3, 80: 8, 82: 4, 65: 2, 64: 7, 3: 11, 48: 15, 90: 5, 31: 4, 29: 6, 46: 8, 102: 5, 17: 10, 12: 16, 38: 4, 75: 3, 22: 13, 68: 9, 101: 3, 34: 6, 97: 2, 49: 7, 72: 3, 89: 3, 95: 3, 11: 6, 61: 4, 81: 2, 92: 1}, 'cat': {54: 50, 27: 36, 88: 8, 19: 50, 83: 30, 28: 23, 39: 46, 26: 16, 8: 5, 98: 6, 47: 25, 58: 23, 7: 27, 59: 49, 62: 16, 78: 14, 4: 11, 76: 16, 20: 25, 60: 20, 43: 14, 79: 7, 84: 8}}
Matched classes:
{'wild': 42, 'cat': 54, 'dog': 36}
Predictions stats on train:
Different than -1: 0
Max predicted class: 106
Length of x: 1500
{42: 0, 36: 1, 54: 2}
{42: 0, 36: 1, 54: 2}
Final accuracy on train dataset:    0.10533333333333333
Final accuracy on val dataset:      0.0033333333333333335

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=29.18791946308725, n_clusters=None)
All classes:
{'wild': {8: 70, 42: 88, 22: 35, 18: 42, 2: 10, 29: 29, 17: 1, 51: 24, 43: 13, 84: 47, 5: 28, 0: 62, 20: 25, 30: 6, 56: 6, 26: 2, 74: 3, 40: 6, 14: 1}, 'dog': {53: 13, 85: 9, 12: 9, 69: 6, 50: 11, 14: 16, 35: 15, 24: 9, 38: 13, 55: 12, 21: 11, 13: 18, 49: 10, 52: 7, 4: 25, 45: 8, 71: 9, 15: 24, 32: 8, 76: 6, 9: 11, 44: 5, 31: 6, 23: 8, 17: 12, 70: 7, 73: 4, 66: 9, 57: 7, 34: 11, 6: 10, 16: 9, 80: 8, 82: 4, 65: 2, 64: 7, 37: 11, 48: 15, 63: 4, 2: 9, 36: 10, 25: 16, 77: 4, 75: 3, 46: 13, 68: 9, 7: 9, 72: 3, 11: 6, 61: 4, 81: 2}, 'cat': {54: 50, 27: 36, 3: 16, 19: 50, 83: 30, 28: 23, 39: 46, 26: 16, 1: 19, 33: 22, 47: 25, 58: 23, 67: 27, 59: 49, 62: 16, 78: 14, 10: 11, 41: 25, 60: 20, 79: 7}}
Matched classes:
{'wild': 42, 'cat': 54, 'dog': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 88
Length of x: 1500
{42: 0, 4: 1, 54: 2}
{42: 0, 4: 1, 54: 2}
Final accuracy on train dataset:    0.10866666666666666
Final accuracy on val dataset:      0.0006666666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=31.2013422818792, n_clusters=None)
All classes:
{'wild': {37: 70, 42: 88, 22: 35, 4: 67, 24: 10, 29: 29, 17: 1, 51: 24, 43: 13, 41: 47, 12: 28, 7: 62, 0: 9, 56: 6, 26: 2, 40: 6, 61: 1}, 'dog': {53: 13, 10: 13, 25: 9, 69: 6, 50: 11, 61: 16, 35: 15, 2: 12, 38: 13, 55: 12, 21: 11, 28: 18, 49: 10, 14: 11, 9: 25, 45: 8, 71: 9, 31: 24, 32: 8, 6: 12, 19: 11, 44: 5, 63: 6, 23: 8, 17: 12, 70: 7, 73: 4, 66: 9, 57: 7, 34: 11, 30: 10, 33: 9, 39: 8, 65: 2, 64: 7, 5: 15, 48: 15, 24: 9, 36: 10, 52: 16, 46: 13, 68: 9, 15: 9, 72: 3, 11: 6}, 'cat': {54: 50, 27: 36, 16: 16, 8: 73, 13: 76, 58: 23, 26: 16, 18: 19, 1: 36, 47: 25, 67: 27, 59: 49, 62: 16, 3: 18, 20: 25, 60: 20}}
Matched classes:
{'wild': 42, 'cat': 13, 'dog': 9}
Predictions stats on train:
Different than -1: 0
Max predicted class: 77
Length of x: 1500
{42: 0, 9: 1, 13: 2}
{42: 0, 9: 1, 13: 2}
Final accuracy on train dataset:    0.126
Final accuracy on val dataset:      0.0

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=33.214765100671144, n_clusters=None)
All classes:
{'wild': {37: 70, 42: 88, 22: 35, 21: 67, 50: 10, 29: 29, 1: 1, 51: 24, 43: 13, 41: 47, 25: 28, 7: 62, 4: 9, 56: 6, 26: 2, 40: 6, 61: 1}, 'dog': {53: 13, 44: 13, 2: 24, 1: 18, 3: 18, 61: 16, 11: 12, 38: 13, 55: 12, 5: 14, 28: 18, 49: 10, 14: 11, 9: 25, 45: 8, 35: 9, 31: 24, 32: 8, 6: 12, 19: 11, 8: 9, 63: 6, 23: 8, 66: 9, 57: 7, 34: 11, 30: 10, 33: 9, 39: 8, 65: 2, 64: 7, 12: 15, 48: 15, 50: 9, 0: 19, 52: 16, 46: 13, 15: 9, 24: 6}, 'cat': {54: 50, 27: 36, 16: 16, 36: 73, 13: 76, 58: 23, 26: 16, 18: 19, 10: 36, 47: 25, 67: 27, 59: 49, 62: 16, 17: 18, 20: 25, 60: 20}}
Matched classes:
{'wild': 42, 'cat': 13, 'dog': 9}
Predictions stats on train:
Different than -1: 0
Max predicted class: 66
Length of x: 1500
{42: 0, 9: 1, 13: 2}
{42: 0, 9: 1, 13: 2}
Final accuracy on train dataset:    0.126
Final accuracy on val dataset:      0.028666666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=35.22818791946309, n_clusters=None)
All classes:
{'wild': {37: 70, 42: 88, 22: 35, 21: 67, 50: 10, 29: 29, 3: 1, 51: 24, 43: 13, 41: 47, 25: 28, 15: 62, 9: 9, 56: 6, 4: 2, 40: 6, 61: 1}, 'dog': {53: 13, 44: 13, 11: 24, 3: 18, 7: 18, 61: 16, 0: 18, 38: 13, 55: 12, 12: 14, 57: 18, 49: 10, 14: 11, 19: 25, 45: 8, 35: 9, 31: 24, 5: 17, 13: 12, 2: 18, 8: 9, 23: 8, 32: 9, 1: 9, 34: 11, 30: 10, 33: 9, 39: 8, 26: 15, 48: 15, 50: 9, 6: 19, 52: 16, 46: 13, 24: 6}, 'cat': {54: 50, 27: 36, 16: 16, 36: 73, 28: 76, 58: 23, 4: 43, 18: 19, 10: 36, 47: 25, 59: 49, 62: 16, 17: 18, 20: 25, 60: 20}}
Matched classes:
{'wild': 42, 'cat': 28, 'dog': 19}
Predictions stats on train:
Different than -1: 0
Max predicted class: 61
Length of x: 1500
{42: 0, 19: 1, 28: 2}
{42: 0, 19: 1, 28: 2}
Final accuracy on train dataset:    0.126
Final accuracy on val dataset:      0.016666666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=37.241610738255034, n_clusters=None)
All classes:
{'wild': {37: 70, 42: 88, 22: 35, 2: 73, 50: 10, 29: 29, 18: 1, 51: 24, 43: 13, 41: 47, 25: 28, 15: 62, 9: 9, 21: 2, 40: 6, 30: 1}, 'dog': {53: 13, 44: 13, 23: 24, 18: 18, 7: 18, 30: 16, 10: 18, 38: 13, 0: 20, 3: 24, 1: 29, 49: 10, 19: 25, 45: 8, 35: 9, 31: 24, 12: 17, 27: 12, 11: 18, 17: 9, 32: 9, 8: 9, 34: 11, 33: 9, 39: 8, 26: 15, 48: 15, 50: 9, 13: 19, 52: 16, 46: 13, 24: 6}, 'cat': {54: 50, 4: 85, 16: 16, 36: 73, 28: 76, 5: 42, 21: 43, 6: 56, 47: 25, 14: 34, 20: 25}}
Matched classes:
{'wild': 42, 'cat': 4, 'dog': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 57
Length of x: 1500
{42: 0, 1: 1, 4: 2}
{42: 0, 1: 1, 4: 2}
Final accuracy on train dataset:    0.13466666666666666
Final accuracy on val dataset:      0.017333333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=39.255033557046985, n_clusters=None)
All classes:
{'wild': {37: 70, 42: 88, 22: 35, 6: 73, 50: 10, 29: 29, 18: 1, 0: 33, 43: 13, 41: 47, 25: 28, 15: 62, 21: 2, 40: 6, 30: 1}, 'dog': {26: 13, 44: 13, 23: 24, 18: 18, 7: 18, 30: 16, 10: 18, 38: 13, 1: 36, 8: 24, 3: 29, 49: 10, 19: 25, 45: 8, 35: 9, 31: 24, 12: 17, 4: 27, 11: 18, 36: 9, 32: 9, 17: 9, 34: 11, 33: 9, 39: 8, 48: 15, 50: 9, 27: 19, 46: 13, 24: 6}, 'cat': {2: 123, 9: 85, 16: 16, 28: 76, 5: 42, 21: 43, 13: 56, 47: 25, 14: 34, 20: 25}}
Matched classes:
{'cat': 2, 'wild': 42, 'dog': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 54
Length of x: 1500
{42: 0, 1: 1, 2: 2}
{42: 0, 1: 1, 2: 2}
Final accuracy on train dataset:    0.16466666666666666
Final accuracy on val dataset:      0.0

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=41.26845637583893, n_clusters=None)
All classes:
{'wild': {37: 70, 42: 88, 22: 35, 13: 73, 1: 10, 29: 29, 18: 1, 7: 33, 43: 13, 41: 47, 25: 28, 15: 62, 0: 2, 40: 6, 30: 1}, 'dog': {26: 13, 21: 13, 23: 24, 18: 18, 5: 33, 30: 16, 2: 31, 38: 13, 8: 36, 3: 30, 17: 29, 9: 19, 19: 25, 1: 17, 35: 9, 31: 24, 12: 17, 10: 27, 24: 18, 36: 9, 32: 9, 34: 11, 33: 9, 39: 8, 27: 19}, 'cat': {6: 123, 0: 128, 16: 16, 4: 101, 11: 42, 28: 56, 14: 34, 20: 25}}
Matched classes:
{'cat': 0, 'wild': 42, 'dog': 8}
Predictions stats on train:
Different than -1: 0
Max predicted class: 49
Length of x: 1500
{42: 0, 8: 1, 0: 2}
{42: 0, 8: 1, 0: 2}
Final accuracy on train dataset:    0.168
Final accuracy on val dataset:      0.014

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=43.281879194630875, n_clusters=None)
All classes:
{'wild': {18: 70, 24: 101, 1: 82, 28: 73, 10: 10, 29: 29, 0: 1, 11: 39, 25: 28, 15: 62, 4: 2, 30: 1}, 'dog': {26: 13, 21: 13, 2: 37, 0: 36, 12: 33, 30: 16, 6: 31, 8: 36, 7: 30, 17: 29, 20: 19, 19: 25, 10: 17, 35: 9, 31: 24, 5: 25, 22: 27, 36: 9, 32: 9, 34: 11, 33: 9, 27: 19}, 'cat': {13: 123, 4: 128, 16: 16, 9: 101, 23: 42, 3: 81, 14: 34}}
Matched classes:
{'cat': 4, 'wild': 24, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 42
Length of x: 1500
{24: 0, 2: 1, 4: 2}
{24: 0, 2: 1, 4: 2}
Final accuracy on train dataset:    0.17733333333333334
Final accuracy on val dataset:      0.04133333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=45.29530201342283, n_clusters=None)
All classes:
{'wild': {18: 70, 24: 101, 3: 82, 28: 73, 10: 10, 29: 29, 1: 1, 11: 39, 25: 28, 15: 62, 4: 2, 30: 1}, 'dog': {26: 13, 21: 13, 2: 37, 1: 36, 12: 33, 30: 16, 6: 31, 0: 45, 7: 30, 17: 29, 20: 19, 19: 25, 10: 17, 35: 9, 31: 24, 5: 25, 22: 27, 32: 9, 34: 11, 33: 9, 27: 19}, 'cat': {13: 123, 4: 128, 16: 16, 9: 101, 23: 42, 8: 81, 14: 34}}
Matched classes:
{'cat': 4, 'wild': 24, 'dog': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 37
Length of x: 1500
{24: 0, 0: 1, 4: 2}
{24: 0, 0: 1, 4: 2}
Final accuracy on train dataset:    0.18266666666666667
Final accuracy on val dataset:      0.04133333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=47.30872483221477, n_clusters=None)
All classes:
{'wild': {18: 70, 24: 101, 17: 82, 28: 73, 10: 10, 29: 29, 8: 1, 11: 39, 25: 28, 15: 62, 4: 2, 30: 1}, 'dog': {7: 22, 21: 13, 5: 37, 8: 36, 26: 33, 30: 16, 6: 31, 2: 45, 16: 30, 3: 40, 20: 19, 19: 25, 10: 17, 31: 24, 12: 25, 22: 27, 0: 18, 27: 19}, 'cat': {13: 123, 4: 128, 1: 97, 9: 101, 23: 42, 14: 34}}
Matched classes:
{'cat': 4, 'wild': 24, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 34
Length of x: 1500
{24: 0, 2: 1, 4: 2}
{24: 0, 2: 1, 4: 2}
Final accuracy on train dataset:    0.18266666666666667
Final accuracy on val dataset:      0.06

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=49.322147651006716, n_clusters=None)
All classes:
{'wild': {18: 70, 24: 101, 17: 82, 28: 73, 10: 10, 29: 29, 8: 1, 11: 39, 25: 28, 15: 62, 4: 2, 30: 1}, 'dog': {7: 22, 21: 13, 5: 37, 8: 36, 26: 33, 30: 16, 6: 31, 2: 45, 16: 30, 0: 64, 20: 19, 19: 25, 10: 17, 12: 25, 22: 27, 1: 18, 27: 19}, 'cat': {13: 123, 4: 128, 3: 97, 9: 101, 23: 42, 14: 34}}
Matched classes:
{'cat': 4, 'wild': 24, 'dog': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 32
Length of x: 1500
{24: 0, 0: 1, 4: 2}
{24: 0, 0: 1, 4: 2}
Final accuracy on train dataset:    0.19533333333333333
Final accuracy on val dataset:      0.026

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=51.33557046979866, n_clusters=None)
All classes:
{'wild': {18: 70, 24: 101, 17: 82, 13: 73, 4: 11, 14: 29, 8: 1, 11: 39, 25: 28, 15: 62, 0: 2}, 'dog': {7: 22, 21: 13, 5: 37, 8: 36, 26: 33, 4: 33, 6: 31, 2: 45, 16: 30, 10: 64, 20: 19, 19: 25, 12: 25, 22: 27, 9: 18, 27: 19}, 'cat': {0: 251, 3: 97, 1: 135, 23: 42}}
Matched classes:
{'cat': 0, 'wild': 24, 'dog': 10}
Predictions stats on train:
Different than -1: 0
Max predicted class: 29
Length of x: 1500
{24: 0, 10: 1, 0: 2}
{24: 0, 10: 1, 0: 2}
Final accuracy on train dataset:    0.2773333333333333
Final accuracy on val dataset:      0.10333333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=53.348993288590606, n_clusters=None)
All classes:
{'wild': {18: 70, 24: 101, 17: 82, 13: 73, 9: 11, 14: 29, 8: 1, 11: 39, 25: 28, 15: 62, 4: 2}, 'dog': {16: 22, 21: 13, 5: 37, 8: 36, 12: 33, 9: 33, 6: 31, 2: 45, 1: 49, 10: 64, 20: 19, 19: 25, 0: 43, 22: 27}, 'cat': {4: 251, 7: 97, 3: 135, 23: 42}}
Matched classes:
{'cat': 4, 'wild': 24, 'dog': 10}
Predictions stats on train:
Different than -1: 0
Max predicted class: 26
Length of x: 1500
{24: 0, 10: 1, 4: 2}
{24: 0, 10: 1, 4: 2}
Final accuracy on train dataset:    0.2773333333333333
Final accuracy on val dataset:      0.16866666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=55.36241610738256, n_clusters=None)
All classes:
{'wild': {18: 70, 24: 101, 17: 82, 13: 73, 9: 11, 14: 29, 8: 1, 11: 39, 25: 28, 15: 62, 4: 2}, 'dog': {16: 22, 21: 13, 5: 37, 8: 36, 12: 33, 9: 33, 6: 31, 2: 45, 1: 49, 10: 64, 20: 19, 19: 25, 0: 43, 22: 27}, 'cat': {4: 251, 7: 97, 3: 135, 23: 42}}
Matched classes:
{'cat': 4, 'wild': 24, 'dog': 10}
Predictions stats on train:
Different than -1: 0
Max predicted class: 26
Length of x: 1500
{24: 0, 10: 1, 4: 2}
{24: 0, 10: 1, 4: 2}
Final accuracy on train dataset:    0.2773333333333333
Final accuracy on val dataset:      0.16866666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=57.3758389261745, n_clusters=None)
All classes:
{'wild': {18: 70, 24: 101, 17: 82, 13: 73, 9: 11, 14: 29, 8: 1, 11: 39, 25: 28, 15: 62, 4: 2}, 'dog': {16: 22, 21: 13, 5: 37, 8: 36, 12: 33, 9: 33, 6: 31, 2: 45, 1: 49, 10: 64, 20: 19, 19: 25, 0: 43, 22: 27}, 'cat': {4: 251, 7: 97, 3: 135, 23: 42}}
Matched classes:
{'cat': 4, 'wild': 24, 'dog': 10}
Predictions stats on train:
Different than -1: 0
Max predicted class: 24
Length of x: 1500
{24: 0, 10: 1, 4: 2}
{24: 0, 10: 1, 4: 2}
Final accuracy on train dataset:    0.2773333333333333
Final accuracy on val dataset:      0.16866666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=59.38926174496645, n_clusters=None)
All classes:
{'wild': {18: 70, 24: 101, 17: 82, 13: 73, 9: 11, 14: 29, 8: 1, 11: 39, 25: 28, 15: 62, 4: 2}, 'dog': {16: 22, 21: 13, 5: 37, 8: 36, 12: 33, 9: 33, 6: 31, 2: 45, 1: 49, 10: 64, 20: 19, 19: 25, 0: 43, 22: 27}, 'cat': {4: 251, 7: 97, 3: 135, 23: 42}}
Matched classes:
{'cat': 4, 'wild': 24, 'dog': 10}
Predictions stats on train:
Different than -1: 0
Max predicted class: 23
Length of x: 1500
{24: 0, 10: 1, 4: 2}
{24: 0, 10: 1, 4: 2}
Final accuracy on train dataset:    0.2773333333333333
Final accuracy on val dataset:      0.16866666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=61.4026845637584, n_clusters=None)
All classes:
{'wild': {18: 70, 11: 101, 17: 82, 13: 73, 1: 39, 14: 29, 0: 1, 5: 39, 15: 62, 9: 2}, 'dog': {16: 22, 21: 13, 0: 73, 12: 33, 1: 33, 6: 31, 2: 45, 4: 49, 10: 64, 20: 19, 19: 25, 3: 43, 22: 27}, 'cat': {9: 251, 7: 97, 8: 135, 23: 42}}
Matched classes:
{'cat': 9, 'wild': 11, 'dog': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 22
Length of x: 1500
{11: 0, 0: 1, 9: 2}
{11: 0, 0: 1, 9: 2}
Final accuracy on train dataset:    0.2833333333333333
Final accuracy on val dataset:      0.12933333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=63.416107382550344, n_clusters=None)
All classes:
{'wild': {18: 70, 11: 101, 17: 82, 13: 73, 3: 39, 14: 29, 1: 1, 12: 39, 15: 62, 9: 2}, 'dog': {16: 22, 21: 13, 1: 73, 0: 60, 3: 33, 6: 31, 5: 45, 4: 49, 10: 64, 20: 19, 19: 25, 8: 43}, 'cat': {9: 251, 7: 97, 2: 177}}
Matched classes:
{'cat': 9, 'wild': 11, 'dog': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 22
Length of x: 1500
{11: 0, 1: 1, 9: 2}
{11: 0, 1: 1, 9: 2}
Final accuracy on train dataset:    0.2833333333333333
Final accuracy on val dataset:      0.06866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=65.42953020134229, n_clusters=None)
All classes:
{'wild': {18: 70, 11: 101, 17: 82, 13: 73, 3: 39, 14: 29, 1: 1, 12: 39, 15: 62, 9: 2}, 'dog': {16: 22, 0: 44, 1: 73, 2: 60, 3: 33, 5: 45, 4: 49, 10: 64, 20: 19, 19: 25, 8: 43}, 'cat': {9: 251, 7: 97, 6: 177}}
Matched classes:
{'cat': 9, 'wild': 11, 'dog': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 20
Length of x: 1500
{11: 0, 1: 1, 9: 2}
{11: 0, 1: 1, 9: 2}
Final accuracy on train dataset:    0.2833333333333333
Final accuracy on val dataset:      0.12933333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=67.44295302013424, n_clusters=None)
All classes:
{'wild': {18: 70, 11: 101, 17: 82, 13: 73, 3: 39, 14: 29, 1: 1, 12: 39, 15: 62, 9: 2}, 'dog': {16: 22, 0: 44, 1: 73, 2: 60, 3: 33, 5: 45, 4: 49, 10: 64, 20: 19, 19: 25, 8: 43}, 'cat': {9: 251, 7: 97, 6: 177}}
Matched classes:
{'cat': 9, 'wild': 11, 'dog': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 20
Length of x: 1500
{11: 0, 1: 1, 9: 2}
{11: 0, 1: 1, 9: 2}
Final accuracy on train dataset:    0.2833333333333333
Final accuracy on val dataset:      0.12933333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=69.45637583892618, n_clusters=None)
All classes:
{'wild': {18: 70, 11: 101, 17: 82, 13: 73, 1: 39, 14: 29, 8: 1, 12: 39, 15: 62, 9: 2}, 'dog': {16: 22, 3: 44, 8: 73, 2: 60, 1: 52, 5: 45, 4: 49, 10: 64, 0: 68}, 'cat': {9: 251, 7: 97, 6: 177}}
Matched classes:
{'cat': 9, 'wild': 11, 'dog': 8}
Predictions stats on train:
Different than -1: 0
Max predicted class: 19
Length of x: 1500
{11: 0, 8: 1, 9: 2}
{11: 0, 8: 1, 9: 2}
Final accuracy on train dataset:    0.2833333333333333
Final accuracy on val dataset:      0.08533333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=71.46979865771813, n_clusters=None)
All classes:
{'wild': {18: 70, 11: 101, 17: 82, 13: 73, 1: 39, 14: 29, 8: 1, 12: 39, 15: 62, 9: 2}, 'dog': {16: 22, 3: 44, 8: 73, 2: 60, 1: 52, 5: 45, 4: 49, 10: 64, 0: 68}, 'cat': {9: 251, 7: 97, 6: 177}}
Matched classes:
{'cat': 9, 'wild': 11, 'dog': 8}
Predictions stats on train:
Different than -1: 0
Max predicted class: 17
Length of x: 1500
{11: 0, 8: 1, 9: 2}
{11: 0, 8: 1, 9: 2}
Final accuracy on train dataset:    0.2833333333333333
Final accuracy on val dataset:      0.08533333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=73.48322147651007, n_clusters=None)
All classes:
{'wild': {0: 132, 11: 101, 17: 82, 13: 73, 3: 39, 14: 29, 8: 1, 12: 39, 9: 2}, 'dog': {16: 22, 7: 44, 8: 73, 2: 60, 3: 52, 5: 45, 4: 49, 10: 64, 1: 68}, 'cat': {9: 251, 15: 97, 6: 177}}
Matched classes:
{'cat': 9, 'wild': 0, 'dog': 8}
Predictions stats on train:
Different than -1: 0
Max predicted class: 17
Length of x: 1500
{0: 0, 8: 1, 9: 2}
{0: 0, 8: 1, 9: 2}
Final accuracy on train dataset:    0.304
Final accuracy on val dataset:      0.10733333333333334

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=75.49664429530202, n_clusters=None)
All classes:
{'wild': {0: 132, 11: 101, 17: 82, 13: 73, 3: 39, 14: 29, 8: 1, 12: 39, 9: 2}, 'dog': {16: 22, 7: 44, 8: 73, 2: 60, 3: 52, 5: 45, 4: 49, 10: 64, 1: 68}, 'cat': {9: 251, 15: 97, 6: 177}}
Matched classes:
{'cat': 9, 'wild': 0, 'dog': 8}
Predictions stats on train:
Different than -1: 0
Max predicted class: 16
Length of x: 1500
{0: 0, 8: 1, 9: 2}
{0: 0, 8: 1, 9: 2}
Final accuracy on train dataset:    0.304
Final accuracy on val dataset:      0.007333333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=77.51006711409397, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 13: 73, 3: 39, 14: 29, 1: 1, 12: 39, 9: 2}, 'dog': {0: 71, 7: 44, 1: 141, 2: 60, 3: 52, 5: 45, 10: 64}, 'cat': {9: 251, 15: 97, 6: 177}}
Matched classes:
{'cat': 9, 'dog': 1, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 16
Length of x: 1500
{4: 0, 1: 1, 9: 2}
{4: 0, 1: 1, 9: 2}
Final accuracy on train dataset:    0.34933333333333333
Final accuracy on val dataset:      0.0

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=79.52348993288591, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 13: 73, 3: 39, 14: 29, 1: 1, 12: 39, 9: 2}, 'dog': {0: 71, 7: 44, 1: 141, 2: 60, 3: 52, 5: 45, 10: 64}, 'cat': {9: 251, 15: 97, 6: 177}}
Matched classes:
{'cat': 9, 'dog': 1, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 15
Length of x: 1500
{4: 0, 1: 1, 9: 2}
{4: 0, 1: 1, 9: 2}
Final accuracy on train dataset:    0.34933333333333333
Final accuracy on val dataset:      0.14733333333333334

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=81.53691275167786, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 13: 73, 3: 39, 14: 29, 1: 1, 12: 39, 9: 2}, 'dog': {0: 71, 7: 44, 1: 141, 2: 60, 3: 52, 5: 45, 10: 64}, 'cat': {9: 251, 15: 97, 6: 177}}
Matched classes:
{'cat': 9, 'dog': 1, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 14
Length of x: 1500
{4: 0, 1: 1, 9: 2}
{4: 0, 1: 1, 9: 2}
Final accuracy on train dataset:    0.34933333333333333
Final accuracy on val dataset:      0.09066666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=83.55033557046981, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 13: 73, 3: 39, 14: 29, 1: 1, 12: 39, 9: 2}, 'dog': {0: 71, 7: 44, 1: 141, 2: 60, 3: 52, 5: 45, 10: 64}, 'cat': {9: 251, 15: 97, 6: 177}}
Matched classes:
{'cat': 9, 'dog': 1, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 14
Length of x: 1500
{4: 0, 1: 1, 9: 2}
{4: 0, 1: 1, 9: 2}
Final accuracy on train dataset:    0.34933333333333333
Final accuracy on val dataset:      0.09066666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=85.56375838926175, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 13: 73, 3: 39, 14: 29, 1: 1, 12: 39, 9: 2}, 'dog': {2: 71, 7: 44, 1: 141, 6: 60, 3: 52, 5: 45, 10: 64}, 'cat': {9: 251, 0: 274}}
Matched classes:
{'cat': 0, 'dog': 1, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 14
Length of x: 1500
{4: 0, 1: 1, 0: 2}
{4: 0, 1: 1, 0: 2}
Final accuracy on train dataset:    0.36466666666666664
Final accuracy on val dataset:      0.27266666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=87.5771812080537, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 13: 73, 3: 39, 14: 29, 1: 1, 12: 39, 9: 2}, 'dog': {2: 71, 7: 44, 1: 141, 6: 60, 3: 52, 5: 45, 10: 64}, 'cat': {9: 251, 0: 274}}
Matched classes:
{'cat': 0, 'dog': 1, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 14
Length of x: 1500
{4: 0, 1: 1, 0: 2}
{4: 0, 1: 1, 0: 2}
Final accuracy on train dataset:    0.36466666666666664
Final accuracy on val dataset:      0.27266666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=89.59060402684565, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 1: 102, 7: 39, 3: 1, 12: 39, 9: 2}, 'dog': {6: 71, 0: 104, 3: 141, 7: 52, 5: 45, 10: 64}, 'cat': {9: 251, 2: 274}}
Matched classes:
{'cat': 2, 'dog': 3, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 14
Length of x: 1500
{4: 0, 3: 1, 2: 2}
{4: 0, 3: 1, 2: 2}
Final accuracy on train dataset:    0.36466666666666664
Final accuracy on val dataset:      0.14733333333333334

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=91.60402684563759, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 1: 102, 7: 39, 3: 1, 12: 39, 9: 2}, 'dog': {6: 71, 0: 104, 3: 141, 7: 52, 5: 45, 10: 64}, 'cat': {9: 251, 2: 274}}
Matched classes:
{'cat': 2, 'dog': 3, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 12
Length of x: 1500
{4: 0, 3: 1, 2: 2}
{4: 0, 3: 1, 2: 2}
Final accuracy on train dataset:    0.36466666666666664
Final accuracy on val dataset:      0.27266666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=93.61744966442954, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 3: 102, 0: 78, 7: 1, 9: 2}, 'dog': {6: 71, 1: 104, 7: 141, 0: 52, 5: 45, 10: 64}, 'cat': {9: 251, 2: 274}}
Matched classes:
{'cat': 2, 'dog': 7, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 12
Length of x: 1500
{4: 0, 7: 1, 2: 2}
{4: 0, 7: 1, 2: 2}
Final accuracy on train dataset:    0.36466666666666664
Final accuracy on val dataset:      0.3333333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=95.63087248322148, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 3: 102, 0: 78, 7: 1, 9: 2}, 'dog': {6: 71, 1: 104, 7: 141, 0: 52, 5: 45, 10: 64}, 'cat': {9: 251, 2: 274}}
Matched classes:
{'cat': 2, 'dog': 7, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 12
Length of x: 1500
{4: 0, 7: 1, 2: 2}
{4: 0, 7: 1, 2: 2}
Final accuracy on train dataset:    0.36466666666666664
Final accuracy on val dataset:      0.3333333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=97.64429530201343, n_clusters=None)
All classes:
{'wild': {4: 132, 11: 101, 8: 82, 3: 102, 0: 78, 7: 1, 9: 2}, 'dog': {6: 71, 1: 104, 7: 141, 0: 52, 5: 45, 10: 64}, 'cat': {9: 251, 2: 274}}
Matched classes:
{'cat': 2, 'dog': 7, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 12
Length of x: 1500
{4: 0, 7: 1, 2: 2}
{4: 0, 7: 1, 2: 2}
Final accuracy on train dataset:    0.36466666666666664
Final accuracy on val dataset:      0.3333333333333333

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=99.65771812080538, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 8: 82, 7: 102, 1: 78, 2: 1, 9: 2}, 'dog': {0: 135, 3: 104, 2: 186, 1: 52}, 'cat': {9: 251, 6: 274}}
Matched classes:
{'cat': 6, 'dog': 2, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 11
Length of x: 1500
{4: 0, 2: 1, 6: 2}
{4: 0, 2: 1, 6: 2}
Final accuracy on train dataset:    0.39466666666666667
Final accuracy on val dataset:      0.33

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=101.67114093959732, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 8: 82, 7: 102, 1: 78, 2: 1, 9: 2}, 'dog': {0: 135, 3: 104, 2: 186, 1: 52}, 'cat': {9: 251, 6: 274}}
Matched classes:
{'cat': 6, 'dog': 2, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 10
Length of x: 1500
{4: 0, 2: 1, 6: 2}
{4: 0, 2: 1, 6: 2}
Final accuracy on train dataset:    0.39466666666666667
Final accuracy on val dataset:      0.33

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=103.68456375838927, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 8: 82, 7: 102, 1: 78, 2: 1, 9: 2}, 'dog': {0: 135, 3: 104, 2: 186, 1: 52}, 'cat': {9: 251, 6: 274}}
Matched classes:
{'cat': 6, 'dog': 2, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 10
Length of x: 1500
{4: 0, 2: 1, 6: 2}
{4: 0, 2: 1, 6: 2}
Final accuracy on train dataset:    0.39466666666666667
Final accuracy on val dataset:      0.33

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=105.69798657718121, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 8: 82, 7: 102, 1: 78, 2: 1, 9: 2}, 'dog': {0: 135, 3: 104, 2: 186, 1: 52}, 'cat': {9: 251, 6: 274}}
Matched classes:
{'cat': 6, 'dog': 2, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 9
Length of x: 1500
{4: 0, 2: 1, 6: 2}
{4: 0, 2: 1, 6: 2}
Final accuracy on train dataset:    0.39466666666666667
Final accuracy on val dataset:      0.22266666666666668

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=107.71140939597316, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 8: 82, 7: 102, 1: 78, 2: 1, 9: 2}, 'dog': {0: 135, 3: 104, 2: 186, 1: 52}, 'cat': {9: 251, 6: 274}}
Matched classes:
{'cat': 6, 'dog': 2, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 9
Length of x: 1500
{4: 0, 2: 1, 6: 2}
{4: 0, 2: 1, 6: 2}
Final accuracy on train dataset:    0.39466666666666667
Final accuracy on val dataset:      0.22266666666666668

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=109.72483221476512, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 8: 82, 7: 102, 1: 78, 2: 1, 9: 2}, 'dog': {0: 135, 3: 104, 2: 186, 1: 52}, 'cat': {9: 251, 6: 274}}
Matched classes:
{'cat': 6, 'dog': 2, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 8
Length of x: 1500
{4: 0, 2: 1, 6: 2}
{4: 0, 2: 1, 6: 2}
Final accuracy on train dataset:    0.39466666666666667
Final accuracy on val dataset:      0.22266666666666668

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=111.73825503355705, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 8: 82, 7: 102, 1: 78, 6: 1, 0: 2}, 'dog': {2: 135, 3: 104, 6: 186, 1: 52}, 'cat': {0: 525}}
Matched classes:
{'cat': 0, 'dog': 6, 'wild': 4}
Predictions stats on train:
Different than -1: 0
Max predicted class: 7
Length of x: 1500
{4: 0, 6: 1, 0: 2}
{4: 0, 6: 1, 0: 2}
Final accuracy on train dataset:    0.562
Final accuracy on val dataset:      0.22266666666666668

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=113.751677852349, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 0: 184, 3: 78, 6: 1, 1: 2}, 'dog': {2: 135, 7: 104, 6: 186, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 6, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 7
Length of x: 1500
{0: 0, 6: 1, 1: 2}
{0: 0, 6: 1, 1: 2}
Final accuracy on train dataset:    0.5966666666666667
Final accuracy on val dataset:      0.53

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=115.76510067114096, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 0: 184, 3: 78, 6: 1, 1: 2}, 'dog': {2: 135, 7: 104, 6: 186, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 6, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 7
Length of x: 1500
{0: 0, 6: 1, 1: 2}
{0: 0, 6: 1, 1: 2}
Final accuracy on train dataset:    0.5966666666666667
Final accuracy on val dataset:      0.53

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=117.7785234899329, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 0: 184, 3: 78, 6: 1, 1: 2}, 'dog': {2: 135, 7: 104, 6: 186, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 6, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{0: 0, 6: 1, 1: 2}
{0: 0, 6: 1, 1: 2}
Final accuracy on train dataset:    0.5966666666666667
Final accuracy on val dataset:      0.132

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=119.79194630872485, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 0: 184, 3: 78, 6: 1, 1: 2}, 'dog': {2: 135, 7: 104, 6: 186, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 6, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{0: 0, 6: 1, 1: 2}
{0: 0, 6: 1, 1: 2}
Final accuracy on train dataset:    0.5966666666666667
Final accuracy on val dataset:      0.132

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=121.8053691275168, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 0: 184, 3: 78, 6: 1, 1: 2}, 'dog': {2: 135, 7: 104, 6: 186, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 6, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{0: 0, 6: 1, 1: 2}
{0: 0, 6: 1, 1: 2}
Final accuracy on train dataset:    0.5966666666666667
Final accuracy on val dataset:      0.132

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=123.81879194630874, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {6: 135, 0: 290, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.666
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=125.83221476510069, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {6: 135, 0: 290, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.666
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=127.84563758389262, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {6: 135, 0: 290, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.666
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=129.85906040268458, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {6: 135, 0: 290, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.666
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=131.87248322147653, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {6: 135, 0: 290, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.666
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=133.88590604026848, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {6: 135, 0: 290, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.666
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=135.8993288590604, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {6: 135, 0: 290, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.666
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=137.91275167785236, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {6: 135, 0: 290, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.666
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=139.9261744966443, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=141.93959731543626, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=143.9530201342282, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=145.96644295302013, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=147.9798657718121, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=149.99328859060404, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=152.006711409396, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=154.02013422818794, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 6
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.252

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=156.0335570469799, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 5
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.384

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=158.04697986577182, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 5
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.384

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=160.06040268456377, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 5
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.384

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=162.07382550335572, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 4
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.0006666666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=164.08724832214767, n_clusters=None)
All classes:
{'wild': {4: 132, 5: 101, 2: 184, 3: 78, 0: 1, 1: 2}, 'dog': {0: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 0, 'wild': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 4
Length of x: 1500
{2: 0, 0: 1, 1: 2}
{2: 0, 0: 1, 1: 2}
Final accuracy on train dataset:    0.756
Final accuracy on val dataset:      0.0006666666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=166.10067114093962, n_clusters=None)
All classes:
{'wild': {4: 132, 0: 285, 3: 78, 2: 1, 1: 2}, 'dog': {2: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 2, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 4
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.45266666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=168.11409395973155, n_clusters=None)
All classes:
{'wild': {4: 132, 0: 285, 3: 78, 2: 1, 1: 2}, 'dog': {2: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 2, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 4
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.45266666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=170.1275167785235, n_clusters=None)
All classes:
{'wild': {4: 132, 0: 285, 3: 78, 2: 1, 1: 2}, 'dog': {2: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 2, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 4
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.45266666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=172.14093959731545, n_clusters=None)
All classes:
{'wild': {4: 132, 0: 285, 3: 78, 2: 1, 1: 2}, 'dog': {2: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 2, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 4
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.45266666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=174.1543624161074, n_clusters=None)
All classes:
{'wild': {4: 132, 0: 285, 3: 78, 2: 1, 1: 2}, 'dog': {2: 425, 3: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'dog': 2, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 4
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.45266666666666666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=176.16778523489936, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 4
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=178.1812080536913, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=180.19463087248323, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=182.20805369127518, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=184.22147651006713, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=186.2348993288591, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=188.24832214765104, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=190.26174496644296, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=192.2751677852349, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=194.28859060402687, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=196.30201342281882, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=198.31543624161077, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=200.3288590604027, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 3
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.674

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=202.34228187919464, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.0

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=204.3557046979866, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.0

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=206.36912751677855, n_clusters=None)
All classes:
{'wild': {0: 210, 1: 285, 2: 1, 3: 2}, 'dog': {2: 425, 0: 52}, 'cat': {3: 525}}
Matched classes:
{'cat': 3, 'dog': 2, 'wild': 1}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{1: 0, 2: 1, 3: 2}
{1: 0, 2: 1, 3: 2}
Final accuracy on train dataset:    0.8233333333333334
Final accuracy on val dataset:      0.0

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=208.3825503355705, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=210.39597315436242, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=212.40939597315437, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=214.42281879194633, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=216.43624161073828, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=218.44966442953023, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=220.46308724832218, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=222.4765100671141, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=224.48993288590606, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=226.503355704698, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=228.51677852348996, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=230.5302013422819, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=232.54362416107384, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=234.5570469798658, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=236.57046979865774, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=238.5838926174497, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=240.59731543624164, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=242.6107382550336, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=244.62416107382552, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=246.63758389261747, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=248.65100671140942, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=250.66442953020137, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=252.67785234899333, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=254.69127516778525, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=256.70469798657723, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=258.71812080536915, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=260.7315436241611, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=262.74496644295306, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=264.758389261745, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=266.77181208053696, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=268.7852348993289, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=270.7986577181208, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=272.8120805369128, n_clusters=None)
All classes:
{'wild': {0: 495, 2: 1, 1: 2}, 'dog': {2: 425, 0: 52}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0, 'dog': 2}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 2: 1, 1: 2}
{0: 0, 2: 1, 1: 2}
Final accuracy on train dataset:    0.9633333333333334
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=274.8255033557047, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=276.8389261744967, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 2
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.39866666666666667

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=278.8523489932886, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=280.86577181208054, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=282.8791946308725, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=284.89261744966444, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=286.9060402684564, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=288.91946308724835, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=290.93288590604027, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=292.94630872483225, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=294.9597315436242, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=296.97315436241615, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True,
                        distance_threshold=298.9865771812081, n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666

 Starting test with:
AgglomerativeClustering(compute_full_tree=True, distance_threshold=301.0,
                        n_clusters=None)
All classes:
{'wild': {0: 496, 1: 2}, 'dog': {0: 477}, 'cat': {1: 525}}
Matched classes:
{'cat': 1, 'wild': 0}
Predictions stats on train:
Different than -1: 0
Max predicted class: 1
Length of x: 1500
{0: 0, 1: 2}
{0: 0, 1: 2}
Final accuracy on train dataset:    0.6806666666666666
Final accuracy on val dataset:      0.666
Best accuracy found 0.674 with params:
{'dist': 176.16778523489936}
